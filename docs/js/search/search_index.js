var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/IAbstractBase.html",[0,0.747,1,1.081]],["body/interfaces/IAbstractBase.html",[0,1.011,1,1.252,2,0.728,3,0.604,4,0.495,5,1.56,6,0.398,7,1.502,8,1.598,9,1.887,10,1.043,11,2.873,12,1.598,13,1.598,14,2.873,15,2.236,16,2.873,17,1.043,18,1.816,19,1.938,20,2.175,21,2.005,22,1.691,23,0.07,24,1.691,25,1.252,26,1.168,27,2.236,28,1.51,29,2.005,30,1.304,31,2.005,32,1.502,33,1.219,34,2.005,35,1.219,36,1.816,37,1.598,38,2.005,39,1.267,40,1.816,41,2.005,42,1.502,43,2.005,44,1.332,45,1.917,46,1.219,47,1.267,48,0.728,49,0.728,50,0.865,51,1.048,52,1.048,53,1.267,54,0.042,55,0.042]],["title/interfaces/Resource.html",[0,0.747,9,1.081]],["body/interfaces/Resource.html",[0,1.161,1,1.137,2,0.948,3,0.786,4,0.644,5,2.031,6,0.518,7,1.802,8,1.137,9,1.946,12,1.137,13,1.137,18,1.65,19,1.858,23,0.07,25,1.161,26,1.235,30,1.318,32,1.365,33,0.948,35,1.49,36,1.65,37,1.501,40,1.65,42,1.365,44,1.401,45,1.802,46,1.401,47,1.65,48,0.948,49,0.948,50,1.037,51,2.144,52,2.017,53,2.592,54,0.051,55,0.051]],["title/classes/RestBase.html",[56,0.492,57,1.298]],["body/classes/RestBase.html",[2,0.811,3,0.672,4,0.551,6,0.443,8,1.351,10,1.126,12,1.676,13,1.676,17,1.126,18,1.412,19,1.761,20,2.011,22,1.351,23,0.072,24,1.351,25,1.072,26,0.933,27,2.413,28,1.613,30,1.316,32,1.168,33,1.126,35,1.126,36,1.412,37,1.351,40,1.412,42,1.621,44,1.126,45,2.011,46,1.293,47,1.412,48,0.811,49,0.811,50,0.672,54,0.046,55,0.046,56,0.615,57,1.621,58,2.234,59,1.621,60,2.234,61,2.234,62,2.234,63,2.234,64,2.234,65,2.234,66,3.145,67,1.168,68,1.168,69,2.234]],["title/classes/RestModelBase.html",[56,0.492,70,1.569]],["body/classes/RestModelBase.html",[1,1.266,2,0.463,3,0.384,4,0.315,6,0.253,7,1.066,9,0.888,10,1.056,12,0.888,13,0.888,17,1.056,19,1.609,20,1.771,22,1.266,23,0.073,24,1.266,25,1.112,26,0.875,28,1.497,30,1.071,33,1.23,35,0.463,37,0.888,39,0.806,42,1.066,44,1.056,46,1.154,48,0.463,49,0.463,50,0.613,51,1.52,52,1.331,54,0.03,55,0.03,56,0.404,59,1.066,67,1.331,68,1.331,70,1.609,71,0.993,72,3.177,73,3.177,74,2.545,75,1.276,76,2.636,77,2.038,78,2.038,79,2.038,80,2.874,81,2.141,82,1.276,83,2.636,84,1.586,85,1.276,86,2.038,87,1.276,88,1.276,89,0.993,90,0.993,91,0.667,92,2.008,93,3.16,94,2.038,95,2.038,96,2.038,97,1.276,98,1.276,99,1.276,100,1.276,101,0.993,102,1.276,103,0.993,104,1.586,105,1.276,106,1.276,107,1.586,108,1.288,109,0.806,110,1.586,111,1.276,112,0.993,113,1.276,114,0.993,115,0.667,116,1.276,117,0.806,118,0.993,119,0.993,120,0.993,121,1.276,122,1.276,123,1.276,124,2.038,125,1.276,126,1.276,127,2.038,128,2.038,129,2.038,130,1.276,131,1.276,132,2.636,133,1.276,134,0.556,135,0.993,136,1.586,137,0.993,138,0.993,139,0.993,140,1.331,141,0.993,142,0.993,143,1.98,144,0.993,145,1.276,146,1.276,147,0.993,148,1.276,149,1.276,150,1.276]],["title/classes/RestRoute.html",[44,0.901,56,0.492]],["body/classes/RestRoute.html",[1,1.241,2,0.447,3,0.371,4,0.304,6,0.244,9,1.36,10,0.903,12,0.536,13,0.536,17,0.447,19,1.683,20,1.489,22,1.528,23,0.073,24,1.241,25,1.098,26,0.857,28,1.484,30,1.098,32,0.644,33,1.134,35,1.034,37,0.536,39,0.778,44,0.719,46,1.211,48,0.447,49,0.447,50,0.371,51,1.632,52,1.489,53,0.778,54,0.029,55,0.029,56,0.393,59,1.036,67,1.036,68,1.489,70,0.778,76,1.934,80,3.072,81,2.379,83,3.072,84,1.934,89,0.958,90,0.958,91,1.3,92,2.304,93,2.837,101,0.958,103,0.958,104,1.541,107,1.541,108,1.252,109,0.778,110,1.541,112,0.958,114,0.958,115,0.644,117,0.778,118,0.958,119,0.958,120,0.958,132,2.595,134,0.536,135,0.958,136,1.541,137,0.958,138,0.958,139,0.958,140,1.3,141,0.958,142,0.958,143,1.541,144,0.958,147,1.934,151,1.231,152,1.541,153,1.981,154,1.571,155,1.231,156,1.231,157,1.981,158,1.231,159,1.981,160,1.231,161,1.541,162,1.231,163,1.231,164,0.958,165,0.958,166,1.231,167,1.231,168,2.485,169,1.231,170,1.981,171,1.231,172,1.231,173,1.231,174,1.231,175,1.231,176,1.541,177,1.231,178,1.231,179,1.231,180,1.231,181,1.231,182,1.231,183,1.981,184,1.981,185,1.231,186,1.981,187,1.231,188,1.231,189,1.231,190,1.981,191,1.981,192,1.231,193,1.231,194,1.231,195,1.231,196,1.231,197,1.231]],["title/interfaces/RestfulOptions.html",[0,0.747,198,1.931]],["body/interfaces/RestfulOptions.html",[0,1.082,2,1.012,3,0.839,4,0.687,6,0.553,7,1.88,23,0.072,25,1.082,26,1.266,28,1.527,30,1.198,50,1.082,54,0.053,55,0.053,67,2.199,134,1.214,140,2.199,198,3.097,199,2.168,200,1.761,201,2.168,202,3.595,203,3.595,204,2.787,205,3.595,206,2.787]],["title/changelog.html",[207,1.328,208,1.098,209,2.1]],["body/changelog.html",[4,0.62,8,1.76,10,0.913,15,1.956,17,0.913,23,0.049,54,0.049,55,0.049,56,0.499,57,1.314,115,1.314,154,2.553,210,3.36,211,2.513,212,2.513,213,2.513,214,1.588,215,2.513,216,2.513,217,1.956,218,3.36,219,2.513,220,2.513,221,3.442,222,3.785,223,3.785,224,4.04,225,4.332,226,2.513,227,3.36,228,1.956,229,1.956,230,2.513,231,2.513,232,2.513,233,3.36,234,3.36,235,3.498,236,3.36,237,3.36,238,2.513,239,2.513,240,2.513,241,2.513,242,2.513,243,2.513,244,4.04,245,3.36,246,2.513,247,2.513,248,1.956,249,2.513,250,2.513,251,2.513,252,2.513,253,3.36,254,1.956,255,2.513,256,2.513]],["title/dependencies.html",[257,2.1,258,1.877]],["body/dependencies.html",[23,0.068,49,1.325,54,0.062,55,0.062,164,2.839,258,2.306,259,3.648,260,3.648]],["title/miscellaneous/functions.html",[134,1.294,261,1.098]],["body/miscellaneous/functions.html",[6,0.7,22,1.537,23,0.065,24,1.537,26,1.062,54,0.061,55,0.061,81,2.229,134,1.537,199,2.744,200,2.628,201,2.744,261,1.844,262,3.527,263,3.527]],["title/index.html",[6,0.417,207,1.328,208,1.098]],["body/index.html",[3,0.722,8,0.685,10,0.872,17,1.057,23,0.071,28,0.872,30,0.473,33,0.872,35,0.571,45,1.255,46,1.397,48,0.571,50,0.722,54,0.035,55,0.035,56,0.476,57,1.522,59,1.255,66,1.224,68,0.822,91,1.255,92,0.994,108,0.994,109,0.994,115,0.822,117,0.994,140,0.822,152,1.867,154,2.336,161,1.224,165,1.224,176,1.867,200,2.058,208,1.255,214,1.839,217,1.867,228,2.265,229,1.224,235,2.729,248,1.867,254,1.867,258,0.994,264,2.4,265,2.4,266,1.572,267,1.572,268,3.845,269,3.697,270,1.517,271,1.572,272,2.4,273,2.4,274,1.572,275,1.572,276,2.91,277,1.572,278,1.572,279,1.572,280,1.572,281,1.572,282,1.572,283,1.572,284,1.572,285,1.572,286,1.572,287,2.4,288,1.572,289,1.572,290,1.572,291,1.572,292,1.572,293,1.572,294,1.572,295,1.572,296,1.572,297,1.572,298,1.572,299,1.572,300,1.572,301,1.572,302,1.572,303,1.572,304,1.572,305,3.845,306,1.572,307,1.572,308,1.572,309,1.572,310,2.4,311,1.572,312,2.4,313,2.4,314,2.4,315,1.572,316,3.257,317,1.572,318,2.4,319,1.572,320,1.572,321,1.572,322,1.867,323,1.572,324,2.4,325,2.91,326,1.572,327,1.572,328,1.572,329,1.572,330,1.572,331,1.572,332,1.572,333,1.572,334,1.572,335,1.572,336,1.572,337,1.572,338,1.572,339,2.4,340,2.4,341,1.572,342,1.572,343,1.572,344,1.572,345,1.572,346,1.572,347,1.572,348,1.572,349,1.572,350,1.572,351,1.572,352,1.572,353,2.4,354,3.697,355,1.572,356,1.572,357,1.572,358,2.4,359,1.572,360,1.572,361,2.4,362,1.572,363,1.572,364,0.994,365,1.572,366,1.572,367,1.572,368,1.572,369,1.224]],["title/license.html",[207,1.328,208,1.098,270,1.328]],["body/license.html",[4,0.633,23,0.05,54,0.05,55,0.05,214,1.621,221,1.996,270,1.621,322,2.65,369,2.65,370,3.824,371,2.565,372,2.565,373,3.406,374,2.565,375,2.565,376,2.565,377,2.565,378,3.406,379,2.565,380,4.073,381,4.571,382,2.565,383,3.406,384,3.824,385,2.565,386,3.824,387,3.406,388,2.565,389,2.565,390,2.565,391,2.565,392,2.565,393,2.565,394,2.565,395,2.565,396,2.565,397,2.565,398,2.565,399,2.565,400,2.565,401,2.565,402,3.406,403,3.406,404,2.565,405,2.565,406,2.565,407,3.406,408,2.565,409,2.565,410,2.565,411,2.565,412,2.565,413,2.565,414,2.565,415,2.565,416,2.565,417,2.565,418,2.565,419,2.565,420,2.565,421,2.565,422,2.565,423,2.565,424,2.565,425,2.565,426,2.565,427,2.565,428,2.565,429,2.565,430,2.565]],["title/modules.html",[364,2.106]],["body/modules.html",[23,0.064,54,0.064,55,0.064,364,2.376]],["title/overview.html",[431,2.592]],["body/overview.html",[0,1.109,23,0.063,54,0.063,55,0.063,56,0.731,431,2.867,432,4.266]],["title/miscellaneous/typealiases.html",[261,1.098,433,2.97]],["body/miscellaneous/typealiases.html",[6,0.717,23,0.062,25,1.088,54,0.062,55,0.062,71,2.811,91,2.336,261,1.889,434,3.613,435,3.613]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["0.0.7",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":143,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["1.0",{"_index":366,"title":{},"body":{"index.html":{}}}],["10",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":280,"title":{},"body":{"index.html":{}}}],["2018",{"_index":221,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":432,"title":{},"body":{"overview.html":{}}}],["30",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["4.17.0",{"_index":260,"title":{},"body":{"dependencies.html":{}}}],["53ed63d",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":259,"title":{},"body":{"dependencies.html":{}}}],["6188851",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":356,"title":{},"body":{"index.html":{}}}],["86ff926",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":78,"title":{},"body":{"classes/RestModelBase.html":{}}}],["abov",{"_index":401,"title":{},"body":{"license.html":{}}}],["action",{"_index":424,"title":{},"body":{"license.html":{}}}],["add",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["addroute(rout",{"_index":135,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":139,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":133,"title":{},"body":{"classes/RestModelBase.html":{}}}],["addroute(this.base.resourc",{"_index":194,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":334,"title":{},"body":{"index.html":{}}}],["alias",{"_index":434,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":394,"title":{},"body":{"license.html":{}}}],["angular",{"_index":279,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":48,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":313,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":281,"title":{},"body":{"index.html":{}}}],["api",{"_index":274,"title":{},"body":{"index.html":{}}}],["app",{"_index":324,"title":{},"body":{"index.html":{}}}],["arg",{"_index":201,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":203,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":205,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":428,"title":{},"body":{"license.html":{}}}],["associ",{"_index":382,"title":{},"body":{"license.html":{}}}],["author",{"_index":417,"title":{},"body":{"license.html":{}}}],["auto",{"_index":340,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":368,"title":{},"body":{"index.html":{}}}],["base",{"_index":147,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseclon",{"_index":178,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.http",{"_index":180,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.resourc",{"_index":184,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":140,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":142,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":144,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["becom",{"_index":367,"title":{},"body":{"index.html":{}}}],["better",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":283,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":286,"title":{},"body":{"index.html":{}}}],["born",{"_index":289,"title":{},"body":{"index.html":{}}}],["bug",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":362,"title":{},"body":{"index.html":{}}}],["c",{"_index":371,"title":{},"body":{"license.html":{}}}],["cdd0f86",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":210,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":209,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":377,"title":{},"body":{"license.html":{}}}],["claim",{"_index":420,"title":{},"body":{"license.html":{}}}],["class",{"_index":56,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clonedeep",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeep(this.bas",{"_index":179,"title":{},"body":{"classes/RestRoute.html":{}}}],["commit",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":343,"title":{},"body":{"index.html":{}}}],["compon",{"_index":325,"title":{},"body":{"index.html":{}}}],["condit",{"_index":400,"title":{},"body":{"license.html":{}}}],["connect",{"_index":430,"title":{},"body":{"license.html":{}}}],["const",{"_index":93,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":59,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":75,"title":{},"body":{"classes/RestModelBase.html":{}}}],["constructor(bas",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["constructor(http",{"_index":60,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":267,"title":{},"body":{"index.html":{}}}],["continu",{"_index":360,"title":{},"body":{"index.html":{}}}],["contract",{"_index":425,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":298,"title":{},"body":{"index.html":{}}}],["copi",{"_index":380,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":370,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":293,"title":{},"body":{"index.html":{}}}],["creat",{"_index":308,"title":{},"body":{"index.html":{}}}],["createhttprequest(method",{"_index":101,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["current",{"_index":350,"title":{},"body":{"index.html":{}}}],["damag",{"_index":421,"title":{},"body":{"license.html":{}}}],["data",{"_index":33,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":182,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":96,"title":{},"body":{"classes/RestModelBase.html":{}}}],["deal",{"_index":383,"title":{},"body":{"license.html":{}}}],["defin",{"_index":20,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":72,"title":{},"body":{"classes/RestModelBase.html":{}}}],["delete(param",{"_index":79,"title":{},"body":{"classes/RestModelBase.html":{}}}],["demo",{"_index":228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["democompon",{"_index":329,"title":{},"body":{"index.html":{}}}],["depend",{"_index":258,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":278,"title":{},"body":{"index.html":{}}}],["desir",{"_index":310,"title":{},"body":{"index.html":{}}}],["dev",{"_index":349,"title":{},"body":{"index.html":{}}}],["develop",{"_index":269,"title":{},"body":{"index.html":{}}}],["direct",{"_index":319,"title":{},"body":{"index.html":{}}}],["directori",{"_index":351,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":392,"title":{},"body":{"license.html":{}}}],["document",{"_index":214,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":301,"title":{},"body":{"index.html":{}}}],["eeca740",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":346,"title":{},"body":{"index.html":{}}}],["event",{"_index":416,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":272,"title":{},"body":{"index.html":{}}}],["export",{"_index":50,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":409,"title":{},"body":{"license.html":{}}}],["extend",{"_index":248,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["featur",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":321,"title":{},"body":{"index.html":{}}}],["find",{"_index":338,"title":{},"body":{"index.html":{}}}],["first",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":412,"title":{},"body":{"license.html":{}}}],["fix",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":399,"title":{},"body":{"license.html":{}}}],["framework",{"_index":295,"title":{},"body":{"index.html":{}}}],["free",{"_index":376,"title":{},"body":{"license.html":{}}}],["fullresponseinterc",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["fullresponseinterceptor",{"_index":11,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["fullresponseinterceptor(r",{"_index":18,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["fun",{"_index":275,"title":{},"body":{"index.html":{}}}],["function",{"_index":134,"title":{"miscellaneous/functions.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":397,"title":{},"body":{"license.html":{}}}],["gener",{"_index":341,"title":{},"body":{"index.html":{}}}],["get",{"_index":207,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["get'|'post",{"_index":167,"title":{},"body":{"classes/RestRoute.html":{}}}],["getbaseurl",{"_index":12,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":13,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":128,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":193,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["getlist(param",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["geton",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":73,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getpost",{"_index":330,"title":{},"body":{"index.html":{}}}],["grant",{"_index":375,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":67,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["help",{"_index":303,"title":{},"body":{"index.html":{}}}],["here",{"_index":318,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":374,"title":{},"body":{"license.html":{}}}],["highli",{"_index":271,"title":{},"body":{"index.html":{}}}],["hit",{"_index":365,"title":{},"body":{"index.html":{}}}],["holder",{"_index":418,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":45,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"index.html":{}}}],["httpevent",{"_index":47,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["httpeventtyp",{"_index":90,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpeventtype.respons",{"_index":119,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheader",{"_index":89,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheaders(this.getdefaulthead",{"_index":103,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpparam",{"_index":80,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest",{"_index":37,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest(method",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":315,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":265,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":294,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":277,"title":{},"body":{"index.html":{}}}],["iabstractbas",{"_index":1,"title":{"interfaces/IAbstractBase.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id",{"_index":51,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["idea",{"_index":287,"title":{},"body":{"index.html":{}}}],["idordata",{"_index":168,"title":{},"body":{"classes/RestRoute.html":{}}}],["implement",{"_index":254,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":410,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["includ",{"_index":386,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inject",{"_index":312,"title":{},"body":{"index.html":{}}}],["insid",{"_index":285,"title":{},"body":{"index.html":{}}}],["instal",{"_index":268,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":290,"title":{},"body":{"index.html":{}}}],["key",{"_index":129,"title":{},"body":{"classes/RestModelBase.html":{}}}],["kind",{"_index":408,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":422,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":419,"title":{},"body":{"license.html":{}}}],["lib",{"_index":288,"title":{},"body":{"index.html":{}}}],["licens",{"_index":270,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":296,"title":{},"body":{"index.html":{}}}],["limit",{"_index":387,"title":{},"body":{"license.html":{}}}],["link",{"_index":229,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["liter",{"_index":64,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":348,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{},"dependencies.html":{}}}],["log",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":302,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":175,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["mapmodel",{"_index":14,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["mapmodel(path",{"_index":32,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":320,"title":{},"body":{"index.html":{}}}],["match",{"_index":55,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":292,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":411,"title":{},"body":{"license.html":{}}}],["merg",{"_index":390,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["method,url",{"_index":106,"title":{},"body":{"classes/RestModelBase.html":{}}}],["miscellan",{"_index":261,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":369,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":176,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":314,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":389,"title":{},"body":{"license.html":{}}}],["modul",{"_index":364,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":24,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["new",{"_index":68,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["ngx",{"_index":264,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":347,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":415,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":402,"title":{},"body":{"license.html":{}}}],["now",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":305,"title":{},"body":{"index.html":{}}}],["null",{"_index":170,"title":{},"body":{"classes/RestRoute.html":{}}}],["number",{"_index":52,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object.assign(plain",{"_index":125,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thi",{"_index":100,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":98,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":97,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":95,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(plain",{"_index":131,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":99,"title":{},"body":{"classes/RestModelBase.html":{}}}],["observ",{"_index":19,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observable(observ",{"_index":114,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observer.next(response.bodi",{"_index":120,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":379,"title":{},"body":{"license.html":{}}}],["on",{"_index":323,"title":{},"body":{"index.html":{}}}],["onc",{"_index":358,"title":{},"body":{"index.html":{}}}],["option",{"_index":26,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["otherwis",{"_index":427,"title":{},"body":{"license.html":{}}}],["out",{"_index":429,"title":{},"body":{"license.html":{}}}],["overview",{"_index":431,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":257,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":363,"title":{},"body":{"index.html":{}}}],["param",{"_index":83,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["paramet",{"_index":22,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":53,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":132,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":413,"title":{},"body":{"license.html":{}}}],["pass",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["path",{"_index":35,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":373,"title":{},"body":{"license.html":{}}}],["permit",{"_index":396,"title":{},"body":{"license.html":{}}}],["person",{"_index":378,"title":{},"body":{"license.html":{}}}],["pipe(map((respons",{"_index":187,"title":{},"body":{"classes/RestRoute.html":{}}}],["pipe(map(respons",{"_index":190,"title":{},"body":{"classes/RestRoute.html":{}}}],["plain",{"_index":124,"title":{},"body":{"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":126,"title":{},"body":{"classes/RestModelBase.html":{}}}],["pleas",{"_index":299,"title":{},"body":{"index.html":{}}}],["port",{"_index":355,"title":{},"body":{"index.html":{}}}],["portion",{"_index":405,"title":{},"body":{"license.html":{}}}],["post",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["post(data",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":335,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":345,"title":{},"body":{"index.html":{}}}],["privat",{"_index":92,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{}}}],["protect",{"_index":66,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["proto",{"_index":127,"title":{},"body":{"classes/RestModelBase.html":{}}}],["proto[key",{"_index":130,"title":{},"body":{"classes/RestModelBase.html":{}}}],["prototyp",{"_index":284,"title":{},"body":{"index.html":{}}}],["provid",{"_index":406,"title":{},"body":{"license.html":{}}}],["publish",{"_index":391,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":414,"title":{},"body":{"license.html":{}}}],["put",{"_index":74,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put'|'delet",{"_index":102,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put(param",{"_index":86,"title":{},"body":{"classes/RestModelBase.html":{}}}],["re",{"_index":27,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{}}}],["readm",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["reimplement",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":361,"title":{},"body":{"index.html":{}}}],["reload",{"_index":357,"title":{},"body":{"index.html":{}}}],["repo",{"_index":352,"title":{},"body":{"index.html":{}}}],["req",{"_index":39,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["request",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["requestinterceptor",{"_index":15,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["requestinterceptor(req",{"_index":36,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["requestobserv",{"_index":112,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":115,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["response.getplain",{"_index":333,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":188,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.typ",{"_index":118,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":336,"title":{},"body":{"index.html":{}}}],["responseinterceptor",{"_index":16,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["responseinterceptor(r",{"_index":40,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["rest",{"_index":200,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":276,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":316,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":326,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":57,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["restful(arg",{"_index":263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":198,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":91,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":344,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":70,"title":{"classes/RestModelBase.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restmodelbase(baseclon",{"_index":185,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":307,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":385,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":44,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restroute(thi",{"_index":69,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":54,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":28,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["right",{"_index":388,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":372,"title":{},"body":{"license.html":{}}}],["rout",{"_index":17,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":42,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":136,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.par",{"_index":138,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.path",{"_index":137,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["run",{"_index":354,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":49,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":166,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":306,"title":{},"body":{"index.html":{}}}],["see",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":327,"title":{},"body":{"index.html":{}}}],["sell",{"_index":395,"title":{},"body":{"license.html":{}}}],["send",{"_index":300,"title":{},"body":{"index.html":{}}}],["server",{"_index":353,"title":{},"body":{"index.html":{}}}],["servic",{"_index":309,"title":{},"body":{"index.html":{}}}],["shall",{"_index":403,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":381,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":262,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":435,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/decorators.t",{"_index":199,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":311,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":58,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:25",{"_index":62,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:29",{"_index":63,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:33",{"_index":65,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:5",{"_index":61,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":71,"title":{},"body":{"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:10",{"_index":77,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:117",{"_index":88,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:48",{"_index":87,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:52",{"_index":82,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:56",{"_index":85,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:54",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:59",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:64",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:8",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":5,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{}}}],["src/types.ts:15",{"_index":29,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:16",{"_index":31,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:18",{"_index":43,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:19",{"_index":34,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:21",{"_index":38,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:22",{"_index":41,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:23",{"_index":21,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["standard",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":208,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":273,"title":{},"body":{"index.html":{}}}],["string",{"_index":30,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":398,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":393,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":337,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":117,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["substanti",{"_index":404,"title":{},"body":{"license.html":{}}}],["super(http",{"_index":317,"title":{},"body":{"index.html":{}}}],["t",{"_index":76,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":266,"title":{},"body":{"index.html":{}}}],["target",{"_index":202,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":204,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":206,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":328,"title":{},"body":{"index.html":{}}}],["test",{"_index":235,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":359,"title":{},"body":{"index.html":{}}}],["this._base.fullresponseinterceptor(requestobserv",{"_index":116,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getbaseurl",{"_index":148,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getdefaulthead",{"_index":149,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.http.request(req",{"_index":113,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.requestinterceptor(req",{"_index":111,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.route(path",{"_index":150,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.base.fullresponseinterceptor(requestobserv",{"_index":174,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getbaseurl",{"_index":195,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getdefaulthead",{"_index":196,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.http",{"_index":181,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.http.request(req",{"_index":173,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.mapmodel(path",{"_index":197,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.requestinterceptor(req",{"_index":172,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('delet",{"_index":123,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.createhttprequest('get",{"_index":186,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('post",{"_index":192,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('put",{"_index":121,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getbaseurl",{"_index":141,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":105,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getfullpath(method",{"_index":169,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":122,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.makerest(r",{"_index":189,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":191,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.mapmodel(this.path",{"_index":177,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.path",{"_index":183,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":332,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":331,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":94,"title":{},"body":{"classes/RestModelBase.html":{}}}],["through",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["tort",{"_index":426,"title":{},"body":{"license.html":{}}}],["type",{"_index":25,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":433,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":81,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["url",{"_index":104,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["url.length",{"_index":146,"title":{},"body":{"classes/RestModelBase.html":{}}}],["url.slice(0",{"_index":145,"title":{},"body":{"classes/RestModelBase.html":{}}}],["us",{"_index":322,"title":{},"body":{"index.html":{},"license.html":{}}}],["verbo",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":291,"title":{},"body":{"index.html":{}}}],["version",{"_index":217,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":342,"title":{},"body":{"index.html":{}}}],["view",{"_index":339,"title":{},"body":{"index.html":{}}}],["want",{"_index":297,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":407,"title":{},"body":{"license.html":{}}}],["welcom",{"_index":304,"title":{},"body":{"index.html":{}}}],["whether",{"_index":423,"title":{},"body":{"license.html":{}}}],["wish",{"_index":282,"title":{},"body":{"index.html":{}}}],["withou",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":384,"title":{},"body":{"license.html":{}}}],["work",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["ye",{"_index":84,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IAbstractBase.html":{"url":"interfaces/IAbstractBase.html","title":"interface - IAbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    FullResponseInterceptor\n                                \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    mapModel\n                                \n                                \n                                    requestInterceptor\n                                \n                                \n                                    responseInterceptor\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FullResponseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nFullResponseInterceptor(res: Observable>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable>\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapModel\n                            \n                            \n                        \n                    \n                \n                \n                    \nmapModel(path: string, data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nrequestInterceptor(req: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nresponseInterceptor(res: Observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): any;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): any;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RestRoute } from './restRoute';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: HttpRequest) {\n    //\n  }\n\n  protected responseInterceptor(res: Observable): Observable {\n    return res;\n  }\n\n  protected FullResponseInterceptor(res: Observable>): Observable> {\n    return res;\n  }\n\n  protected mapModel(path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:56\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest, HttpEventType } from '@angular/common/http';\nimport { IAbstractBase } from './types';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id: number;\n\n  constructor (private _base: IAbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  private createHttpRequest(method: 'PUT'|'DELETE', params?: HttpParams, data?: any) {\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n    const url = this.getFullPath();\n\n    const req = new HttpRequest(\n      method,url, data, {\n      headers, params\n    });\n\n    // pass through request interceptor\n    this._base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this._base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this._base.FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  put(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('PUT', params, this.getPlain());\n  }\n\n  delete(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('DELETE', params);\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: IAbstractBase, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:54\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:59\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:64\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParams, HttpHeaders, HttpEventType } from '@angular/common/http';\nimport { Resource, IAbstractBase } from './types';\nimport { RestModel, RestModelBase } from './restModel';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RestRoute {\n  constructor (private base: IAbstractBase, private path: string) {\n  }\n\n  private createHttpRequest(method: 'GET'|'POST', params?: HttpParams, idOrData?: any) {\n    const url = this.getFullPath(method === 'GET' ? idOrData : null);\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n\n    const req = new HttpRequest(method, url,\n      method === 'POST' ? idOrData : null);\n\n    // pass through request interceptor\n    this.base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this.base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this.base.FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  private makeRest(data: any): RestModel {\n    const model = this.mapModel(this.path, data);\n    const baseClone = cloneDeep(this.base);\n\n    baseClone.http = this.base.http;\n\n    const resource: Resource = {\n      id: data.id,\n      path: this.path,\n      parent: baseClone.resource\n    };\n\n    baseClone.resource = resource;\n    return new RestModelBase(baseClone as any, model) as any;\n  }\n\n  getList(params?: HttpParams | undefined): Observable>> {\n    return this.createHttpRequest('GET', params)\n      .pipe(map((response: any[]) => response.map(r => this.makeRest(r))));\n  }\n\n  getOne(id: number, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('GET', params, id)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  post(data: any, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('POST', params, data)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this.base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    return baseurl + parentUrl + this.path + (id ?  '/' + id : '');\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this.base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this.base.getDefaultHeaders();\n  }\n\n  private mapModel(path: string, data: any): any {\n    return this.base.mapModel(path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.0.7 (2018-08-10)\nBug Fixes\n\nreadme: Now all demo links are working (6188851)\n\n\n0.0.6 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\nFeatures\n\nRestBase: Add requestInterceptor, response and fullResponseInterc. (cdd0f86)\n\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n        \n            lodash : >=4.17.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still in development]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So the idea of this lib was born.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the framework.\nIf you liked the idea and want to contribute, please send me an e-mail. Your help is welcome!\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        3 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
