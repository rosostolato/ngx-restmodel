var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/IAbstractBase.html",[0,0.821,1,1.157]],["body/interfaces/IAbstractBase.html",[0,1.107,1,1.337,2,0.788,3,0.663,4,0.553,5,1.329,6,0.368,7,1.337,8,1.704,9,2.389,10,1.317,11,1.704,12,1.704,13,2.323,14,2.323,15,2.323,16,1.127,17,2.228,18,2.07,19,1.331,20,0.066,21,1.427,22,2.07,23,1.588,24,1.437,25,1.521,26,1.317,27,2.07,28,1.704,29,1.704,30,1.331,31,1.209,32,1.902,33,1.582,34,2.07,35,1.109,36,1.902,37,1.582,38,2.07,39,1.624,40,1.588,41,2.07,42,1.209,43,2.024,44,1.317,45,1.329,46,0.788,47,0.663,48,1.107,49,1.109,50,1.109,51,1.329,52,1.624,53,0.663,54,1.109,55,1.109,56,0.04,57,0.04]],["title/interfaces/Resource.html",[0,0.821,9,1.375]],["body/interfaces/Resource.html",[0,1.25,1,1.174,2,0.991,3,0.833,4,0.696,5,1.671,6,0.463,7,1.566,8,1.174,9,2.442,11,1.174,12,1.174,20,0.066,21,1.429,23,1.395,24,1.321,25,1.651,26,0.991,30,1.25,31,1.333,32,1.671,33,1.486,36,1.671,37,1.486,40,1.395,42,1.25,43,1.86,44,1.486,45,1.671,46,0.991,47,0.833,48,1.25,49,2.232,50,2.093,51,2.675,52,2.042,53,0.833,54,1.395,55,1.395,56,0.047,57,0.047]],["title/classes/RestBase.html",[58,0.565,59,1.375]],["body/classes/RestBase.html",[2,0.868,3,0.73,4,0.61,6,0.406,8,1.432,10,1.208,11,1.779,12,1.779,16,1.208,17,2.113,19,1.459,20,0.067,21,1.437,23,1.223,24,1.208,25,1.388,26,1.208,28,1.432,29,1.432,30,1.262,31,1.016,32,1.465,33,1.388,35,1.223,36,1.465,37,1.388,39,1.79,40,1.701,42,1.016,43,2.113,44,1.501,45,1.465,46,0.868,47,0.73,48,0.73,56,0.043,57,0.043,58,0.699,59,1.701,60,2.282,61,1.701,62,2.282,63,2.282,64,2.282,65,2.282,66,2.282,67,2.282,68,2.532,69,1.029,70,1.029,71,2.282]],["title/classes/RestModelBase.html",[58,0.565,72,1.375]],["body/classes/RestModelBase.html",[1,1.393,2,0.529,3,0.445,4,0.372,6,0.391,7,0.99,10,1.36,11,0.627,12,0.627,16,1.035,17,2.139,19,1.357,20,0.067,21,0.871,24,0.529,25,0.529,26,1.424,28,1.843,29,1.688,30,1.376,31,1.197,33,0.835,35,0.745,37,1.476,40,1.176,42,1.241,44,1.279,46,0.529,47,0.445,48,0.703,49,1.802,50,1.802,53,0.703,54,1.655,55,1.802,56,0.029,57,0.029,58,0.483,61,1.176,69,0.99,70,0.99,72,1.457,73,1.091,74,1.409,75,3.362,76,1.409,77,1.721,78,1.091,79,3.13,80,2.195,81,1.721,82,2.195,83,3.414,84,1.391,85,2.676,86,2.637,87,1.391,88,2.195,89,1.391,90,1.391,91,1.091,92,2.72,93,1.391,94,1.091,95,1.391,96,0.893,97,1.391,98,1.091,99,0.893,100,1.091,101,1.391,102,3.13,103,2.195,104,2.195,105,2.195,106,1.391,107,1.391,108,1.391,109,1.391,110,0.893,111,1.391,112,1.391,113,1.091,114,1.721,115,1.391,116,1.091,117,1.091,118,1.391,119,1.391,120,1.721,121,2.195,122,1.176,123,1.391,124,2.195,125,1.391,126,1.391,127,1.721,128,1.391,129,1.391,130,1.391,131,1.391,132,1.391,133,0.893,134,1.391,135,0.627]],["title/classes/RestRoute.html",[42,0.821,58,0.565]],["body/classes/RestRoute.html",[1,1.281,2,0.457,3,0.385,4,0.321,6,0.347,9,1.674,10,0.938,11,0.542,12,0.542,16,0.457,17,1.522,19,1.346,20,0.068,21,1.216,23,0.644,24,0.938,25,0.938,26,1.274,28,1.591,29,1.281,30,1.176,31,0.909,33,0.743,35,1.046,37,1.486,42,0.625,44,1.189,46,0.457,47,0.385,48,0.385,49,1.674,50,1.522,51,0.771,53,0.789,56,0.026,57,0.026,58,0.43,61,1.046,68,2.265,69,1.112,70,1.112,72,0.644,76,1.253,77,1.531,78,0.942,79,1.934,81,1.531,83,3.134,85,2.616,86,2.227,91,1.531,94,1.531,96,1.253,98,0.942,99,0.771,100,0.942,102,2.882,110,1.253,113,0.942,114,2.227,116,1.531,117,0.942,120,1.531,122,1.322,127,1.531,133,1.253,135,0.881,136,1.201,137,3.347,138,1.201,139,1.201,140,1.201,141,1.201,142,1.201,143,1.952,144,1.201,145,3.347,146,1.201,147,1.531,148,1.531,149,0.771,150,1.952,151,1.201,152,1.201,153,1.201,154,1.201,155,1.201,156,1.201,157,1.201,158,1.201,159,1.201,160,1.201,161,1.201,162,2.466,163,1.201,164,1.201,165,1.201,166,1.531,167,1.201,168,1.201,169,1.201,170,1.201,171,1.201,172,1.201,173,1.952,174,1.201,175,1.952,176,1.201,177,1.201,178,1.952,179,1.201,180,1.201,181,1.201,182,1.201,183,3.527,184,1.201,185,0.644,186,1.201,187,1.952,188,1.201,189,1.201,190,1.201,191,1.583,192,1.201,193,1.201,194,2.466,195,1.201,196,1.201,197,1.201,198,1.201,199,1.201,200,1.201]],["title/interfaces/RestfulOptions.html",[0,0.821,201,2.012]],["body/interfaces/RestfulOptions.html",[0,1.181,2,1.088,3,0.915,4,0.764,6,0.509,7,1.665,19,1.383,20,0.068,21,1.308,30,1.181,31,1.383,48,1.181,56,0.05,57,0.05,69,1.949,185,1.532,191,2.774,201,3.206,202,2.242,203,1.835,204,2.242,205,3.691,206,3.691,207,2.858,208,3.691,209,2.858]],["title/changelog.html",[210,1.396,211,1.165,212,2.175]],["body/changelog.html",[4,0.507,7,0.857,8,1.821,10,1.381,13,1.489,14,2.183,15,1.489,16,1.059,19,0.608,20,0.037,33,0.723,37,0.723,42,0.608,47,0.608,53,1.161,56,0.037,57,0.037,58,0.418,59,1.492,69,0.857,70,0.857,72,1.018,74,1.787,85,1.787,122,1.766,133,1.219,135,1.486,147,1.489,149,1.219,213,3.295,214,1.899,215,1.899,216,1.899,217,1.219,218,1.899,219,1.899,220,1.489,221,2.783,222,1.899,223,1.899,224,3.566,225,4.276,226,1.899,227,4.276,228,4.435,229,1.899,230,1.899,231,1.899,232,1.899,233,1.899,234,1.899,235,2.783,236,2.584,237,1.899,238,1.489,239,1.899,240,1.899,241,3.295,242,1.899,243,1.899,244,1.489,245,1.899,246,1.899,247,1.899,248,1.899,249,1.899,250,1.899,251,3.478,252,1.899,253,1.899,254,1.899,255,1.899,256,1.899,257,1.899,258,1.899,259,3.628,260,1.899,261,1.899,262,1.899,263,1.899,264,1.899,265,1.489,266,1.899,267,1.489,268,1.899,269,1.899,270,1.899,271,1.899,272,1.899,273,1.489,274,1.899,275,1.899,276,1.899,277,3.295,278,1.899,279,2.783,280,1.489,281,1.899,282,1.899,283,1.899,284,2.783,285,2.783,286,2.783,287,2.783,288,1.899,289,1.899,290,1.899,291,1.899,292,1.899,293,3.628,294,2.783,295,1.899,296,1.899,297,1.899,298,1.899,299,1.899,300,1.899,301,2.783,302,1.489,303,1.899,304,1.899]],["title/dependencies.html",[305,2.175,306,1.97]],["body/dependencies.html",[20,0.062,47,1.218,56,0.059,57,0.059,306,2.443,307,3.805]],["title/miscellaneous/enumerations.html",[308,0.828,309,2.406]],["body/miscellaneous/enumerations.html",[5,2.372,6,0.657,20,0.058,24,1.645,53,1.182,54,1.979,55,1.979,56,0.058,57,0.058,308,1.406,309,2.897,310,3.694]],["title/miscellaneous/functions.html",[185,1.644,308,0.828]],["body/miscellaneous/functions.html",[6,0.645,20,0.061,28,1.634,29,1.634,31,1.16,56,0.057,57,0.057,185,1.942,202,2.841,203,2.744,204,2.841,308,1.379,311,3.623,312,3.623,313,3.623]],["title/index.html",[6,0.387,210,1.396,211,1.165]],["body/index.html",[3,0.787,8,0.726,10,0.936,16,1.135,19,0.787,20,0.067,21,0.515,25,0.612,26,0.936,43,1.317,44,1.502,46,0.612,48,0.787,53,1.214,56,0.033,57,0.033,58,0.541,59,1.599,61,1.317,68,1.033,70,0.726,74,1.579,76,1.579,96,1.033,99,1.033,110,1.033,122,0.862,135,1.109,148,1.262,149,1.033,166,1.928,191,1.033,203,2.145,211,1.317,217,1.916,220,1.928,236,2.34,238,1.928,244,1.262,251,2.822,265,1.262,267,1.262,280,1.262,302,1.928,306,1.033,314,2.459,315,2.459,316,1.609,317,1.609,318,3.947,319,3.794,320,1.579,321,1.609,322,2.459,323,2.459,324,1.609,325,1.609,326,2.984,327,1.609,328,1.609,329,1.609,330,1.609,331,1.609,332,1.609,333,1.609,334,1.609,335,1.609,336,1.609,337,2.459,338,1.609,339,1.609,340,1.609,341,1.609,342,1.609,343,1.609,344,1.609,345,1.609,346,1.609,347,1.609,348,1.609,349,1.609,350,1.609,351,1.609,352,1.609,353,1.609,354,3.947,355,1.609,356,1.609,357,1.609,358,2.459,359,1.609,360,2.459,361,2.459,362,2.459,363,1.609,364,3.34,365,1.609,366,2.459,367,1.609,368,1.609,369,1.609,370,1.928,371,1.609,372,2.984,373,1.609,374,1.609,375,1.609,376,1.609,377,1.609,378,1.609,379,1.609,380,1.609,381,1.609,382,1.609,383,1.609,384,1.609,385,1.609,386,1.609,387,2.459,388,2.459,389,1.609,390,1.609,391,1.609,392,1.609,393,1.609,394,1.609,395,1.609,396,1.609,397,1.609,398,1.609,399,1.609,400,2.459,401,3.794,402,1.609,403,1.609,404,1.609,405,2.459,406,1.609,407,1.609,408,2.459,409,1.609,410,1.609,411,1.033,412,1.609,413,1.609,414,1.609,415,1.609,416,1.262]],["title/license.html",[210,1.396,211,1.165,320,1.396]],["body/license.html",[4,0.703,20,0.047,56,0.047,57,0.047,217,1.689,224,2.063,273,3.28,320,1.689,370,2.741,416,2.741,417,3.926,418,2.63,419,2.63,420,3.495,421,2.63,422,2.63,423,2.63,424,2.63,425,3.495,426,2.63,427,4.696,428,2.63,429,3.495,430,3.926,431,2.63,432,3.926,433,3.495,434,2.63,435,2.63,436,2.63,437,2.63,438,2.63,439,2.63,440,2.63,441,2.63,442,2.63,443,2.63,444,2.63,445,2.63,446,2.63,447,2.63,448,3.495,449,3.495,450,2.63,451,2.63,452,2.63,453,3.495,454,2.63,455,2.63,456,2.63,457,2.63,458,2.63,459,2.63,460,2.63,461,2.63,462,2.63,463,2.63,464,2.63,465,2.63,466,2.63,467,2.63,468,2.63,469,2.63,470,2.63,471,2.63,472,2.63,473,2.63,474,2.63,475,2.63,476,2.63]],["title/modules.html",[411,2.207]],["body/modules.html",[20,0.059,56,0.059,57,0.059,411,2.48]],["title/overview.html",[477,2.696]],["body/overview.html",[0,1.212,20,0.059,56,0.059,57,0.059,58,0.834,477,2.969,478,4.384]],["title/miscellaneous/typealiases.html",[308,0.828,479,3.068]],["body/miscellaneous/typealiases.html",[6,0.66,20,0.058,30,1.188,56,0.058,57,0.058,73,2.911,135,2.071,308,1.412,480,3.712,481,3.712]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["0.0.7",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["0.0.8",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["0.0.9",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["0.1.2",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["085f547",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":194,"title":{},"body":{"classes/RestRoute.html":{}}}],["1.0",{"_index":413,"title":{},"body":{"index.html":{}}}],["10",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":330,"title":{},"body":{"index.html":{}}}],["2018",{"_index":224,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":478,"title":{},"body":{"overview.html":{}}}],["30",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["3d1c218",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["46eb968",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["53ed63d",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["56cc762",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["59b28fa",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["5ccb4eb",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":307,"title":{},"body":{"dependencies.html":{}}}],["6188851",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["7379bef",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["799d470",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":403,"title":{},"body":{"index.html":{}}}],["83b8901",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["86ff926",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["993011c",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":81,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["_path",{"_index":137,"title":{},"body":{"classes/RestRoute.html":{}}}],["a98b240",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":447,"title":{},"body":{"license.html":{}}}],["action",{"_index":470,"title":{},"body":{"license.html":{}}}],["add",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["addroute(rout",{"_index":186,"title":{},"body":{"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":190,"title":{},"body":{"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":184,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":382,"title":{},"body":{"index.html":{}}}],["alias",{"_index":480,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":440,"title":{},"body":{"license.html":{}}}],["angular",{"_index":329,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":46,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":361,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":331,"title":{},"body":{"index.html":{}}}],["api",{"_index":324,"title":{},"body":{"index.html":{}}}],["app",{"_index":238,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["arg",{"_index":204,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":206,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":208,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":474,"title":{},"body":{"license.html":{}}}],["associ",{"_index":428,"title":{},"body":{"license.html":{}}}],["author",{"_index":463,"title":{},"body":{"license.html":{}}}],["auto",{"_index":388,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":415,"title":{},"body":{"index.html":{}}}],["base",{"_index":133,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["base.resourc",{"_index":173,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":191,"title":{},"body":{"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":193,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":195,"title":{},"body":{"classes/RestRoute.html":{}}}],["becom",{"_index":414,"title":{},"body":{"index.html":{}}}],["better",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":333,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":336,"title":{},"body":{"index.html":{}}}],["born",{"_index":339,"title":{},"body":{"index.html":{}}}],["bug",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":409,"title":{},"body":{"index.html":{}}}],["c",{"_index":418,"title":{},"body":{"license.html":{}}}],["call",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["cdd0f86",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":212,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":424,"title":{},"body":{"license.html":{}}}],["claim",{"_index":466,"title":{},"body":{"license.html":{}}}],["class",{"_index":58,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":391,"title":{},"body":{"index.html":{}}}],["compon",{"_index":372,"title":{},"body":{"index.html":{}}}],["condit",{"_index":446,"title":{},"body":{"license.html":{}}}],["connect",{"_index":476,"title":{},"body":{"license.html":{}}}],["const",{"_index":102,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":61,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":78,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor(http",{"_index":62,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":317,"title":{},"body":{"index.html":{}}}],["continu",{"_index":407,"title":{},"body":{"index.html":{}}}],["contract",{"_index":471,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":347,"title":{},"body":{"index.html":{}}}],["copi",{"_index":273,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["copyright",{"_index":417,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":342,"title":{},"body":{"index.html":{}}}],["cover",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["coverag",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["creat",{"_index":265,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["createhttprequest(req",{"_index":146,"title":{},"body":{"classes/RestRoute.html":{}}}],["createmodelhttprequest",{"_index":128,"title":{},"body":{"classes/RestModelBase.html":{}}}],["createmodelhttprequest(method",{"_index":111,"title":{},"body":{"classes/RestModelBase.html":{}}}],["createroutehttprequest(method",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["current",{"_index":244,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["damag",{"_index":467,"title":{},"body":{"license.html":{}}}],["data",{"_index":26,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":172,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":105,"title":{},"body":{"classes/RestModelBase.html":{}}}],["deal",{"_index":429,"title":{},"body":{"license.html":{}}}],["defin",{"_index":17,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":55,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"miscellaneous/enumerations.html":{}}}],["delete(param",{"_index":82,"title":{},"body":{"classes/RestModelBase.html":{}}}],["demo",{"_index":236,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["democompon",{"_index":376,"title":{},"body":{"index.html":{}}}],["depend",{"_index":306,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":328,"title":{},"body":{"index.html":{}}}],["desir",{"_index":358,"title":{},"body":{"index.html":{}}}],["dev",{"_index":397,"title":{},"body":{"index.html":{}}}],["develop",{"_index":319,"title":{},"body":{"index.html":{}}}],["df2b6fc",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":367,"title":{},"body":{"index.html":{}}}],["directori",{"_index":398,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":438,"title":{},"body":{"license.html":{}}}],["document",{"_index":217,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":350,"title":{},"body":{"index.html":{}}}],["e6f672a",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["eeca740",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["enum",{"_index":52,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{}}}],["enumer",{"_index":309,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":394,"title":{},"body":{"index.html":{}}}],["error",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":462,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":322,"title":{},"body":{"index.html":{}}}],["export",{"_index":48,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":455,"title":{},"body":{"license.html":{}}}],["extend",{"_index":74,"title":{},"body":{"classes/RestModelBase.html":{},"changelog.html":{},"index.html":{}}}],["featur",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":144,"title":{},"body":{"classes/RestRoute.html":{}}}],["filter(respons",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["final",{"_index":369,"title":{},"body":{"index.html":{}}}],["find",{"_index":386,"title":{},"body":{"index.html":{}}}],["first",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":458,"title":{},"body":{"license.html":{}}}],["fix",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":445,"title":{},"body":{"license.html":{}}}],["forgot",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["framework",{"_index":344,"title":{},"body":{"index.html":{}}}],["free",{"_index":423,"title":{},"body":{"license.html":{}}}],["fullrespons",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["fullresponseinterc",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["fun",{"_index":325,"title":{},"body":{"index.html":{}}}],["function",{"_index":185,"title":{"miscellaneous/functions.html":{}},"body":{"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":443,"title":{},"body":{"license.html":{}}}],["gener",{"_index":389,"title":{},"body":{"index.html":{}}}],["get",{"_index":210,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["get'|'post",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{}}}],["getbaseurl",{"_index":11,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":12,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":129,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":182,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":76,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["getlist(param",{"_index":91,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["geton",{"_index":77,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getone(id",{"_index":94,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getplain",{"_index":75,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getpost",{"_index":377,"title":{},"body":{"index.html":{}}}],["grant",{"_index":422,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":69,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["help",{"_index":352,"title":{},"body":{"index.html":{}}}],["here",{"_index":366,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":421,"title":{},"body":{"license.html":{}}}],["highli",{"_index":321,"title":{},"body":{"index.html":{}}}],["hit",{"_index":412,"title":{},"body":{"index.html":{}}}],["holder",{"_index":464,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":43,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"index.html":{}}}],["httpevent",{"_index":45,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["httpeventtyp",{"_index":142,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpeventtype.respons",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpheader",{"_index":98,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheaders(this.getdefaulthead",{"_index":113,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpmethod",{"_index":24,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/enumerations.html":{}}}],["httpparam",{"_index":83,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest",{"_index":33,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["httprequest(method",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{}}}],["httprespons",{"_index":143,"title":{},"body":{"classes/RestRoute.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":363,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":315,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":343,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":327,"title":{},"body":{"index.html":{}}}],["iabstractbas",{"_index":1,"title":{"interfaces/IAbstractBase.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id",{"_index":49,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id_data",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{}}}],["idea",{"_index":337,"title":{},"body":{"index.html":{}}}],["immut",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":302,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":456,"title":{},"body":{"license.html":{}}}],["import",{"_index":44,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["improov",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["improv",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":432,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inherit",{"_index":92,"title":{},"body":{"classes/RestModelBase.html":{}}}],["inject",{"_index":360,"title":{},"body":{"index.html":{}}}],["insid",{"_index":335,"title":{},"body":{"index.html":{}}}],["instal",{"_index":318,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":150,"title":{},"body":{"classes/RestRoute.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":267,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["keep",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":130,"title":{},"body":{"classes/RestModelBase.html":{}}}],["kind",{"_index":454,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":468,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":465,"title":{},"body":{"license.html":{}}}],["lib",{"_index":338,"title":{},"body":{"index.html":{}}}],["licens",{"_index":320,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":345,"title":{},"body":{"index.html":{}}}],["limit",{"_index":433,"title":{},"body":{"license.html":{}}}],["link",{"_index":280,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["liter",{"_index":66,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":396,"title":{},"body":{"index.html":{}}}],["log",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":351,"title":{},"body":{"index.html":{}}}],["makerest(method",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":99,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["map((respons",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["mapmodel",{"_index":13,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["mapmodel(method",{"_index":23,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":368,"title":{},"body":{"index.html":{}}}],["match",{"_index":57,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":341,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":457,"title":{},"body":{"license.html":{}}}],["merg",{"_index":436,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["miscellan",{"_index":308,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":416,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":166,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":362,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":435,"title":{},"body":{"license.html":{}}}],["modul",{"_index":411,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":29,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":70,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["ngx",{"_index":314,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":395,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":461,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":448,"title":{},"body":{"license.html":{}}}],["now",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":354,"title":{},"body":{"index.html":{}}}],["null",{"_index":116,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["number",{"_index":50,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["object.assign(plain",{"_index":125,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thi",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":106,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":104,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(this._bas",{"_index":170,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(bas",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(plain",{"_index":132,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{}}}],["observ",{"_index":37,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["observable.pip",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{}}}],["obtain",{"_index":426,"title":{},"body":{"license.html":{}}}],["obvers",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":371,"title":{},"body":{"index.html":{}}}],["onc",{"_index":405,"title":{},"body":{"index.html":{}}}],["option",{"_index":31,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":473,"title":{},"body":{"license.html":{}}}],["out",{"_index":475,"title":{},"body":{"license.html":{}}}],["overview",{"_index":477,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":305,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":410,"title":{},"body":{"index.html":{}}}],["param",{"_index":85,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["paramet",{"_index":28,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":51,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":183,"title":{},"body":{"classes/RestRoute.html":{}}}],["parenturl.length",{"_index":197,"title":{},"body":{"classes/RestRoute.html":{}}}],["parenturl.slice(0",{"_index":196,"title":{},"body":{"classes/RestRoute.html":{}}}],["particular",{"_index":459,"title":{},"body":{"license.html":{}}}],["pass",{"_index":147,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{}}}],["path",{"_index":25,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":420,"title":{},"body":{"license.html":{}}}],["permit",{"_index":442,"title":{},"body":{"license.html":{}}}],["person",{"_index":425,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["pipe(map((respons",{"_index":176,"title":{},"body":{"classes/RestRoute.html":{}}}],["pipe(map(respons",{"_index":120,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["plain",{"_index":124,"title":{},"body":{"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":126,"title":{},"body":{"classes/RestModelBase.html":{}}}],["pleas",{"_index":348,"title":{},"body":{"index.html":{}}}],["port",{"_index":402,"title":{},"body":{"index.html":{}}}],["portion",{"_index":451,"title":{},"body":{"license.html":{}}}],["post",{"_index":53,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(data",{"_index":96,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":383,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":393,"title":{},"body":{"index.html":{}}}],["privat",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["protect",{"_index":68,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["proto",{"_index":127,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["proto[key",{"_index":131,"title":{},"body":{"classes/RestModelBase.html":{}}}],["prototyp",{"_index":334,"title":{},"body":{"index.html":{}}}],["provid",{"_index":452,"title":{},"body":{"license.html":{}}}],["publish",{"_index":437,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":460,"title":{},"body":{"license.html":{}}}],["put",{"_index":54,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"miscellaneous/enumerations.html":{}}}],["put'|'delet",{"_index":112,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put(param",{"_index":88,"title":{},"body":{"classes/RestModelBase.html":{}}}],["r",{"_index":179,"title":{},"body":{"classes/RestRoute.html":{}}}],["re",{"_index":39,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{}}}],["readm",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["reduc",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["reimplement",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":408,"title":{},"body":{"index.html":{}}}],["reload",{"_index":404,"title":{},"body":{"index.html":{}}}],["renam",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":399,"title":{},"body":{"index.html":{}}}],["req",{"_index":35,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["request",{"_index":149,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["requestinterceptor",{"_index":14,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["requestinterceptor(req",{"_index":32,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":122,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["response.bodi",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.getplain",{"_index":381,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":177,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.typ",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":384,"title":{},"body":{"index.html":{}}}],["responseinterceptor",{"_index":15,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["responseinterceptor(r",{"_index":36,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["rest",{"_index":203,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":326,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":364,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":373,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":59,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["restful(arg",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":201,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":135,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":392,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":72,"title":{"classes/RestModelBase.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["restmodelbase(bas",{"_index":174,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":356,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":431,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":42,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["restroute(thi",{"_index":71,"title":{},"body":{"classes/RestBase.html":{}}}],["restroute:64",{"_index":93,"title":{},"body":{"classes/RestModelBase.html":{}}}],["restroute:69",{"_index":95,"title":{},"body":{"classes/RestModelBase.html":{}}}],["restroute:74",{"_index":97,"title":{},"body":{"classes/RestModelBase.html":{}}}],["result",{"_index":56,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":19,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"index.html":{}}}],["right",{"_index":434,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":419,"title":{},"body":{"license.html":{}}}],["rout",{"_index":16,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":40,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":187,"title":{},"body":{"classes/RestRoute.html":{}}}],["route.par",{"_index":189,"title":{},"body":{"classes/RestRoute.html":{}}}],["route.path",{"_index":188,"title":{},"body":{"classes/RestRoute.html":{}}}],["run",{"_index":401,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":47,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":100,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["save",{"_index":355,"title":{},"body":{"index.html":{}}}],["see",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":374,"title":{},"body":{"index.html":{}}}],["sell",{"_index":441,"title":{},"body":{"license.html":{}}}],["send",{"_index":349,"title":{},"body":{"index.html":{}}}],["server",{"_index":400,"title":{},"body":{"index.html":{}}}],["servic",{"_index":357,"title":{},"body":{"index.html":{}}}],["shall",{"_index":449,"title":{},"body":{"license.html":{}}}],["share",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["softwar",{"_index":427,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":481,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.t",{"_index":310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/decorators.t",{"_index":202,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":359,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":60,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:22",{"_index":64,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:26",{"_index":65,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:30",{"_index":67,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:6",{"_index":63,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":73,"title":{},"body":{"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:32",{"_index":89,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:37",{"_index":84,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:42",{"_index":87,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:69",{"_index":90,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:8",{"_index":80,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":136,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:64",{"_index":139,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:69",{"_index":140,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:74",{"_index":141,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:8",{"_index":138,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":5,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"miscellaneous/enumerations.html":{}}}],["src/types.ts:15",{"_index":18,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:16",{"_index":22,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:18",{"_index":41,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:19",{"_index":27,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:21",{"_index":34,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:22",{"_index":38,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["standard",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":211,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":323,"title":{},"body":{"index.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":444,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":439,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":385,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":379,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":450,"title":{},"body":{"license.html":{}}}],["super(_bas",{"_index":101,"title":{},"body":{"classes/RestModelBase.html":{}}}],["super(http",{"_index":365,"title":{},"body":{"index.html":{}}}],["t",{"_index":79,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":316,"title":{},"body":{"index.html":{}}}],["target",{"_index":205,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":207,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":209,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":375,"title":{},"body":{"index.html":{}}}],["test",{"_index":251,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":406,"title":{},"body":{"index.html":{}}}],["this._bas",{"_index":169,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.getbaseurl",{"_index":198,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.getdefaulthead",{"_index":199,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.http.request(req",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.mapmodel(method",{"_index":200,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.requestinterceptor(req",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.resource.path",{"_index":168,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.responseinterceptor(observ",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.route(path",{"_index":134,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._path",{"_index":145,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest(req",{"_index":117,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.createmodelhttprequest('delet",{"_index":123,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.createmodelhttprequest('put",{"_index":118,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.createroutehttprequest('get",{"_index":175,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createroutehttprequest('post",{"_index":180,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getbaseurl",{"_index":192,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":115,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getfullpath(method",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":119,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.makerest(httpmethod.get",{"_index":178,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(httpmethod.post",{"_index":181,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(httpmethod.put",{"_index":121,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.mapmodel(method",{"_index":167,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":380,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":378,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":103,"title":{},"body":{"classes/RestModelBase.html":{}}}],["through",{"_index":148,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["tort",{"_index":472,"title":{},"body":{"license.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":479,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":114,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["us",{"_index":370,"title":{},"body":{"index.html":{},"license.html":{}}}],["verbo",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":340,"title":{},"body":{"index.html":{}}}],["version",{"_index":220,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":390,"title":{},"body":{"index.html":{}}}],["view",{"_index":387,"title":{},"body":{"index.html":{}}}],["want",{"_index":346,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":453,"title":{},"body":{"license.html":{}}}],["welcom",{"_index":353,"title":{},"body":{"index.html":{}}}],["whether",{"_index":469,"title":{},"body":{"license.html":{}}}],["wish",{"_index":332,"title":{},"body":{"index.html":{}}}],["withou",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":430,"title":{},"body":{"license.html":{}}}],["work",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["ye",{"_index":86,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IAbstractBase.html":{"url":"interfaces/IAbstractBase.html","title":"interface - IAbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    mapModel\n                                \n                                \n                                    requestInterceptor\n                                \n                                \n                                    responseInterceptor\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapModel\n                            \n                            \n                        \n                    \n                \n                \n                    \nmapModel(method: HttpMethod, path: string, data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        method\n                                                        \n                                                                    HttpMethod\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nrequestInterceptor(req: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nresponseInterceptor(res: Observable>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable>\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(method: HttpMethod, path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable>): Observable>;\n}\n\nexport enum HttpMethod {\n  GET, POST, PUT, DELETE\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(method: HttpMethod, path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable>): Observable>;\n}\n\nexport enum HttpMethod {\n  GET, POST, PUT, DELETE\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RestRoute } from './restRoute';\nimport { HttpMethod } from './types';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: HttpRequest): HttpRequest {\n    return req;\n  }\n\n  protected responseInterceptor(res: Observable>): Observable> {\n    return res;\n  }\n\n  protected mapModel(method: HttpMethod, path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n            \n                Extends\n            \n            \n                    RestRoute\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:69\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:64\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:69\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:74\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { IAbstractBase, HttpMethod } from './types';\nimport { RestRoute } from './index';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RestModelBase extends RestRoute {\n  id: number;\n\n  constructor (_base: IAbstractBase, data: T) {\n    super(_base);\n\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  private createModelHttpRequest(method: 'PUT'|'DELETE', params?: HttpParams, data?: any) {\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n    const url = this.getFullPath();\n\n    const req = new HttpRequest(\n      method, url, method === 'PUT' ? data : null,\n      { headers, params }\n    );\n\n    return this.createHttpRequest(req);\n  }\n\n  put(params?: HttpParams): Observable {\n    return this.createModelHttpRequest('PUT', params, this.getPlain())\n      .pipe(map(response => this.makeRest(HttpMethod.PUT, response)));\n  }\n\n  delete(params?: HttpParams): Observable {\n    return this.createModelHttpRequest('DELETE', params)\n      .pipe(map(response => this.makeRest(HttpMethod.PUT, response)));\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'createModelHttpRequest',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      delete proto[key];\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  // Base\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\nexport type RestModel = RestModelBase & T;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, _path?: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        _path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:64\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:69\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:74\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParams, HttpHeaders, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Resource, IAbstractBase, HttpMethod } from './types';\nimport { RestModel, RestModelBase } from './index';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nexport class RestRoute {\n  private _path?: string;\n\n  constructor (protected _base: IAbstractBase, _path?: string) {\n    if (_path) {\n      this._path = _path;\n    }\n  }\n\n  protected createHttpRequest(req: HttpRequest) {\n    // pass through request interceptor\n    req = this._base.requestInterceptor(req);\n\n    // the observable to return\n    let observable = this._base.http.request(req);\n\n    // pass through response interceptor\n    observable = this._base.responseInterceptor(observable);\n\n    return observable.pipe(\n      filter(response => response.type === HttpEventType.Response),\n      map((response: HttpResponse) => response.body)\n    );\n  }\n\n  private createRouteHttpRequest(method: 'GET'|'POST', params?: HttpParams, id_data?: any) {\n    const url = this.getFullPath(method === 'GET' ? id_data : null);\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n\n    const req = new HttpRequest(method, url,\n      method === 'POST' ? id_data : null,\n      { headers, params }\n    );\n\n    return this.createHttpRequest(req);\n  }\n\n  protected makeRest(method: HttpMethod, data: any): RestModel {\n    const model = this.mapModel(method, this._path || this._base.resource.path, data);\n\n    const base = { ...this._base };\n    const proto = Object.getPrototypeOf(this._base);\n    Object.setPrototypeOf(base, proto);\n\n    if (this._path) {\n      const resource: Resource = {\n        id: data.id,\n        path: this._path,\n        parent: base.resource\n      };\n\n      base.resource = resource;\n    }\n\n    return new RestModelBase(base as any, model) as any;\n  }\n\n  getList(params?: HttpParams): Observable>> {\n    return this.createRouteHttpRequest('GET', params)\n      .pipe(map((response: any[]) => response.map(r => this.makeRest(HttpMethod.GET, r))));\n  }\n\n  getOne(id: number, params?: HttpParams): Observable> {\n    return this.createRouteHttpRequest('GET', params, id)\n      .pipe(map(response => this.makeRest(HttpMethod.GET, response)));\n  }\n\n  post(data: any, params?: HttpParams): Observable> {\n    return this.createRouteHttpRequest('POST', params, data)\n      .pipe(map(response => this.makeRest(HttpMethod.POST, response)));\n  }\n\n  protected getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    if (!this._path) {\n      parentUrl = parentUrl.slice(0, parentUrl.length-1);\n    }\n\n    const url = baseurl + parentUrl + (this._path || '') + (id ?  '/' + id : '');\n    return url;\n  }\n\n  // Base\n\n  protected getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  protected getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  protected mapModel(method: HttpMethod, path: string, data: any): any {\n    return this._base.mapModel(method, path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.1.2 (2018-08-17)\nBug Fixes\n\nobservable: http methods obversables returning errors (83b8901)\nresponseInterceptor: missing call (df2b6fc)\n\nFeatures\n\ndemo: improved demo app (799d470)\nHttp: reduce some codes with rxjs pipes (56cc762)\nmapModel: pass the current method on params (59b28fa)\nresponse: renamed FullResponse to response only (5ccb4eb)\nRestModel: RestModelBase extends RestRoute for methods sharing (3d1c218)\ntest: cover almost 100% of code (993011c)\ntests: improove code coverage (46eb968)\n\n\n0.1.1 (2018-08-14)\nBug Fixes\n\nrestModel: I forgot to change on restModel (7379bef)\n\n\n0.1.0 (2018-08-14)\n\n0.0.9 (2018-08-14)\nBug Fixes\n\nrequestInterceptor: it needs to create a new HttpRequest object, because it's immutable (a98b240)\n\n\n0.0.8 (2018-08-14)\nBug Fixes\n\nRestBase: Base should keep the originals properties, no copying (e6f672a)\nRoute: params and headers were not in request (085f547)\n\n\n0.0.7 (2018-08-10)\nBug Fixes\n\nreadme: Now all demo links are working (6188851)\n\n\n0.0.6 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\nFeatures\n\nRestBase: Add requestInterceptor, response and fullResponseInterc. (cdd0f86)\n\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still in development]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So the idea of this lib was born.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the framework.\nIf you liked the idea and want to contribute, please send me an e-mail. Your help is welcome!\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        3 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
