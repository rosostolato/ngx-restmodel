var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/IAbstractBase.html",[0,0.747,1,1.081]],["body/interfaces/IAbstractBase.html",[0,1.009,1,1.25,2,0.726,3,0.602,4,0.493,5,1.556,6,0.397,7,1.5,8,1.596,9,1.886,10,1.042,11,2.868,12,1.596,13,1.596,14,2.868,15,2.232,16,2.868,17,1.042,18,1.813,19,1.937,20,2.173,21,2,22,1.689,23,0.07,24,1.689,25,1.251,26,1.167,27,2.232,28,1.509,29,2,30,1.303,31,2,32,1.5,33,1.218,34,2,35,1.218,36,1.813,37,1.596,38,2,39,1.264,40,1.813,41,2,42,1.5,43,2,44,1.33,45,1.915,46,1.218,47,1.264,48,0.726,49,0.726,50,0.863,51,1.046,52,1.046,53,1.264,54,0.042,55,0.042]],["title/interfaces/Resource.html",[0,0.747,9,1.081]],["body/interfaces/Resource.html",[0,1.16,1,1.136,2,0.947,3,0.785,4,0.643,5,2.028,6,0.517,7,1.8,8,1.136,9,1.945,12,1.136,13,1.136,18,1.647,19,1.857,23,0.07,25,1.16,26,1.234,30,1.318,32,1.363,33,0.947,35,1.489,36,1.647,37,1.5,40,1.647,42,1.363,44,1.4,45,1.8,46,1.4,47,1.647,48,0.947,49,0.947,50,1.036,51,2.143,52,2.015,53,2.59,54,0.051,55,0.051]],["title/classes/RestBase.html",[56,0.492,57,1.298]],["body/classes/RestBase.html",[2,0.81,3,0.671,4,0.55,6,0.442,8,1.349,10,1.124,12,1.675,13,1.675,17,1.124,18,1.409,19,1.76,20,2.01,22,1.349,23,0.072,24,1.349,25,1.071,26,0.932,27,2.409,28,1.612,30,1.316,32,1.166,33,1.124,35,1.124,36,1.409,37,1.349,40,1.409,42,1.619,44,1.124,45,2.01,46,1.292,47,1.409,48,0.81,49,0.81,50,0.671,54,0.046,55,0.046,56,0.614,57,1.619,58,2.229,59,1.619,60,2.229,61,2.229,62,2.229,63,2.229,64,2.229,65,2.229,66,3.142,67,1.166,68,1.166,69,2.229]],["title/classes/RestModelBase.html",[56,0.492,70,1.569]],["body/classes/RestModelBase.html",[1,1.264,2,0.462,3,0.383,4,0.314,6,0.252,7,1.063,9,0.886,10,1.054,12,0.886,13,0.886,17,1.054,19,1.608,20,1.769,22,1.264,23,0.073,24,1.264,25,1.111,26,0.873,28,1.496,30,1.069,33,1.229,35,0.462,37,0.886,39,0.804,42,1.063,44,1.054,46,1.152,48,0.462,49,0.462,50,0.612,51,1.517,52,1.328,54,0.03,55,0.03,56,0.403,59,1.063,67,1.328,68,1.328,70,1.605,71,0.989,72,3.172,73,3.172,74,2.539,75,1.271,76,2.632,77,2.033,78,2.033,79,2.033,80,2.871,81,2.138,82,1.271,83,2.632,84,1.582,85,1.271,86,2.033,87,1.271,88,1.271,89,0.989,90,0.989,91,0.665,92,2.005,93,3.157,94,2.033,95,2.033,96,2.033,97,1.271,98,1.271,99,1.271,100,1.271,101,0.989,102,1.271,103,0.989,104,1.582,105,1.271,106,1.271,107,1.582,108,1.285,109,0.804,110,1.582,111,1.271,112,0.989,113,1.271,114,0.989,115,0.665,116,1.271,117,0.804,118,0.989,119,0.989,120,0.989,121,1.271,122,1.271,123,1.271,124,2.033,125,1.271,126,1.271,127,2.033,128,2.033,129,2.033,130,1.271,131,1.271,132,2.632,133,1.271,134,0.554,135,0.989,136,1.582,137,0.989,138,0.989,139,0.989,140,1.328,141,0.989,142,0.989,143,1.976,144,0.989,145,1.271,146,1.271,147,0.989,148,1.271,149,1.271,150,1.271]],["title/classes/RestRoute.html",[44,0.901,56,0.492]],["body/classes/RestRoute.html",[1,1.239,2,0.446,3,0.369,4,0.303,6,0.243,9,1.358,10,0.901,12,0.535,13,0.535,17,0.446,19,1.681,20,1.486,22,1.526,23,0.073,24,1.239,25,1.096,26,0.856,28,1.483,30,1.096,32,0.642,33,1.132,35,1.032,37,0.535,39,0.776,44,0.718,46,1.209,48,0.446,49,0.446,50,0.369,51,1.629,52,1.486,53,0.776,54,0.029,55,0.029,56,0.392,59,1.033,67,1.033,68,1.486,70,0.776,76,1.93,80,3.069,81,2.376,83,3.069,84,1.93,89,0.955,90,0.955,91,1.297,92,2.302,93,2.834,101,0.955,103,0.955,104,1.537,107,1.537,108,1.249,109,0.776,110,1.537,112,0.955,114,0.955,115,0.642,117,0.776,118,0.955,119,0.955,120,0.955,132,2.591,134,0.535,135,0.955,136,1.537,137,0.955,138,0.955,139,0.955,140,1.297,141,0.955,142,0.955,143,1.537,144,0.955,147,1.93,151,1.227,152,1.537,153,1.976,154,1.567,155,1.227,156,1.227,157,1.976,158,1.227,159,1.976,160,1.227,161,1.537,162,1.227,163,1.227,164,0.955,165,0.955,166,1.227,167,1.227,168,2.48,169,1.227,170,1.976,171,1.227,172,1.227,173,1.227,174,1.227,175,1.227,176,1.537,177,1.227,178,1.227,179,1.227,180,1.227,181,1.227,182,1.227,183,1.976,184,1.976,185,1.227,186,1.976,187,1.227,188,1.227,189,1.227,190,1.976,191,1.976,192,1.227,193,1.227,194,1.227,195,1.227,196,1.227,197,1.227]],["title/interfaces/RestfulOptions.html",[0,0.747,198,1.931]],["body/interfaces/RestfulOptions.html",[0,1.081,2,1.011,3,0.838,4,0.686,6,0.552,7,1.878,23,0.072,25,1.081,26,1.265,28,1.527,30,1.197,50,1.081,54,0.053,55,0.053,67,2.198,134,1.212,140,2.198,198,3.095,199,2.165,200,1.759,201,2.165,202,3.592,203,3.592,204,2.783,205,3.592,206,2.783]],["title/changelog.html",[207,1.328,208,1.098,209,2.1]],["body/changelog.html",[4,0.645,8,1.788,10,0.95,15,2.035,17,0.95,23,0.051,54,0.051,55,0.051,56,0.519,57,1.368,115,1.368,154,2.594,210,3.45,211,2.615,212,2.615,213,2.615,214,1.653,215,2.615,216,2.615,217,2.035,218,3.45,219,2.615,220,2.615,221,3.41,222,3.45,223,3.45,224,3.86,225,4.266,226,3.45,227,3.45,228,3.529,229,3.45,230,3.45,231,2.615,232,2.615,233,2.615,234,2.615,235,2.615,236,2.615,237,4.104,238,3.45,239,2.615,240,2.615,241,2.035,242,2.615,243,2.615,244,2.615,245,2.615,246,2.615,247,3.45,248,2.035,249,2.615,250,2.615]],["title/dependencies.html",[251,2.1,252,1.877]],["body/dependencies.html",[23,0.068,49,1.324,54,0.062,55,0.062,164,2.838,252,2.305,253,3.647,254,3.647]],["title/miscellaneous/functions.html",[134,1.294,255,1.098]],["body/miscellaneous/functions.html",[6,0.699,22,1.536,23,0.065,24,1.536,26,1.061,54,0.061,55,0.061,81,2.228,134,1.536,199,2.743,200,2.628,201,2.743,255,1.843,256,3.525,257,3.525]],["title/index.html",[6,0.417,207,1.328,208,1.098]],["body/index.html",[3,0.717,8,0.679,10,0.865,17,1.051,23,0.071,28,0.865,30,0.469,33,0.865,35,0.566,45,1.246,46,1.392,48,0.566,50,0.717,54,0.035,55,0.035,56,0.473,57,1.513,59,1.246,66,1.212,68,0.815,91,1.246,92,0.985,108,0.985,109,0.985,115,0.815,117,0.985,140,0.815,152,1.854,154,2.328,161,1.212,165,1.212,176,1.854,200,2.049,208,1.246,214,1.829,217,1.854,228,2.718,241,1.854,248,2.718,252,0.985,258,2.383,259,2.894,260,2.383,261,1.558,262,1.558,263,3.833,264,3.683,265,1.506,266,1.558,267,2.383,268,2.383,269,1.558,270,1.558,271,1.558,272,2.894,273,1.558,274,1.558,275,1.558,276,1.558,277,1.558,278,1.558,279,1.558,280,1.558,281,1.558,282,1.558,283,1.558,284,2.383,285,1.558,286,1.558,287,1.558,288,1.558,289,1.558,290,1.558,291,2.383,292,1.558,293,1.558,294,1.558,295,1.558,296,1.558,297,1.558,298,1.558,299,1.558,300,1.558,301,3.833,302,1.558,303,1.558,304,1.558,305,2.383,306,1.558,307,2.383,308,2.383,309,2.383,310,1.558,311,3.241,312,1.558,313,2.383,314,1.558,315,1.558,316,1.558,317,1.854,318,1.558,319,2.383,320,2.894,321,1.558,322,1.558,323,1.558,324,1.558,325,1.558,326,1.558,327,1.558,328,1.558,329,1.558,330,1.558,331,1.558,332,1.558,333,1.558,334,2.383,335,2.383,336,1.558,337,1.558,338,1.558,339,1.558,340,1.558,341,1.558,342,1.558,343,1.558,344,1.558,345,1.558,346,1.558,347,1.558,348,2.383,349,3.683,350,1.558,351,1.558,352,1.558,353,2.383,354,1.558,355,1.558,356,2.383,357,1.558,358,1.558,359,0.985,360,1.558,361,1.558,362,1.558,363,1.558,364,1.212]],["title/license.html",[207,1.328,208,1.098,265,1.328]],["body/license.html",[4,0.632,23,0.05,54,0.05,55,0.05,214,1.619,221,1.993,265,1.619,317,2.647,364,2.647,365,3.82,366,2.561,367,2.561,368,3.402,369,2.561,370,2.561,371,2.561,372,2.561,373,3.402,374,2.561,375,4.071,376,4.569,377,2.561,378,3.402,379,3.82,380,2.561,381,3.82,382,3.402,383,2.561,384,2.561,385,2.561,386,2.561,387,2.561,388,2.561,389,2.561,390,2.561,391,2.561,392,2.561,393,2.561,394,2.561,395,2.561,396,2.561,397,3.402,398,3.402,399,2.561,400,2.561,401,2.561,402,3.402,403,2.561,404,2.561,405,2.561,406,2.561,407,2.561,408,2.561,409,2.561,410,2.561,411,2.561,412,2.561,413,2.561,414,2.561,415,2.561,416,2.561,417,2.561,418,2.561,419,2.561,420,2.561,421,2.561,422,2.561,423,2.561,424,2.561,425,2.561]],["title/modules.html",[359,2.106]],["body/modules.html",[23,0.064,54,0.064,55,0.064,359,2.375]],["title/overview.html",[426,2.592]],["body/overview.html",[0,1.109,23,0.063,54,0.063,55,0.063,56,0.731,426,2.866,427,4.265]],["title/miscellaneous/typealiases.html",[255,1.098,428,2.97]],["body/miscellaneous/typealiases.html",[6,0.716,23,0.062,25,1.087,54,0.062,55,0.062,71,2.81,91,2.335,255,1.888,429,3.611,430,3.611]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":143,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["1.0",{"_index":361,"title":{},"body":{"index.html":{}}}],["10",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":276,"title":{},"body":{"index.html":{}}}],["2018",{"_index":221,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":427,"title":{},"body":{"overview.html":{}}}],["30",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["4.17.0",{"_index":254,"title":{},"body":{"dependencies.html":{}}}],["53ed63d",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":253,"title":{},"body":{"dependencies.html":{}}}],["8000",{"_index":351,"title":{},"body":{"index.html":{}}}],["86ff926",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":78,"title":{},"body":{"classes/RestModelBase.html":{}}}],["abov",{"_index":396,"title":{},"body":{"license.html":{}}}],["action",{"_index":419,"title":{},"body":{"license.html":{}}}],["add",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["addroute(rout",{"_index":135,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":139,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":133,"title":{},"body":{"classes/RestModelBase.html":{}}}],["addroute(this.base.resourc",{"_index":194,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":329,"title":{},"body":{"index.html":{}}}],["alias",{"_index":429,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":389,"title":{},"body":{"license.html":{}}}],["angular",{"_index":275,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":48,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":308,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":277,"title":{},"body":{"index.html":{}}}],["api",{"_index":269,"title":{},"body":{"index.html":{}}}],["app",{"_index":319,"title":{},"body":{"index.html":{}}}],["arg",{"_index":201,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":203,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":205,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":423,"title":{},"body":{"license.html":{}}}],["associ",{"_index":377,"title":{},"body":{"license.html":{}}}],["author",{"_index":412,"title":{},"body":{"license.html":{}}}],["auto",{"_index":335,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":363,"title":{},"body":{"index.html":{}}}],["base",{"_index":147,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseclon",{"_index":178,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.http",{"_index":180,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.resourc",{"_index":184,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":140,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":142,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":144,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["becom",{"_index":362,"title":{},"body":{"index.html":{}}}],["better",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":279,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":282,"title":{},"body":{"index.html":{}}}],["bug",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":357,"title":{},"body":{"index.html":{}}}],["c",{"_index":366,"title":{},"body":{"license.html":{}}}],["cdd0f86",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":210,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":209,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":372,"title":{},"body":{"license.html":{}}}],["claim",{"_index":415,"title":{},"body":{"license.html":{}}}],["class",{"_index":56,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clonedeep",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeep(this.bas",{"_index":179,"title":{},"body":{"classes/RestRoute.html":{}}}],["commit",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":338,"title":{},"body":{"index.html":{}}}],["compon",{"_index":320,"title":{},"body":{"index.html":{}}}],["condit",{"_index":395,"title":{},"body":{"license.html":{}}}],["connect",{"_index":425,"title":{},"body":{"license.html":{}}}],["const",{"_index":93,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":59,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":75,"title":{},"body":{"classes/RestModelBase.html":{}}}],["constructor(bas",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["constructor(http",{"_index":60,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":262,"title":{},"body":{"index.html":{}}}],["continu",{"_index":355,"title":{},"body":{"index.html":{}}}],["contract",{"_index":420,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":294,"title":{},"body":{"index.html":{}}}],["copi",{"_index":375,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":365,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":289,"title":{},"body":{"index.html":{}}}],["creat",{"_index":284,"title":{},"body":{"index.html":{}}}],["createhttprequest(method",{"_index":101,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["current",{"_index":345,"title":{},"body":{"index.html":{}}}],["damag",{"_index":416,"title":{},"body":{"license.html":{}}}],["data",{"_index":33,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":182,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":96,"title":{},"body":{"classes/RestModelBase.html":{}}}],["deal",{"_index":378,"title":{},"body":{"license.html":{}}}],["defin",{"_index":20,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":72,"title":{},"body":{"classes/RestModelBase.html":{}}}],["delete(param",{"_index":79,"title":{},"body":{"classes/RestModelBase.html":{}}}],["demo",{"_index":259,"title":{},"body":{"index.html":{}}}],["democompon",{"_index":324,"title":{},"body":{"index.html":{}}}],["depend",{"_index":252,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":274,"title":{},"body":{"index.html":{}}}],["desir",{"_index":305,"title":{},"body":{"index.html":{}}}],["dev",{"_index":344,"title":{},"body":{"index.html":{}}}],["develop",{"_index":264,"title":{},"body":{"index.html":{}}}],["direct",{"_index":314,"title":{},"body":{"index.html":{}}}],["directori",{"_index":346,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":387,"title":{},"body":{"license.html":{}}}],["document",{"_index":214,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":297,"title":{},"body":{"index.html":{}}}],["eeca740",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":341,"title":{},"body":{"index.html":{}}}],["event",{"_index":411,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":267,"title":{},"body":{"index.html":{}}}],["export",{"_index":50,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":404,"title":{},"body":{"license.html":{}}}],["extend",{"_index":241,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["featur",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":316,"title":{},"body":{"index.html":{}}}],["find",{"_index":333,"title":{},"body":{"index.html":{}}}],["first",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":407,"title":{},"body":{"license.html":{}}}],["fix",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":394,"title":{},"body":{"license.html":{}}}],["free",{"_index":371,"title":{},"body":{"license.html":{}}}],["fullresponseinterc",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["fullresponseinterceptor",{"_index":11,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["fullresponseinterceptor(r",{"_index":18,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["fun",{"_index":271,"title":{},"body":{"index.html":{}}}],["function",{"_index":134,"title":{"miscellaneous/functions.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":392,"title":{},"body":{"license.html":{}}}],["gener",{"_index":336,"title":{},"body":{"index.html":{}}}],["get",{"_index":207,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["get'|'post",{"_index":167,"title":{},"body":{"classes/RestRoute.html":{}}}],["getbaseurl",{"_index":12,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":13,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":128,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":193,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["getlist(param",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["geton",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":73,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getpost",{"_index":325,"title":{},"body":{"index.html":{}}}],["grant",{"_index":370,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":67,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["help",{"_index":300,"title":{},"body":{"index.html":{}}}],["here",{"_index":313,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":369,"title":{},"body":{"license.html":{}}}],["highli",{"_index":266,"title":{},"body":{"index.html":{}}}],["hit",{"_index":360,"title":{},"body":{"index.html":{}}}],["holder",{"_index":413,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":45,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"index.html":{}}}],["httpevent",{"_index":47,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["httpeventtyp",{"_index":90,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpeventtype.respons",{"_index":119,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheader",{"_index":89,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheaders(this.getdefaulthead",{"_index":103,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpparam",{"_index":80,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest",{"_index":37,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest(method",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":310,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":260,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":290,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":273,"title":{},"body":{"index.html":{}}}],["iabstractbas",{"_index":1,"title":{"interfaces/IAbstractBase.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id",{"_index":51,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["idea",{"_index":291,"title":{},"body":{"index.html":{}}}],["idordata",{"_index":168,"title":{},"body":{"classes/RestRoute.html":{}}}],["implement",{"_index":248,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":405,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["includ",{"_index":381,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inject",{"_index":307,"title":{},"body":{"index.html":{}}}],["insid",{"_index":281,"title":{},"body":{"index.html":{}}}],["instal",{"_index":263,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":286,"title":{},"body":{"index.html":{}}}],["key",{"_index":129,"title":{},"body":{"classes/RestModelBase.html":{}}}],["kind",{"_index":403,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":417,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":414,"title":{},"body":{"license.html":{}}}],["lib",{"_index":285,"title":{},"body":{"index.html":{}}}],["licens",{"_index":265,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":292,"title":{},"body":{"index.html":{}}}],["limit",{"_index":382,"title":{},"body":{"license.html":{}}}],["link",{"_index":270,"title":{},"body":{"index.html":{}}}],["liter",{"_index":64,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":343,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{},"dependencies.html":{}}}],["log",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":298,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":175,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["mapmodel",{"_index":14,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["mapmodel(path",{"_index":32,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":315,"title":{},"body":{"index.html":{}}}],["match",{"_index":55,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":288,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":406,"title":{},"body":{"license.html":{}}}],["merg",{"_index":385,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["method,url",{"_index":106,"title":{},"body":{"classes/RestModelBase.html":{}}}],["miscellan",{"_index":255,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":364,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":176,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":309,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":384,"title":{},"body":{"license.html":{}}}],["modul",{"_index":359,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":24,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":299,"title":{},"body":{"index.html":{}}}],["new",{"_index":68,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["ngx",{"_index":258,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":342,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":410,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":397,"title":{},"body":{"license.html":{}}}],["now",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":301,"title":{},"body":{"index.html":{}}}],["null",{"_index":170,"title":{},"body":{"classes/RestRoute.html":{}}}],["number",{"_index":52,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object.assign(plain",{"_index":125,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thi",{"_index":100,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":98,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":97,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":95,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(plain",{"_index":131,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":99,"title":{},"body":{"classes/RestModelBase.html":{}}}],["observ",{"_index":19,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observable(observ",{"_index":114,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observer.next(response.bodi",{"_index":120,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":374,"title":{},"body":{"license.html":{}}}],["on",{"_index":318,"title":{},"body":{"index.html":{}}}],["onc",{"_index":353,"title":{},"body":{"index.html":{}}}],["option",{"_index":26,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["otherwis",{"_index":422,"title":{},"body":{"license.html":{}}}],["out",{"_index":424,"title":{},"body":{"license.html":{}}}],["overview",{"_index":426,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":251,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":358,"title":{},"body":{"index.html":{}}}],["param",{"_index":83,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["paramet",{"_index":22,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":53,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":132,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":408,"title":{},"body":{"license.html":{}}}],["pass",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["path",{"_index":35,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":368,"title":{},"body":{"license.html":{}}}],["permit",{"_index":391,"title":{},"body":{"license.html":{}}}],["person",{"_index":373,"title":{},"body":{"license.html":{}}}],["pipe(map((respons",{"_index":187,"title":{},"body":{"classes/RestRoute.html":{}}}],["pipe(map(respons",{"_index":190,"title":{},"body":{"classes/RestRoute.html":{}}}],["plain",{"_index":124,"title":{},"body":{"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":126,"title":{},"body":{"classes/RestModelBase.html":{}}}],["pleas",{"_index":295,"title":{},"body":{"index.html":{}}}],["port",{"_index":350,"title":{},"body":{"index.html":{}}}],["portion",{"_index":400,"title":{},"body":{"license.html":{}}}],["post",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["post(data",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":330,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":340,"title":{},"body":{"index.html":{}}}],["privat",{"_index":92,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{}}}],["protect",{"_index":66,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["proto",{"_index":127,"title":{},"body":{"classes/RestModelBase.html":{}}}],["proto[key",{"_index":130,"title":{},"body":{"classes/RestModelBase.html":{}}}],["prototyp",{"_index":280,"title":{},"body":{"index.html":{}}}],["provid",{"_index":401,"title":{},"body":{"license.html":{}}}],["publish",{"_index":386,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":409,"title":{},"body":{"license.html":{}}}],["put",{"_index":74,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put'|'delet",{"_index":102,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put(param",{"_index":86,"title":{},"body":{"classes/RestModelBase.html":{}}}],["re",{"_index":27,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{}}}],["reimplement",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":356,"title":{},"body":{"index.html":{}}}],["reload",{"_index":352,"title":{},"body":{"index.html":{}}}],["repo",{"_index":347,"title":{},"body":{"index.html":{}}}],["req",{"_index":39,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["request",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["requestinterceptor",{"_index":15,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["requestinterceptor(req",{"_index":36,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["requestobserv",{"_index":112,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":115,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["response.getplain",{"_index":328,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":188,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.typ",{"_index":118,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":331,"title":{},"body":{"index.html":{}}}],["responseinterceptor",{"_index":16,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["responseinterceptor(r",{"_index":40,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["rest",{"_index":200,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":272,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":311,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":321,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":57,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["restful(arg",{"_index":257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":198,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":91,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":339,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":70,"title":{"classes/RestModelBase.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restmodelbase(baseclon",{"_index":185,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":303,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":380,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":44,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restroute(thi",{"_index":69,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":54,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":28,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["right",{"_index":383,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":367,"title":{},"body":{"license.html":{}}}],["rout",{"_index":17,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":42,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":136,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.par",{"_index":138,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.path",{"_index":137,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["run",{"_index":349,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":49,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":166,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":302,"title":{},"body":{"index.html":{}}}],["see",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":322,"title":{},"body":{"index.html":{}}}],["sell",{"_index":390,"title":{},"body":{"license.html":{}}}],["send",{"_index":296,"title":{},"body":{"index.html":{}}}],["server",{"_index":348,"title":{},"body":{"index.html":{}}}],["servic",{"_index":304,"title":{},"body":{"index.html":{}}}],["shall",{"_index":398,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":376,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":430,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/decorators.t",{"_index":199,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":306,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":58,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:25",{"_index":62,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:29",{"_index":63,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:33",{"_index":65,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:5",{"_index":61,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":71,"title":{},"body":{"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:10",{"_index":77,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:117",{"_index":88,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:48",{"_index":87,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:52",{"_index":82,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:56",{"_index":85,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:54",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:59",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:64",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:8",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":5,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{}}}],["src/types.ts:15",{"_index":29,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:16",{"_index":31,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:18",{"_index":43,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:19",{"_index":34,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:21",{"_index":38,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:22",{"_index":41,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:23",{"_index":21,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["standard",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":208,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":268,"title":{},"body":{"index.html":{}}}],["string",{"_index":30,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":393,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":388,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":332,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":117,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["substanti",{"_index":399,"title":{},"body":{"license.html":{}}}],["super(http",{"_index":312,"title":{},"body":{"index.html":{}}}],["t",{"_index":76,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":261,"title":{},"body":{"index.html":{}}}],["target",{"_index":202,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":204,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":206,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":323,"title":{},"body":{"index.html":{}}}],["test",{"_index":228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":354,"title":{},"body":{"index.html":{}}}],["this._base.fullresponseinterceptor(requestobserv",{"_index":116,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getbaseurl",{"_index":148,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getdefaulthead",{"_index":149,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.http.request(req",{"_index":113,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.requestinterceptor(req",{"_index":111,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.route(path",{"_index":150,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.base.fullresponseinterceptor(requestobserv",{"_index":174,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getbaseurl",{"_index":195,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getdefaulthead",{"_index":196,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.http",{"_index":181,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.http.request(req",{"_index":173,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.mapmodel(path",{"_index":197,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.requestinterceptor(req",{"_index":172,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('delet",{"_index":123,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.createhttprequest('get",{"_index":186,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('post",{"_index":192,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('put",{"_index":121,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getbaseurl",{"_index":141,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":105,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getfullpath(method",{"_index":169,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":122,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.makerest(r",{"_index":189,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":191,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.mapmodel(this.path",{"_index":177,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.path",{"_index":183,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":327,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":326,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":94,"title":{},"body":{"classes/RestModelBase.html":{}}}],["through",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["tort",{"_index":421,"title":{},"body":{"license.html":{}}}],["tri",{"_index":283,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":428,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":81,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["url",{"_index":104,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["url.length",{"_index":146,"title":{},"body":{"classes/RestModelBase.html":{}}}],["url.slice(0",{"_index":145,"title":{},"body":{"classes/RestModelBase.html":{}}}],["us",{"_index":317,"title":{},"body":{"index.html":{},"license.html":{}}}],["verbo",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":287,"title":{},"body":{"index.html":{}}}],["version",{"_index":217,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":337,"title":{},"body":{"index.html":{}}}],["view",{"_index":334,"title":{},"body":{"index.html":{}}}],["want",{"_index":293,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":402,"title":{},"body":{"license.html":{}}}],["whether",{"_index":418,"title":{},"body":{"license.html":{}}}],["wish",{"_index":278,"title":{},"body":{"index.html":{}}}],["withou",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":379,"title":{},"body":{"license.html":{}}}],["ye",{"_index":84,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IAbstractBase.html":{"url":"interfaces/IAbstractBase.html","title":"interface - IAbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    FullResponseInterceptor\n                                \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    mapModel\n                                \n                                \n                                    requestInterceptor\n                                \n                                \n                                    responseInterceptor\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FullResponseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nFullResponseInterceptor(res: Observable>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable>\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapModel\n                            \n                            \n                        \n                    \n                \n                \n                    \nmapModel(path: string, data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nrequestInterceptor(req: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nresponseInterceptor(res: Observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): any;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): any;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RestRoute } from './restRoute';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: HttpRequest) {\n    //\n  }\n\n  protected responseInterceptor(res: Observable): Observable {\n    return res;\n  }\n\n  protected FullResponseInterceptor(res: Observable>): Observable> {\n    return res;\n  }\n\n  protected mapModel(path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:56\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest, HttpEventType } from '@angular/common/http';\nimport { IAbstractBase } from './types';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id: number;\n\n  constructor (private _base: IAbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  private createHttpRequest(method: 'PUT'|'DELETE', params?: HttpParams, data?: any) {\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n    const url = this.getFullPath();\n\n    const req = new HttpRequest(\n      method,url, data, {\n      headers, params\n    });\n\n    // pass through request interceptor\n    this._base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this._base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this._base.FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  put(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('PUT', params, this.getPlain());\n  }\n\n  delete(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('DELETE', params);\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: IAbstractBase, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:54\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:59\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:64\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParams, HttpHeaders, HttpEventType } from '@angular/common/http';\nimport { Resource, IAbstractBase } from './types';\nimport { RestModel, RestModelBase } from './restModel';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RestRoute {\n  constructor (private base: IAbstractBase, private path: string) {\n  }\n\n  private createHttpRequest(method: 'GET'|'POST', params?: HttpParams, idOrData?: any) {\n    const url = this.getFullPath(method === 'GET' ? idOrData : null);\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n\n    const req = new HttpRequest(method, url,\n      method === 'POST' ? idOrData : null);\n\n    // pass through request interceptor\n    this.base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this.base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this.base.FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  private makeRest(data: any): RestModel {\n    const model = this.mapModel(this.path, data);\n    const baseClone = cloneDeep(this.base);\n\n    baseClone.http = this.base.http;\n\n    const resource: Resource = {\n      id: data.id,\n      path: this.path,\n      parent: baseClone.resource\n    };\n\n    baseClone.resource = resource;\n    return new RestModelBase(baseClone as any, model) as any;\n  }\n\n  getList(params?: HttpParams | undefined): Observable>> {\n    return this.createHttpRequest('GET', params)\n      .pipe(map((response: any[]) => response.map(r => this.makeRest(r))));\n  }\n\n  getOne(id: number, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('GET', params, id)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  post(data: any, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('POST', params, data)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this.base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    return baseurl + parentUrl + this.path + (id ?  '/' + id : '');\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this.base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this.base.getDefaultHeaders();\n  }\n\n  private mapModel(path: string, data: any): any {\n    return this.base.mapModel(path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.0.6 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\nFeatures\n\nRestBase: Add requestInterceptor, response and fullResponseInterc. (cdd0f86)\n\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n        \n            lodash : >=4.17.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/ not implemented yet\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still on developing]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since on AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So I tried to create this lib.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the Idea.\nIf you liked the idea and want to contribute, please send me an e-mail (I need help).\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source. not implemented yet\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/ not implemented yet\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        3 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
