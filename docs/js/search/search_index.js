var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/AbstractBase.html",[0,0.492,1,1.298]],["body/interfaces/AbstractBase.html",[0,0.45,1,1.455,2,0.531,3,0.44,4,0.361,5,0.925,6,0.29,7,1.187,8,1.366,9,1.733,10,1.139,11,1.878,12,1.878,13,1.139,14,1.455,15,1.463,16,1.476,17,0.072,18,1.128,19,1.463,20,1.758,21,1.463,22,0.638,23,0.638,24,1.022,25,0.44,26,0.531,27,1.479,28,1.366,29,1.366,30,0.638,31,1.758,32,0.765,33,0.683,34,0.638,35,1.187,36,1.758,37,0.29,38,0.765,39,0.765,40,0.638,41,1.639,42,1.138,43,0.989,44,2.616,45,1.767,46,1.767,47,1.767,48,1.138,49,1.138,50,1.138,51,1.138,52,1.767,53,1.639,54,1.435,55,1.758,56,1.435,57,1.767,58,1.767,59,2.44,60,1.767,61,1.767,62,1.138,63,1.138,64,1.767,65,1.767,66,1.767,67,1.138,68,1.138,69,2.27,70,1.138,71,0.531,72,0.925,73,1.435,74,0.925,75,0.925,76,0.925,77,1.212,78,0.925,79,0.925,80,1.758,81,0.925,82,1.138,83,1.138,84,0.925,85,1.138,86,1.138,87,1.138,88,0.033,89,0.033]],["title/interfaces/Resource.html",[0,0.492,9,1.081]],["body/interfaces/Resource.html",[0,0.749,2,1.094,3,0.907,4,0.743,6,0.598,7,1.975,9,1.942,17,0.068,18,1.243,24,1.243,25,1.303,26,1.572,33,0.907,38,2.263,39,2.158,88,0.056,89,0.056,90,3.012,91,3.368]],["title/classes/RestBase.html",[37,0.492,92,1.569]],["body/classes/RestBase.html",[2,0.867,3,0.718,4,0.589,6,0.473,8,1.414,10,1.178,11,2.068,12,2.068,13,1.178,14,2.068,16,1.585,17,0.072,18,1.245,20,2.05,22,1.414,23,1.414,24,0.977,25,0.977,26,1.178,27,1.414,28,1.723,29,1.414,30,1.04,33,0.718,37,0.644,40,1.414,43,1.414,88,0.048,89,0.048,92,2.05,93,2.386,94,2.386,95,2.386,96,2.386,97,2.386,98,2.386,99,2.868,100,2.386,101,1.857,102,1.857,103,1.508,104,2.386]],["title/classes/RestModelBase.html",[35,1.298,37,0.492]],["body/classes/RestModelBase.html",[0,0.277,1,1.599,2,0.507,3,0.42,4,0.345,5,0.883,6,0.277,7,1.145,8,0.609,9,1.332,10,1.11,11,1.412,12,1.412,13,1.11,14,1.842,16,1.485,17,0.072,18,1.061,20,1.707,22,0.954,23,0.954,24,1,25,0.92,26,0.507,27,1.447,28,0.954,29,1.332,30,0.609,31,2.099,32,0.73,33,0.659,34,0.609,35,1.412,36,2.227,37,0.434,38,1.599,39,1.412,40,0.954,41,1.599,42,1.704,43,1.332,44,2.584,45,1.704,46,1.704,47,1.704,48,1.087,49,1.087,50,1.087,51,1.087,52,2.584,53,1.599,54,1.384,55,1.707,56,1.384,57,1.704,58,1.704,59,2.866,60,2.584,61,1.704,62,1.087,63,1.087,64,1.704,65,1.704,66,1.704,67,1.087,68,1.087,69,2.227,70,1.087,71,0.507,72,0.883,73,1.384,74,0.883,75,0.883,76,0.883,77,1.177,78,0.883,79,0.883,80,1.707,81,0.883,82,1.087,83,1.087,84,0.883,85,1.087,86,1.087,87,1.087,88,0.032,89,0.032,105,1.397,106,2.19,107,1.397,108,1.397,109,1.397,110,1.397]],["title/classes/RestRoute.html",[27,1.081,37,0.492]],["body/classes/RestRoute.html",[0,0.251,1,1.513,2,0.46,3,0.381,4,0.312,6,0.251,8,0.883,9,1.545,10,0.736,11,1.059,12,1.059,13,0.92,14,1.513,16,1.472,17,0.073,18,1.067,22,1.471,23,1.103,24,1.067,25,0.762,26,1.051,27,0.883,28,1.103,29,1.471,30,0.552,31,2.241,32,0.662,33,0.381,34,1.103,35,0.662,36,1.601,37,0.402,38,1.513,39,1.513,40,0.883,41,1.986,43,1.379,44,2.515,53,1.513,54,1.601,55,1.601,56,1.28,69,2.134,71,0.46,72,0.8,73,1.28,74,0.8,75,0.8,76,0.8,77,1.261,78,0.8,79,0.8,80,1.28,81,0.8,84,1.601,88,0.03,89,0.03,91,0.985,102,1.576,103,1.28,111,1.266,112,2.252,113,2.026,114,1.576,115,1.266,116,1.266,117,1.266,118,2.026,119,1.266,120,1.576,121,1.266,122,1.266,123,1.266,124,0.985,125,1.266,126,2.026,127,1.266,128,1.266,129,2.252,130,1.266,131,1.266,132,1.266,133,1.266,134,1.266,135,2.026,136,2.026,137,1.266,138,2.026,139,2.026,140,1.266,141,1.266,142,1.266,143,1.266,144,2.026,145,2.026,146,1.266,147,1.266,148,1.266,149,1.266,150,1.266,151,1.266,152,1.266,153,1.266,154,1.266,155,1.266,156,1.266,157,1.266,158,1.266]],["title/interfaces/RestfulOptions.html",[0,0.492,159,1.931]],["body/interfaces/RestfulOptions.html",[0,0.701,2,0.985,3,0.816,4,0.669,6,0.538,7,1.847,16,1.512,17,0.072,18,1.183,24,1.063,25,1.253,33,1.063,53,2.176,71,0.985,77,1.813,88,0.052,89,0.052,159,3.057,160,2.109,161,1.713,162,2.109,163,3.532,164,3.532,165,2.711,166,3.532,167,2.711]],["title/changelog.html",[168,1.328,169,1.098,170,2.1]],["body/changelog.html",[4,0.8,10,1.178,13,1.178,17,0.058,88,0.058,89,0.058,171,3.955,172,3.243,173,3.243,174,3.243,175,2.05,176,3.243,177,3.243,178,2.524,179,3.955,180,3.243,181,3.243,182,3.32,183,4.267,184,3.243,185,3.243,186,3.955,187,2.524,188,3.243,189,3.243]],["title/dependencies.html",[190,2.1,191,1.877]],["body/dependencies.html",[17,0.068,32,1.886,88,0.062,89,0.062,191,2.279,192,3.606,193,2.806,194,4.213]],["title/miscellaneous/functions.html",[71,1.078,195,1.098]],["body/miscellaneous/functions.html",[6,0.693,17,0.065,22,1.523,23,1.523,25,1.052,71,1.269,88,0.061,89,0.061,160,2.719,161,2.614,162,2.719,195,1.827,196,3.494,197,3.494,198,3.494]],["title/index.html",[6,0.417,168,1.328,169,1.098]],["body/index.html",[3,0.688,8,0.643,10,0.83,13,1.016,16,0.83,17,0.071,18,0.444,26,0.536,28,0.996,29,1.638,30,0.643,33,0.688,34,0.996,37,0.453,40,0.996,41,0.772,43,0.996,77,0.643,88,0.034,89,0.034,92,1.768,99,1.148,101,1.148,103,0.933,112,1.779,114,2.805,120,1.148,124,1.148,129,1.779,161,1.991,169,1.195,175,1.768,178,1.779,187,2.652,191,0.933,193,1.779,199,2.286,200,2.797,201,2.286,202,1.476,203,1.476,204,3.759,205,3.604,206,1.445,207,1.476,208,2.286,209,2.286,210,1.476,211,1.476,212,1.476,213,2.797,214,1.476,215,1.476,216,1.476,217,1.476,218,1.476,219,1.476,220,1.476,221,1.476,222,1.476,223,1.476,224,1.476,225,2.286,226,1.476,227,1.476,228,1.476,229,1.476,230,1.476,231,1.476,232,2.286,233,1.476,234,1.476,235,1.476,236,1.476,237,1.476,238,1.476,239,1.476,240,1.476,241,1.476,242,1.476,243,3.759,244,1.476,245,1.476,246,1.476,247,2.286,248,2.286,249,1.476,250,2.286,251,2.286,252,1.476,253,3.15,254,1.476,255,2.286,256,1.476,257,1.476,258,1.476,259,1.476,260,1.779,261,1.476,262,2.286,263,2.797,264,1.476,265,1.476,266,1.476,267,1.476,268,1.476,269,1.476,270,1.476,271,1.476,272,1.476,273,1.476,274,1.476,275,1.476,276,1.476,277,1.476,278,2.286,279,2.286,280,1.476,281,1.476,282,1.476,283,1.476,284,1.476,285,1.476,286,1.476,287,1.476,288,1.476,289,1.476,290,1.476,291,1.476,292,2.286,293,3.604,294,1.476,295,1.476,296,1.476,297,3.408,298,2.286,299,1.476,300,1.476,301,2.286,302,1.476,303,1.476,304,0.933,305,1.476,306,1.476,307,1.476,308,1.476,309,1.148]],["title/license.html",[168,1.328,169,1.098,206,1.328]],["body/license.html",[4,0.612,17,0.049,88,0.049,89,0.049,175,1.569,182,1.932,206,1.569,260,2.593,309,2.593,310,3.761,311,2.482,312,2.482,313,3.332,314,2.482,315,2.482,316,2.482,317,2.482,318,3.332,319,2.482,320,4.02,321,4.541,322,2.482,323,3.332,324,3.761,325,2.482,326,3.761,327,3.332,328,2.482,329,2.482,330,2.482,331,2.482,332,2.482,333,2.482,334,2.482,335,2.482,336,2.482,337,2.482,338,2.482,339,2.482,340,2.482,341,2.482,342,3.332,343,3.332,344,2.482,345,2.482,346,2.482,347,3.332,348,2.482,349,2.482,350,2.482,351,2.482,352,2.482,353,2.482,354,2.482,355,2.482,356,2.482,357,2.482,358,2.482,359,2.482,360,2.482,361,2.482,362,2.482,363,2.482,364,2.482,365,2.482,366,2.482,367,2.482,368,2.482,369,2.482,370,2.482]],["title/modules.html",[304,2.106]],["body/modules.html",[17,0.063,88,0.063,89,0.063,304,2.367]],["title/overview.html",[371,2.592]],["body/overview.html",[0,0.727,17,0.063,37,0.727,88,0.063,89,0.063,371,2.852,372,3.665,373,3.665]],["title/miscellaneous/typealiases.html",[195,1.098,374,2.97]],["body/miscellaneous/typealiases.html",[5,2.267,6,0.712,17,0.062,24,1.08,34,1.941,88,0.062,89,0.062,195,1.876,375,3.587,376,3.587]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":188,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":181,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":183,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":80,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["1.0",{"_index":306,"title":{},"body":{"index.html":{}}}],["2",{"_index":217,"title":{},"body":{"index.html":{}}}],["2018",{"_index":182,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":372,"title":{},"body":{"overview.html":{}}}],["30",{"_index":186,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":373,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":194,"title":{},"body":{"dependencies.html":{}}}],["8000",{"_index":295,"title":{},"body":{"index.html":{}}}],["_base",{"_index":42,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["abov",{"_index":341,"title":{},"body":{"license.html":{}}}],["abstractbas",{"_index":1,"title":{"interfaces/AbstractBase.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["action",{"_index":364,"title":{},"body":{"license.html":{}}}],["addroute(rout",{"_index":72,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":76,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":70,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["addroute(this.base.resourc",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":273,"title":{},"body":{"index.html":{}}}],["alias",{"_index":375,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":334,"title":{},"body":{"license.html":{}}}],["angular",{"_index":216,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":30,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":193,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angularj",{"_index":218,"title":{},"body":{"index.html":{}}}],["api",{"_index":210,"title":{},"body":{"index.html":{}}}],["app",{"_index":262,"title":{},"body":{"index.html":{}}}],["arg",{"_index":162,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":164,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":166,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":368,"title":{},"body":{"license.html":{}}}],["associ",{"_index":322,"title":{},"body":{"license.html":{}}}],["author",{"_index":357,"title":{},"body":{"license.html":{}}}],["auto",{"_index":279,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":308,"title":{},"body":{"index.html":{}}}],["base",{"_index":84,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["base.http",{"_index":127,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclon",{"_index":131,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.http",{"_index":133,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.resourc",{"_index":136,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":77,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":79,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":81,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["becom",{"_index":307,"title":{},"body":{"index.html":{}}}],["bind",{"_index":220,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":223,"title":{},"body":{"index.html":{}}}],["bump",{"_index":302,"title":{},"body":{"index.html":{}}}],["c",{"_index":311,"title":{},"body":{"license.html":{}}}],["chang",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":170,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":317,"title":{},"body":{"license.html":{}}}],["claim",{"_index":360,"title":{},"body":{"license.html":{}}}],["class",{"_index":37,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{},"overview.html":{}}}],["clonedeep",{"_index":122,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeep(this.bas",{"_index":132,"title":{},"body":{"classes/RestRoute.html":{}}}],["commit",{"_index":179,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":282,"title":{},"body":{"index.html":{}}}],["compon",{"_index":263,"title":{},"body":{"index.html":{}}}],["condit",{"_index":340,"title":{},"body":{"license.html":{}}}],["connect",{"_index":370,"title":{},"body":{"license.html":{}}}],["const",{"_index":44,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":105,"title":{},"body":{"classes/RestModelBase.html":{}}}],["constructor(bas",{"_index":115,"title":{},"body":{"classes/RestRoute.html":{}}}],["constructor(http",{"_index":94,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":203,"title":{},"body":{"index.html":{}}}],["continu",{"_index":300,"title":{},"body":{"index.html":{}}}],["contract",{"_index":365,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":235,"title":{},"body":{"index.html":{}}}],["copi",{"_index":320,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":310,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":230,"title":{},"body":{"index.html":{}}}],["creat",{"_index":225,"title":{},"body":{"index.html":{}}}],["current",{"_index":289,"title":{},"body":{"index.html":{}}}],["damag",{"_index":361,"title":{},"body":{"license.html":{}}}],["data",{"_index":43,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data).pip",{"_index":147,"title":{},"body":{"classes/RestRoute.html":{}}}],["data.id",{"_index":134,"title":{},"body":{"classes/RestRoute.html":{}}}],["data.map(d",{"_index":149,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":47,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["deal",{"_index":323,"title":{},"body":{"license.html":{}}}],["defin",{"_index":14,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":59,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["demo",{"_index":200,"title":{},"body":{"index.html":{}}}],["democompon",{"_index":267,"title":{},"body":{"index.html":{}}}],["depend",{"_index":191,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":215,"title":{},"body":{"index.html":{}}}],["desir",{"_index":248,"title":{},"body":{"index.html":{}}}],["dev",{"_index":288,"title":{},"body":{"index.html":{}}}],["develop",{"_index":205,"title":{},"body":{"index.html":{}}}],["direct",{"_index":257,"title":{},"body":{"index.html":{}}}],["directori",{"_index":290,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":332,"title":{},"body":{"license.html":{}}}],["document",{"_index":175,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":238,"title":{},"body":{"index.html":{}}}],["environ",{"_index":285,"title":{},"body":{"index.html":{}}}],["event",{"_index":356,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":208,"title":{},"body":{"index.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":349,"title":{},"body":{"license.html":{}}}],["extend",{"_index":247,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":259,"title":{},"body":{"index.html":{}}}],["find",{"_index":277,"title":{},"body":{"index.html":{}}}],["first",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":352,"title":{},"body":{"license.html":{}}}],["fix",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["follow",{"_index":339,"title":{},"body":{"license.html":{}}}],["free",{"_index":316,"title":{},"body":{"license.html":{}}}],["fun",{"_index":212,"title":{},"body":{"index.html":{}}}],["function",{"_index":71,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":337,"title":{},"body":{"license.html":{}}}],["gener",{"_index":280,"title":{},"body":{"index.html":{}}}],["get",{"_index":168,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getbaseurl",{"_index":11,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":12,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":65,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":112,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["geton",{"_index":113,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":118,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":60,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["getpost",{"_index":268,"title":{},"body":{"index.html":{}}}],["grant",{"_index":315,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":180,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":53,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["headers}).pip",{"_index":139,"title":{},"body":{"classes/RestRoute.html":{}}}],["help",{"_index":241,"title":{},"body":{"index.html":{}}}],["here",{"_index":255,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":314,"title":{},"body":{"license.html":{}}}],["highli",{"_index":207,"title":{},"body":{"index.html":{}}}],["hit",{"_index":305,"title":{},"body":{"index.html":{}}}],["holder",{"_index":358,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["httpclient",{"_index":28,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":252,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":201,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":231,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":214,"title":{},"body":{"index.html":{}}}],["id",{"_index":38,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["idea",{"_index":232,"title":{},"body":{"index.html":{}}}],["implement",{"_index":187,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":350,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["includ",{"_index":326,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inject",{"_index":250,"title":{},"body":{"index.html":{}}}],["insid",{"_index":222,"title":{},"body":{"index.html":{}}}],["instal",{"_index":204,"title":{},"body":{"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":227,"title":{},"body":{"index.html":{}}}],["key",{"_index":66,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["kind",{"_index":348,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":362,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":359,"title":{},"body":{"license.html":{}}}],["lib",{"_index":226,"title":{},"body":{"index.html":{}}}],["licens",{"_index":206,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":233,"title":{},"body":{"index.html":{}}}],["limit",{"_index":327,"title":{},"body":{"license.html":{}}}],["link",{"_index":211,"title":{},"body":{"index.html":{}}}],["local",{"_index":287,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":123,"title":{},"body":{"classes/RestRoute.html":{}}}],["log",{"_index":172,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":239,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":128,"title":{},"body":{"classes/RestRoute.html":{}}}],["makerestcollection(data",{"_index":148,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":124,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["map((respons",{"_index":140,"title":{},"body":{"classes/RestRoute.html":{}}}],["map(respons",{"_index":144,"title":{},"body":{"classes/RestRoute.html":{}}}],["mapmodel(path",{"_index":102,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":258,"title":{},"body":{"index.html":{}}}],["match",{"_index":89,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":229,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":351,"title":{},"body":{"license.html":{}}}],["merg",{"_index":330,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["miscellan",{"_index":195,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":309,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":129,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":251,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":329,"title":{},"body":{"license.html":{}}}],["modul",{"_index":304,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["name",{"_index":23,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":240,"title":{},"body":{"index.html":{}}}],["new",{"_index":103,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["ngx",{"_index":199,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":286,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":355,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":173,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":342,"title":{},"body":{"license.html":{}}}],["npm",{"_index":243,"title":{},"body":{"index.html":{}}}],["number",{"_index":39,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object.assign(plain",{"_index":62,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.assign(thi",{"_index":51,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":49,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":48,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":46,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(plain",{"_index":68,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":50,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["observ",{"_index":31,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":319,"title":{},"body":{"license.html":{}}}],["on",{"_index":261,"title":{},"body":{"index.html":{}}}],["onc",{"_index":298,"title":{},"body":{"index.html":{}}}],["option",{"_index":25,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["otherwis",{"_index":367,"title":{},"body":{"license.html":{}}}],["out",{"_index":369,"title":{},"body":{"license.html":{}}}],["overview",{"_index":371,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":190,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":303,"title":{},"body":{"index.html":{}}}],["paramet",{"_index":22,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":91,"title":{},"body":{"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":69,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":353,"title":{},"body":{"license.html":{}}}],["path",{"_index":26,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["peer",{"_index":192,"title":{},"body":{"dependencies.html":{}}}],["permiss",{"_index":313,"title":{},"body":{"license.html":{}}}],["permit",{"_index":336,"title":{},"body":{"license.html":{}}}],["person",{"_index":318,"title":{},"body":{"license.html":{}}}],["plain",{"_index":61,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":63,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["pleas",{"_index":236,"title":{},"body":{"index.html":{}}}],["port",{"_index":294,"title":{},"body":{"index.html":{}}}],["portion",{"_index":345,"title":{},"body":{"license.html":{}}}],["post",{"_index":114,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["post(data",{"_index":120,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":274,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":284,"title":{},"body":{"index.html":{}}}],["privat",{"_index":41,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{}}}],["protect",{"_index":99,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["proto",{"_index":64,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["proto[key",{"_index":67,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["prototyp",{"_index":221,"title":{},"body":{"index.html":{}}}],["provid",{"_index":346,"title":{},"body":{"license.html":{}}}],["publish",{"_index":331,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":354,"title":{},"body":{"license.html":{}}}],["put",{"_index":52,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["releas",{"_index":301,"title":{},"body":{"index.html":{}}}],["reload",{"_index":296,"title":{},"body":{"index.html":{}}}],["repo",{"_index":291,"title":{},"body":{"index.html":{}}}],["request",{"_index":101,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["requestinterceptor(req",{"_index":100,"title":{},"body":{"classes/RestBase.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":256,"title":{},"body":{"index.html":{}}}],["response.getplain",{"_index":272,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":141,"title":{},"body":{"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":275,"title":{},"body":{"index.html":{}}}],["rest",{"_index":161,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":213,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":253,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":264,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":92,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"index.html":{}}}],["restful(arg",{"_index":197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":159,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":34,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":283,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":35,"title":{"classes/RestModelBase.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restmodelbase(baseclon",{"_index":137,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelcollection(this.bas",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":245,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":325,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":27,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restroute(thi",{"_index":104,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":88,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":16,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["right",{"_index":328,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":312,"title":{},"body":{"license.html":{}}}],["rout",{"_index":13,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":20,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":73,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.par",{"_index":75,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.path",{"_index":74,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["run",{"_index":293,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":32,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":125,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":244,"title":{},"body":{"index.html":{}}}],["see",{"_index":176,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":265,"title":{},"body":{"index.html":{}}}],["sell",{"_index":335,"title":{},"body":{"license.html":{}}}],["send",{"_index":237,"title":{},"body":{"index.html":{}}}],["server",{"_index":292,"title":{},"body":{"index.html":{}}}],["servic",{"_index":246,"title":{},"body":{"index.html":{}}}],["shall",{"_index":343,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":321,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":196,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":376,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/decorators.t",{"_index":160,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":249,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":93,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:15",{"_index":96,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:19",{"_index":97,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:23",{"_index":98,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:4",{"_index":95,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":5,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:10",{"_index":15,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:103",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:11",{"_index":19,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:12",{"_index":21,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:18",{"_index":106,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:28",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:35",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:42",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":111,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:18",{"_index":116,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:40",{"_index":117,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:49",{"_index":119,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:58",{"_index":121,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":90,"title":{},"body":{"interfaces/Resource.html":{}}}],["standard",{"_index":177,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":169,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":209,"title":{},"body":{"index.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":338,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":333,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":276,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":270,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":344,"title":{},"body":{"license.html":{}}}],["super(http",{"_index":254,"title":{},"body":{"index.html":{}}}],["t",{"_index":36,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":202,"title":{},"body":{"index.html":{}}}],["target",{"_index":163,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":165,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":167,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":266,"title":{},"body":{"index.html":{}}}],["test",{"_index":297,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":299,"title":{},"body":{"index.html":{}}}],["this._base.getbaseurl",{"_index":85,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.getdefaulthead",{"_index":86,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.http.put(url",{"_index":57,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.route(path",{"_index":87,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._rout",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getbaseurl",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getdefaulthead",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.mapmodel(path",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getbaseurl",{"_index":78,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getdefaulthead",{"_index":54,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":56,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath(id",{"_index":143,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":58,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this.http",{"_index":126,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.http.get(url",{"_index":138,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.http.post(url",{"_index":146,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(d",{"_index":150,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(r",{"_index":142,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":145,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.mapmodel(this.path",{"_index":130,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.path",{"_index":135,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":271,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":269,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":45,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["through",{"_index":242,"title":{},"body":{"index.html":{}}}],["tort",{"_index":366,"title":{},"body":{"license.html":{}}}],["tri",{"_index":224,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":374,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":198,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":55,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["url.length",{"_index":83,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["url.slice(0",{"_index":82,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["us",{"_index":260,"title":{},"body":{"index.html":{},"license.html":{}}}],["veri",{"_index":228,"title":{},"body":{"index.html":{}}}],["version",{"_index":178,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":281,"title":{},"body":{"index.html":{}}}],["view",{"_index":278,"title":{},"body":{"index.html":{}}}],["want",{"_index":234,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":347,"title":{},"body":{"license.html":{}}}],["whether",{"_index":363,"title":{},"body":{"license.html":{}}}],["wish",{"_index":219,"title":{},"body":{"index.html":{}}}],["without",{"_index":324,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AbstractBase.html":{"url":"interfaces/AbstractBase.html","title":"interface - AbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:11\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  route(path: string): RestRoute;\n}\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id?: number;\n\n  constructor (private _base: AbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  put(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, {headers}, this.getPlain());\n  }\n\n  delete(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, {headers}, this.getPlain());\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): any {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     {}\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: Request) {\n  }\n\n  protected mapModel(path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders() {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: AbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    AbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  route(path: string): RestRoute;\n}\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id?: number;\n\n  constructor (private _base: AbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  put(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, {headers}, this.getPlain());\n  }\n\n  delete(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, {headers}, this.getPlain());\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): any {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: AbstractBase, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    AbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:40\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     Observable>>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:49\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:58\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Resource } from './types';\nimport { RestModel, RestModelBase } from './restModel';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  mapModel(path: string, data: any): any;\n}\n\nexport class RestRoute {\n  private http: HttpClient\n\n  constructor (private base: AbstractBase, private path: string) {\n    this.http = base.http;\n  }\n\n  private makeRest(data: any): RestModel {\n    const model = this.mapModel(this.path, data);\n    const baseClone = cloneDeep(this.base);\n\n    baseClone.http = this.http;\n\n    const resource: Resource = {\n      id: data.id,\n      path: this.path,\n      parent: baseClone.resource\n    };\n\n    baseClone.resource = resource;\n    return new RestModelBase(baseClone as any, model) as any;\n  }\n\n  getList(): Observable>> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this.http.get(url, {headers}).pipe(\n      map((response: any[]) => response.map(r => this.makeRest(r)))\n    );\n  }\n\n  getOne(id: number): Observable> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath(id);\n\n    return this.http.get(url, {headers}).pipe(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  post(data: any): Observable> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this.http.post(url, {headers}, data).pipe(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  // private makeRestCollection(data: any[]) {\n  //   const models = data.map(d => this.makeRest(d));\n  //   const route = { ...this._route };\n  //   return new RestModelCollection(this.base, route, models);\n  // }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this.base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    // fix baseurl\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    return baseurl + parentUrl + this.path + (id ?  '/' + id : '');\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this.base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): any {\n    return this.base.getDefaultHeaders();\n  }\n\n  private mapModel(path: string, data: any): any {\n    return this.base.mapModel(path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.0.3 (2018-07-31)\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=6.0.0\n        \n            rxjs : >=6.0.0\n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/ not implemented yet\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still on developing]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since on AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So I tried to create this lib.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the Idea.\nIf you liked the idea and want to contribute, please send me an e-mail (I need help).\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source. not implemented yet\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/ not implemented yet\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
