var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/IAbstractBase.html",[0,0.747,1,1.081]],["body/interfaces/IAbstractBase.html",[0,1.016,1,1.261,2,0.735,3,0.61,4,0.499,5,1.576,6,0.402,7,1.261,8,1.605,9,1.892,10,1.051,11,2.893,12,1.605,13,1.605,14,2.893,15,2.251,16,2.893,17,1.051,18,1.829,19,1.942,20,2.181,21,2.025,22,1.697,23,0.071,24,1.697,25,1.256,26,1.173,27,2.251,28,1.515,29,2.025,30,1.307,31,2.025,32,1.513,33,1.226,34,2.025,35,1.226,36,1.829,37,1.471,38,2.025,39,1.059,40,1.829,41,2.025,42,1.513,43,2.025,44,1.338,45,1.926,46,1.226,47,1.28,48,0.735,49,0.735,50,0.871,51,1.059,52,1.059,53,1.28,54,0.043,55,0.043]],["title/interfaces/Resource.html",[0,0.747,9,1.081]],["body/interfaces/Resource.html",[0,1.165,1,1.145,2,0.955,3,0.791,4,0.648,5,2.045,6,0.521,7,1.508,8,1.145,9,1.949,12,1.145,13,1.145,18,1.661,19,1.862,23,0.07,25,1.165,26,1.238,30,1.321,32,1.374,33,0.955,35,1.493,36,1.661,37,1.405,40,1.661,42,1.374,44,1.405,45,1.81,46,1.405,47,1.661,48,0.955,49,0.955,50,1.042,51,2.15,52,2.023,53,2.599,54,0.051,55,0.051]],["title/classes/RestBase.html",[56,0.492,57,1.298]],["body/classes/RestBase.html",[2,0.817,3,0.677,4,0.555,6,0.446,8,1.358,10,1.132,12,1.681,13,1.681,17,1.132,18,1.422,19,1.766,20,2.018,22,1.358,23,0.072,24,1.358,25,1.076,26,0.938,27,2.425,28,1.635,30,1.319,32,1.177,33,1.132,35,1.132,36,1.422,37,1.298,39,1.177,40,1.422,42,1.63,44,1.132,45,2.018,46,1.298,47,1.422,48,0.817,49,0.817,50,0.677,54,0.046,55,0.046,56,0.618,57,1.63,58,2.25,59,1.63,60,2.25,61,2.25,62,2.25,63,2.25,64,2.25,65,2.25,66,3.153,67,0.981,68,0.981,69,2.25]],["title/classes/RestModelBase.html",[56,0.492,70,1.569]],["body/classes/RestModelBase.html",[1,1.279,2,0.472,3,0.391,4,0.32,6,0.258,7,0.901,9,0.901,10,1.066,12,0.901,13,0.901,17,1.066,19,1.62,20,1.785,22,1.279,23,0.073,24,1.279,25,1.119,26,0.884,28,1.504,30,1.078,33,1.24,35,0.472,37,0.751,39,1.081,42,1.081,44,1.066,46,1.164,48,0.472,49,0.472,50,0.622,51,1.535,52,1.346,54,0.03,55,0.03,56,0.41,59,1.081,67,1.122,68,1.122,70,1.627,71,1.01,72,3.205,73,3.205,74,2.575,75,1.298,76,2.657,77,2.067,78,2.067,79,2.067,80,2.893,81,2.158,82,1.298,83,2.158,84,1.608,85,1.298,86,2.067,87,1.298,88,1.298,89,1.01,90,1.01,91,0.566,92,2.026,93,3.119,94,2.067,95,2.067,96,2.067,97,1.298,98,1.298,99,1.298,100,1.298,101,1.01,102,1.298,103,1.01,104,1.608,105,1.298,106,1.298,107,1.608,108,1.306,109,0.679,110,1.608,111,1.298,112,1.01,113,1.298,114,1.01,115,0.679,116,1.298,117,1.01,118,0.821,119,1.01,120,1.01,121,1.01,122,1.298,123,1.298,124,1.298,125,2.067,126,1.298,127,1.298,128,1.608,129,2.067,130,2.067,131,1.298,132,1.298,133,2.657,134,1.298,135,0.566,136,1.01,137,1.608,138,1.01,139,1.01,140,1.01,141,1.346,142,1.01,143,1.01,144,2.004,145,1.01,146,1.298,147,1.298,148,0.821,149,1.298,150,1.298,151,1.298]],["title/classes/RestRoute.html",[44,0.901,56,0.492]],["body/classes/RestRoute.html",[1,1.248,2,0.452,3,0.374,4,0.307,6,0.247,9,1.367,10,0.909,12,0.542,13,0.542,17,0.452,19,1.688,20,1.498,22,1.534,23,0.073,24,1.248,25,1.102,26,0.862,28,1.488,30,1.102,32,0.65,33,1.139,35,1.04,37,0.452,39,1.044,44,0.725,46,1.139,48,0.452,49,0.452,50,0.374,51,1.64,52,1.498,53,0.786,54,0.029,55,0.029,56,0.396,59,1.044,67,1.09,68,1.248,70,0.786,76,1.947,80,3.081,81,2.387,83,2.549,84,1.947,89,0.968,90,0.968,91,1.09,92,2.313,93,2.848,101,0.968,103,0.968,104,1.554,107,1.554,108,1.262,109,0.65,110,1.554,112,0.968,114,0.968,115,0.65,117,0.968,118,0.786,119,0.968,120,0.968,121,0.968,128,1.554,133,2.607,135,0.542,136,0.968,137,1.554,138,0.968,139,0.968,140,0.968,141,1.308,142,0.968,143,0.968,144,1.554,145,0.968,148,1.81,152,1.244,153,1.554,154,1.997,155,1.581,156,1.244,157,1.244,158,1.997,159,1.244,160,1.997,161,1.244,162,1.554,163,1.244,164,0.968,165,1.244,166,1.244,167,2.502,168,1.244,169,1.997,170,1.244,171,1.244,172,1.244,173,1.997,174,1.244,175,1.554,176,1.244,177,1.244,178,1.244,179,1.244,180,1.997,181,1.997,182,1.244,183,1.997,184,1.244,185,1.244,186,1.244,187,1.997,188,1.997,189,1.244,190,1.244,191,1.244,192,1.244,193,1.244,194,1.244]],["title/interfaces/RestfulOptions.html",[0,0.747,195,1.931]],["body/interfaces/RestfulOptions.html",[0,1.088,2,1.021,3,0.846,4,0.693,6,0.558,7,1.576,23,0.072,25,1.088,26,1.27,28,1.533,30,1.203,50,1.088,54,0.053,55,0.053,67,1.839,135,1.225,141,2.206,195,3.11,196,2.188,197,1.777,198,2.188,199,3.616,200,3.616,201,2.811,202,3.616,203,2.811]],["title/changelog.html",[204,1.328,205,1.098,206,2.1]],["body/changelog.html",[4,0.541,7,0.955,8,1.663,10,0.796,15,2.382,17,1.112,23,0.045,37,0.796,54,0.045,55,0.045,56,0.435,57,1.6,67,0.955,68,0.955,83,1.386,91,1.334,109,1.146,115,1.146,148,1.386,155,2.412,207,3.526,208,2.193,209,2.193,210,2.193,211,1.386,212,2.193,213,2.193,214,1.706,215,3.06,216,2.193,217,2.193,218,3.522,219,4.267,220,3.816,221,4.267,222,4.422,223,2.193,224,2.193,225,2.193,226,2.193,227,2.193,228,1.706,229,2.193,230,1.706,231,2.193,232,2.193,233,2.193,234,2.193,235,2.193,236,1.706,237,2.193,238,2.193,239,2.193,240,3.526,241,2.193,242,3.06,243,1.706,244,1.706,245,2.193,246,2.193,247,2.193,248,3.06,249,3.06,250,3.387,251,3.06,252,3.06,253,2.193,254,2.193,255,2.193,256,2.193,257,2.193,258,2.193,259,3.816,260,3.06,261,2.193,262,2.193,263,1.706,264,2.193,265,2.193,266,2.193,267,2.193,268,3.06,269,1.706,270,2.193,271,2.193]],["title/dependencies.html",[272,2.1,273,1.877]],["body/dependencies.html",[23,0.066,49,1.347,54,0.063,55,0.063,273,2.344,274,3.708]],["title/miscellaneous/functions.html",[135,1.294,275,1.098]],["body/miscellaneous/functions.html",[6,0.702,22,1.541,23,0.065,24,1.541,26,1.065,54,0.061,55,0.061,81,2.236,135,1.541,196,2.753,197,2.633,198,2.753,275,1.85,276,3.537,277,3.537]],["title/index.html",[6,0.417,204,1.328,205,1.098]],["body/index.html",[3,0.733,8,0.698,10,0.884,17,1.069,23,0.071,28,0.884,30,0.482,33,0.884,35,0.582,45,1.273,46,1.406,48,0.582,50,0.733,54,0.036,55,0.036,56,0.483,57,1.539,59,1.273,66,1.247,68,0.698,91,1.061,92,1.012,108,1.012,109,0.838,115,0.838,118,1.012,141,0.838,153,1.894,155,2.353,162,1.247,164,1.247,175,1.894,197,2.078,205,1.273,211,1.861,214,1.894,228,1.247,230,1.247,243,2.291,244,1.247,250,2.752,263,1.894,269,1.894,273,1.012,278,2.434,279,2.434,280,1.602,281,1.602,282,3.87,283,3.724,284,1.538,285,1.602,286,2.434,287,2.434,288,1.602,289,1.602,290,2.944,291,1.602,292,1.602,293,1.602,294,1.602,295,1.602,296,1.602,297,1.602,298,1.602,299,1.602,300,1.602,301,2.434,302,1.602,303,1.602,304,1.602,305,1.602,306,1.602,307,1.602,308,1.602,309,1.602,310,1.602,311,1.602,312,1.602,313,1.602,314,1.602,315,1.602,316,1.602,317,1.602,318,3.87,319,1.602,320,1.602,321,1.602,322,2.434,323,1.602,324,2.434,325,2.434,326,2.434,327,1.602,328,3.288,329,1.602,330,2.434,331,1.602,332,1.602,333,1.602,334,1.894,335,1.602,336,2.434,337,2.944,338,1.602,339,1.602,340,1.602,341,1.602,342,1.602,343,1.602,344,1.602,345,1.602,346,1.602,347,1.602,348,1.602,349,1.602,350,1.602,351,2.434,352,2.434,353,1.602,354,1.602,355,1.602,356,1.602,357,1.602,358,1.602,359,1.602,360,1.602,361,1.602,362,1.602,363,1.602,364,1.602,365,2.434,366,3.724,367,1.602,368,1.602,369,1.602,370,2.434,371,1.602,372,1.602,373,2.434,374,1.602,375,1.602,376,1.012,377,1.602,378,1.602,379,1.602,380,1.602,381,1.247]],["title/license.html",[204,1.328,205,1.098,284,1.328]],["body/license.html",[4,0.64,23,0.051,54,0.051,55,0.051,211,1.639,218,2.018,236,3.183,284,1.639,334,2.669,381,2.669,382,3.844,383,2.593,384,2.593,385,3.43,386,2.593,387,2.593,388,2.593,389,2.593,390,3.43,391,2.593,392,4.58,393,2.593,394,3.43,395,3.844,396,2.593,397,3.844,398,3.43,399,2.593,400,2.593,401,2.593,402,2.593,403,2.593,404,2.593,405,2.593,406,2.593,407,2.593,408,2.593,409,2.593,410,2.593,411,2.593,412,2.593,413,3.43,414,3.43,415,2.593,416,2.593,417,2.593,418,3.43,419,2.593,420,2.593,421,2.593,422,2.593,423,2.593,424,2.593,425,2.593,426,2.593,427,2.593,428,2.593,429,2.593,430,2.593,431,2.593,432,2.593,433,2.593,434,2.593,435,2.593,436,2.593,437,2.593,438,2.593,439,2.593,440,2.593,441,2.593]],["title/modules.html",[376,2.106]],["body/modules.html",[23,0.064,54,0.064,55,0.064,376,2.378]],["title/overview.html",[442,2.592]],["body/overview.html",[0,1.111,23,0.063,54,0.063,55,0.063,56,0.732,442,2.872,443,4.27]],["title/miscellaneous/typealiases.html",[275,1.098,444,2.97]],["body/miscellaneous/typealiases.html",[6,0.718,23,0.062,25,1.09,54,0.062,55,0.062,71,2.818,91,1.948,275,1.893,445,3.621,446,3.621]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["0.0.7",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["0.0.8",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["0.0.9",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["085f547",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":144,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["1.0",{"_index":378,"title":{},"body":{"index.html":{}}}],["10",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"index.html":{}}}],["2018",{"_index":218,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":443,"title":{},"body":{"overview.html":{}}}],["30",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["53ed63d",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["6188851",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["7379bef",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":368,"title":{},"body":{"index.html":{}}}],["86ff926",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":78,"title":{},"body":{"classes/RestModelBase.html":{}}}],["a98b240",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":412,"title":{},"body":{"license.html":{}}}],["action",{"_index":435,"title":{},"body":{"license.html":{}}}],["add",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["addroute(rout",{"_index":136,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":140,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":134,"title":{},"body":{"classes/RestModelBase.html":{}}}],["addroute(this.base.resourc",{"_index":191,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":346,"title":{},"body":{"index.html":{}}}],["alias",{"_index":445,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":405,"title":{},"body":{"license.html":{}}}],["angular",{"_index":293,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":48,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":325,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":295,"title":{},"body":{"index.html":{}}}],["api",{"_index":288,"title":{},"body":{"index.html":{}}}],["app",{"_index":336,"title":{},"body":{"index.html":{}}}],["arg",{"_index":198,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":200,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":202,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":439,"title":{},"body":{"license.html":{}}}],["associ",{"_index":393,"title":{},"body":{"license.html":{}}}],["author",{"_index":428,"title":{},"body":{"license.html":{}}}],["auto",{"_index":352,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":380,"title":{},"body":{"index.html":{}}}],["base",{"_index":148,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["base.resourc",{"_index":181,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":141,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":143,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":145,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["becom",{"_index":379,"title":{},"body":{"index.html":{}}}],["better",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":297,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":300,"title":{},"body":{"index.html":{}}}],["born",{"_index":303,"title":{},"body":{"index.html":{}}}],["bug",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":374,"title":{},"body":{"index.html":{}}}],["c",{"_index":383,"title":{},"body":{"license.html":{}}}],["cdd0f86",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":207,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":206,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":389,"title":{},"body":{"license.html":{}}}],["claim",{"_index":431,"title":{},"body":{"license.html":{}}}],["class",{"_index":56,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["commit",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":355,"title":{},"body":{"index.html":{}}}],["compon",{"_index":337,"title":{},"body":{"index.html":{}}}],["condit",{"_index":411,"title":{},"body":{"license.html":{}}}],["connect",{"_index":441,"title":{},"body":{"license.html":{}}}],["const",{"_index":93,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":59,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":75,"title":{},"body":{"classes/RestModelBase.html":{}}}],["constructor(bas",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["constructor(http",{"_index":60,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":281,"title":{},"body":{"index.html":{}}}],["continu",{"_index":372,"title":{},"body":{"index.html":{}}}],["contract",{"_index":436,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":311,"title":{},"body":{"index.html":{}}}],["copi",{"_index":236,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["copyright",{"_index":382,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":306,"title":{},"body":{"index.html":{}}}],["creat",{"_index":228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["createhttprequest(method",{"_index":101,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["current",{"_index":362,"title":{},"body":{"index.html":{}}}],["damag",{"_index":432,"title":{},"body":{"license.html":{}}}],["data",{"_index":33,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":179,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":96,"title":{},"body":{"classes/RestModelBase.html":{}}}],["deal",{"_index":394,"title":{},"body":{"license.html":{}}}],["defin",{"_index":20,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":72,"title":{},"body":{"classes/RestModelBase.html":{}}}],["delete(param",{"_index":79,"title":{},"body":{"classes/RestModelBase.html":{}}}],["demo",{"_index":243,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["democompon",{"_index":341,"title":{},"body":{"index.html":{}}}],["depend",{"_index":273,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":292,"title":{},"body":{"index.html":{}}}],["desir",{"_index":322,"title":{},"body":{"index.html":{}}}],["dev",{"_index":361,"title":{},"body":{"index.html":{}}}],["develop",{"_index":283,"title":{},"body":{"index.html":{}}}],["direct",{"_index":331,"title":{},"body":{"index.html":{}}}],["directori",{"_index":363,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":403,"title":{},"body":{"license.html":{}}}],["document",{"_index":211,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":314,"title":{},"body":{"index.html":{}}}],["e6f672a",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["eeca740",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":358,"title":{},"body":{"index.html":{}}}],["event",{"_index":427,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":286,"title":{},"body":{"index.html":{}}}],["export",{"_index":50,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":420,"title":{},"body":{"license.html":{}}}],["extend",{"_index":263,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["featur",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":333,"title":{},"body":{"index.html":{}}}],["find",{"_index":350,"title":{},"body":{"index.html":{}}}],["first",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":423,"title":{},"body":{"license.html":{}}}],["fix",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":410,"title":{},"body":{"license.html":{}}}],["forgot",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["framework",{"_index":308,"title":{},"body":{"index.html":{}}}],["free",{"_index":388,"title":{},"body":{"license.html":{}}}],["fullresponseinterc",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["fullresponseinterceptor",{"_index":11,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["fullresponseinterceptor(r",{"_index":18,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["fullresponseinterceptor(requestobserv",{"_index":117,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["fun",{"_index":289,"title":{},"body":{"index.html":{}}}],["function",{"_index":135,"title":{"miscellaneous/functions.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":408,"title":{},"body":{"license.html":{}}}],["gener",{"_index":353,"title":{},"body":{"index.html":{}}}],["get",{"_index":204,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["get'|'post",{"_index":166,"title":{},"body":{"classes/RestRoute.html":{}}}],["getbaseurl",{"_index":12,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":13,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":129,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":190,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["getlist(param",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["geton",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":73,"title":{},"body":{"classes/RestModelBase.html":{}}}],["getpost",{"_index":342,"title":{},"body":{"index.html":{}}}],["grant",{"_index":387,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":67,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["help",{"_index":316,"title":{},"body":{"index.html":{}}}],["here",{"_index":330,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":386,"title":{},"body":{"license.html":{}}}],["highli",{"_index":285,"title":{},"body":{"index.html":{}}}],["hit",{"_index":377,"title":{},"body":{"index.html":{}}}],["holder",{"_index":429,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":45,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"index.html":{}}}],["httpevent",{"_index":47,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["httpeventtyp",{"_index":90,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpeventtype.respons",{"_index":120,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheader",{"_index":89,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheaders(this.getdefaulthead",{"_index":103,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpparam",{"_index":80,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest",{"_index":37,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["httprequest(method",{"_index":170,"title":{},"body":{"classes/RestRoute.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":327,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":279,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":307,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":291,"title":{},"body":{"index.html":{}}}],["iabstractbas",{"_index":1,"title":{"interfaces/IAbstractBase.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id",{"_index":51,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id_data",{"_index":167,"title":{},"body":{"classes/RestRoute.html":{}}}],["idea",{"_index":301,"title":{},"body":{"index.html":{}}}],["immut",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":269,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":421,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["includ",{"_index":397,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inject",{"_index":324,"title":{},"body":{"index.html":{}}}],["insid",{"_index":299,"title":{},"body":{"index.html":{}}}],["instal",{"_index":282,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":230,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["keep",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":130,"title":{},"body":{"classes/RestModelBase.html":{}}}],["kind",{"_index":419,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":433,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":430,"title":{},"body":{"license.html":{}}}],["lib",{"_index":302,"title":{},"body":{"index.html":{}}}],["licens",{"_index":284,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":309,"title":{},"body":{"index.html":{}}}],["limit",{"_index":398,"title":{},"body":{"license.html":{}}}],["link",{"_index":244,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["liter",{"_index":64,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":360,"title":{},"body":{"index.html":{}}}],["log",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":315,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":174,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["mapmodel",{"_index":14,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["mapmodel(path",{"_index":32,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":332,"title":{},"body":{"index.html":{}}}],["match",{"_index":55,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":305,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":422,"title":{},"body":{"license.html":{}}}],["merg",{"_index":401,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["method,url",{"_index":106,"title":{},"body":{"classes/RestModelBase.html":{}}}],["miscellan",{"_index":275,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":381,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":175,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":326,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":400,"title":{},"body":{"license.html":{}}}],["modul",{"_index":376,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":24,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":68,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["ngx",{"_index":278,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":359,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":426,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":413,"title":{},"body":{"license.html":{}}}],["now",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":318,"title":{},"body":{"index.html":{}}}],["null",{"_index":169,"title":{},"body":{"classes/RestRoute.html":{}}}],["number",{"_index":52,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["object.assign(plain",{"_index":126,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thi",{"_index":100,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":98,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":97,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":95,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.getprototypeof(this.bas",{"_index":177,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(bas",{"_index":178,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(plain",{"_index":132,"title":{},"body":{"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":99,"title":{},"body":{"classes/RestModelBase.html":{}}}],["observ",{"_index":19,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observable(observ",{"_index":114,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observer.next(response.bodi",{"_index":121,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":391,"title":{},"body":{"license.html":{}}}],["on",{"_index":335,"title":{},"body":{"index.html":{}}}],["onc",{"_index":370,"title":{},"body":{"index.html":{}}}],["option",{"_index":26,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":438,"title":{},"body":{"license.html":{}}}],["out",{"_index":440,"title":{},"body":{"license.html":{}}}],["overview",{"_index":442,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":272,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":375,"title":{},"body":{"index.html":{}}}],["param",{"_index":83,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["paramet",{"_index":22,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":53,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":133,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":424,"title":{},"body":{"license.html":{}}}],["pass",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["path",{"_index":35,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":385,"title":{},"body":{"license.html":{}}}],["permit",{"_index":407,"title":{},"body":{"license.html":{}}}],["person",{"_index":390,"title":{},"body":{"license.html":{}}}],["pipe(map((respons",{"_index":184,"title":{},"body":{"classes/RestRoute.html":{}}}],["pipe(map(respons",{"_index":187,"title":{},"body":{"classes/RestRoute.html":{}}}],["plain",{"_index":125,"title":{},"body":{"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":127,"title":{},"body":{"classes/RestModelBase.html":{}}}],["pleas",{"_index":312,"title":{},"body":{"index.html":{}}}],["port",{"_index":367,"title":{},"body":{"index.html":{}}}],["portion",{"_index":416,"title":{},"body":{"license.html":{}}}],["post",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["post(data",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":347,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":357,"title":{},"body":{"index.html":{}}}],["privat",{"_index":92,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":210,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["protect",{"_index":66,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["proto",{"_index":128,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["proto[key",{"_index":131,"title":{},"body":{"classes/RestModelBase.html":{}}}],["prototyp",{"_index":298,"title":{},"body":{"index.html":{}}}],["provid",{"_index":417,"title":{},"body":{"license.html":{}}}],["publish",{"_index":402,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":425,"title":{},"body":{"license.html":{}}}],["put",{"_index":74,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put'|'delet",{"_index":102,"title":{},"body":{"classes/RestModelBase.html":{}}}],["put(param",{"_index":86,"title":{},"body":{"classes/RestModelBase.html":{}}}],["re",{"_index":27,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{}}}],["readm",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["reimplement",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":373,"title":{},"body":{"index.html":{}}}],["reload",{"_index":369,"title":{},"body":{"index.html":{}}}],["repo",{"_index":364,"title":{},"body":{"index.html":{}}}],["req",{"_index":39,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["request",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["requestinterceptor",{"_index":15,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["requestinterceptor(req",{"_index":36,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["requestobserv",{"_index":112,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":115,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["response.getplain",{"_index":345,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":185,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.typ",{"_index":119,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":348,"title":{},"body":{"index.html":{}}}],["responseinterceptor",{"_index":16,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["responseinterceptor(r",{"_index":40,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["rest",{"_index":197,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":290,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":328,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":338,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":57,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["restful(arg",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":195,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":91,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":356,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":70,"title":{"classes/RestModelBase.html":{}},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restmodelbase(bas",{"_index":182,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":320,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":396,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":44,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restroute(thi",{"_index":69,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":54,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":28,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["right",{"_index":399,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":384,"title":{},"body":{"license.html":{}}}],["rout",{"_index":17,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":42,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":137,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.par",{"_index":139,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.path",{"_index":138,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["run",{"_index":366,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":49,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":319,"title":{},"body":{"index.html":{}}}],["see",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":339,"title":{},"body":{"index.html":{}}}],["sell",{"_index":406,"title":{},"body":{"license.html":{}}}],["send",{"_index":313,"title":{},"body":{"index.html":{}}}],["server",{"_index":365,"title":{},"body":{"index.html":{}}}],["servic",{"_index":321,"title":{},"body":{"index.html":{}}}],["shall",{"_index":414,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":392,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":446,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/decorators.t",{"_index":196,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":323,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":58,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:25",{"_index":62,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:29",{"_index":63,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:33",{"_index":65,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:5",{"_index":61,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":71,"title":{},"body":{"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:10",{"_index":77,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:118",{"_index":88,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:49",{"_index":87,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:53",{"_index":82,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:57",{"_index":85,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:57",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:62",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:67",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:7",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":5,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{}}}],["src/types.ts:15",{"_index":29,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:16",{"_index":31,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:18",{"_index":43,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:19",{"_index":34,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:21",{"_index":38,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:22",{"_index":41,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:23",{"_index":21,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["standard",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":205,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":287,"title":{},"body":{"index.html":{}}}],["string",{"_index":30,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":409,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":404,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":349,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":118,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["substanti",{"_index":415,"title":{},"body":{"license.html":{}}}],["super(http",{"_index":329,"title":{},"body":{"index.html":{}}}],["t",{"_index":76,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":280,"title":{},"body":{"index.html":{}}}],["target",{"_index":199,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":201,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":203,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":340,"title":{},"body":{"index.html":{}}}],["test",{"_index":250,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":371,"title":{},"body":{"index.html":{}}}],["this._bas",{"_index":116,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getbaseurl",{"_index":149,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.getdefaulthead",{"_index":150,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.http.request(req",{"_index":113,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.requestinterceptor(req",{"_index":111,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this._base.route(path",{"_index":151,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.bas",{"_index":173,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getbaseurl",{"_index":192,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getdefaulthead",{"_index":193,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.http.request(req",{"_index":172,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.mapmodel(path",{"_index":194,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.requestinterceptor(req",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('delet",{"_index":124,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.createhttprequest('get",{"_index":183,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('post",{"_index":189,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.createhttprequest('put",{"_index":122,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getbaseurl",{"_index":142,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":105,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.getfullpath(method",{"_index":168,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":123,"title":{},"body":{"classes/RestModelBase.html":{}}}],["this.makerest(r",{"_index":186,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":188,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.mapmodel(this.path",{"_index":176,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.path",{"_index":180,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":344,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":343,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":94,"title":{},"body":{"classes/RestModelBase.html":{}}}],["through",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["tort",{"_index":437,"title":{},"body":{"license.html":{}}}],["type",{"_index":25,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":444,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":81,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["url",{"_index":104,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["url.length",{"_index":147,"title":{},"body":{"classes/RestModelBase.html":{}}}],["url.slice(0",{"_index":146,"title":{},"body":{"classes/RestModelBase.html":{}}}],["us",{"_index":334,"title":{},"body":{"index.html":{},"license.html":{}}}],["verbo",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":304,"title":{},"body":{"index.html":{}}}],["version",{"_index":214,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":354,"title":{},"body":{"index.html":{}}}],["view",{"_index":351,"title":{},"body":{"index.html":{}}}],["want",{"_index":310,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":418,"title":{},"body":{"license.html":{}}}],["welcom",{"_index":317,"title":{},"body":{"index.html":{}}}],["whether",{"_index":434,"title":{},"body":{"license.html":{}}}],["wish",{"_index":296,"title":{},"body":{"index.html":{}}}],["withou",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":395,"title":{},"body":{"license.html":{}}}],["work",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["ye",{"_index":84,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IAbstractBase.html":{"url":"interfaces/IAbstractBase.html","title":"interface - IAbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    FullResponseInterceptor\n                                \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    mapModel\n                                \n                                \n                                    requestInterceptor\n                                \n                                \n                                    responseInterceptor\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FullResponseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nFullResponseInterceptor(res: Observable>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable>\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapModel\n                            \n                            \n                        \n                    \n                \n                \n                    \nmapModel(path: string, data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nrequestInterceptor(req: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nresponseInterceptor(res: Observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable): Observable;\n  FullResponseInterceptor(res: Observable>): Observable>;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RestRoute } from './restRoute';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: HttpRequest): HttpRequest {\n    return req;\n  }\n\n  protected responseInterceptor(res: Observable): Observable {\n    return res;\n  }\n\n  protected FullResponseInterceptor(res: Observable>): Observable> {\n    return res;\n  }\n\n  protected mapModel(path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:57\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:118\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest, HttpEventType } from '@angular/common/http';\nimport { IAbstractBase } from './types';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id: number;\n\n  constructor (private _base: IAbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  private createHttpRequest(method: 'PUT'|'DELETE', params?: HttpParams, data?: any) {\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n    const url = this.getFullPath();\n\n    let req = new HttpRequest(\n      method,url, data, {\n      headers, params\n    });\n\n    // pass through request interceptor\n    req = this._base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this._base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this._base\n      .FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  put(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('PUT', params, this.getPlain());\n  }\n\n  delete(params?: HttpParams | undefined): Observable {\n    return this.createHttpRequest('DELETE', params);\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: IAbstractBase, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:57\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:62\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams | undefined)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:67\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams | undefined\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParams, HttpHeaders, HttpEventType } from '@angular/common/http';\nimport { Resource, IAbstractBase } from './types';\nimport { RestModel, RestModelBase } from './restModel';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RestRoute {\n  constructor (private base: IAbstractBase, private path: string) {\n  }\n\n  private createHttpRequest(method: 'GET'|'POST', params?: HttpParams, id_data?: any) {\n    const url = this.getFullPath(method === 'GET' ? id_data : null);\n    const headers = new HttpHeaders(this.getDefaultHeaders());\n\n    let req = new HttpRequest(method, url,\n      method === 'POST' ? id_data : null,\n      { headers, params }\n    );\n\n    // pass through request interceptor\n    req = this.base.requestInterceptor(req);\n\n    // the observable to return\n    const requestObservable = this.base.http.request(req);\n\n    const observable = new Observable(observer => {\n      // pass through response interceptor\n      this.base\n        .FullResponseInterceptor(requestObservable)\n        .subscribe(response => {\n          if (response.type === HttpEventType.Response) {\n            observer.next(response.body);\n          }\n        });\n    });\n\n    return observable;\n  }\n\n  private makeRest(data: any): RestModel {\n    const model = this.mapModel(this.path, data);\n\n    const base = { ...this.base };\n    const proto = Object.getPrototypeOf(this.base);\n    Object.setPrototypeOf(base, proto);\n\n    const resource: Resource = {\n      id: data.id,\n      path: this.path,\n      parent: base.resource\n    };\n\n    base.resource = resource;\n    return new RestModelBase(base as any, model) as any;\n  }\n\n  getList(params?: HttpParams | undefined): Observable>> {\n    return this.createHttpRequest('GET', params)\n      .pipe(map((response: any[]) => response.map(r => this.makeRest(r))));\n  }\n\n  getOne(id: number, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('GET', params, id)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  post(data: any, params?: HttpParams | undefined): Observable> {\n    return this.createHttpRequest('POST', params, data)\n      .pipe(map(response => this.makeRest(response)));\n  }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this.base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    return baseurl + parentUrl + this.path + (id ?  '/' + id : '');\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this.base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this.base.getDefaultHeaders();\n  }\n\n  private mapModel(path: string, data: any): any {\n    return this.base.mapModel(path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.1.1 (2018-08-14)\nBug Fixes\n\nrestModel: I forgot to change on restModel (7379bef)\n\n\n0.1.0 (2018-08-14)\n\n0.0.9 (2018-08-14)\nBug Fixes\n\nrequestInterceptor: it needs to create a new HttpRequest object, because it's immutable (a98b240)\n\n\n0.0.8 (2018-08-14)\nBug Fixes\n\nRestBase: Base should keep the originals properties, no copying (e6f672a)\nRoute: params and headers were not in request (085f547)\n\n\n0.0.7 (2018-08-10)\nBug Fixes\n\nreadme: Now all demo links are working (6188851)\n\n\n0.0.6 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\nFeatures\n\nRestBase: Add requestInterceptor, response and fullResponseInterc. (cdd0f86)\n\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still in development]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So the idea of this lib was born.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the framework.\nIf you liked the idea and want to contribute, please send me an e-mail. Your help is welcome!\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        3 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
