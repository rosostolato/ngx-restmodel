var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/classes/Base.html",[0,0.034,1,0.606]],["body/classes/Base.html",[0,0.046,1,0.829,2,0.757,3,0.621,4,0.499,5,1.958,6,0.829,7,2.516,8,2.113,9,0.914,10,2.516,11,0.757,12,0.072,13,0.757,14,0.621,15,0.621,16,2.616,17,0.757,18,1.316,19,0.829,20,1.316,21,0.751,22,1.221,23,1.375,24,1.316,25,1.316,26,1.59,27,2.266,28,1.316,29,0.914,30,1.958,31,1.14,32,1.958,33,1.958,34,1.59,35,1.59,36,1.758,37,0.05,38,0.05]],["title/classes/Collection.html",[0,0.034,39,1.91]],["body/classes/Collection.html",[0,0.053,2,0.939,3,0.77,4,0.619,6,0.953,9,1.133,11,0.939,12,0.068,13,0.939,14,0.77,15,0.77,19,0.77,37,0.057,38,0.057,39,3.005,40,3.12,41,1.403,42,3.005,43,3.12,44,2.193,45,3.12,46,3.005,47,3.12]],["title/classes/RestBase.html",[0,0.034,48,1.07]],["body/classes/RestBase.html",[0,0.046,1,0.987,2,0.739,3,0.606,4,0.487,6,0.816,8,2.093,9,1.201,11,0.996,12,0.071,13,0.996,14,0.816,15,0.816,17,1.205,18,1.284,19,0.606,21,0.656,22,1.201,23,1.358,27,1.284,29,0.892,31,0.996,37,0.049,38,0.049,41,1.201,48,1.63,49,2.455,50,0.996,51,1.201,52,2.455,53,2.455,54,2.574,55,2.574,56,2.455,57,1.911,58,1.552,59,1.552,60,1.911,61,1.911,62,1.552,63,2.455,64,1.552,65,2.455]],["title/classes/RestModel.html",[0,0.034,66,1.07]],["body/classes/RestModel.html",[0,0.03,1,0.873,2,0.425,3,0.348,4,0.28,6,0.545,9,1.285,11,0.665,12,0.072,13,0.665,14,0.671,15,0.759,17,0.926,19,0.348,21,0.734,22,0.513,23,0.802,24,1.608,25,1.422,28,1.608,29,0.802,31,1.152,37,0.033,38,0.033,41,0.802,44,1.745,48,1.34,50,0.665,51,0.802,55,1.098,58,0.892,62,0.892,66,0.962,67,1.411,68,1.718,69,3.337,70,2.393,71,3.075,72,0.892,73,2.109,74,2.208,75,1.411,76,2.597,77,1.411,78,1.411,79,1.411,80,1.411,81,1.098,82,0.892,83,0.892,84,1.098,85,1.098,86,2.337,87,2.393,88,1.718,89,2.208,90,2.208,91,2.208,92,2.208,93,1.411,94,2.719,95,1.411,96,1.411,97,1.411,98,1.411,99,1.718,100,1.411,101,1.411,102,1.411,103,1.411,104,0.738,105,1.411,106,2.877,107,1.718,108,1.098,109,1.098,110,1.098,111,0.738,112,1.098,113,1.718,114,1.718,115,1.098,116,1.098,117,1.411]],["title/classes/RestModelCollection.html",[0,0.034,118,1.551]],["body/classes/RestModelCollection.html",[0,0.043,1,0.948,2,0.672,3,0.55,4,0.443,6,0.764,9,1.125,11,0.672,12,0.071,13,0.672,14,0.55,15,0.55,17,1.071,19,0.55,21,0.801,28,2.112,29,0.81,31,0.933,37,0.046,38,0.046,41,1.125,42,2.411,44,1.167,46,3.143,48,1.675,50,0.672,51,1.125,60,1.736,62,1.41,66,1.35,70,2.992,72,1.41,83,1.41,85,1.736,86,1.958,99,2.411,104,1.62,118,1.958,119,2.231,120,1.958,121,2.231,122,2.231,123,2.231,124,2.231,125,2.231,126,2.231,127,2.231,128,2.231,129,2.231,130,2.231,131,2.231,132,2.231,133,2.231]],["title/classes/RestRoute.html",[0,0.034,59,1.551]],["body/classes/RestRoute.html",[0,0.028,1,0.882,2,0.39,3,0.319,4,0.257,6,0.509,9,1.065,11,1.027,12,0.073,13,0.774,14,0.841,15,0.634,17,0.964,19,0.319,21,0.759,22,1.065,23,0.933,24,1.344,25,1.533,26,1.303,29,1.065,31,1.152,36,1.078,37,0.03,38,0.03,41,0.749,44,1.87,50,0.621,51,0.749,58,0.818,59,1.303,64,1.303,66,0.564,72,0.818,73,1.853,76,2.784,81,1.007,82,0.818,83,0.818,84,1.007,86,2.347,87,2.654,88,2,104,1.674,106,2.784,107,1.605,108,1.007,109,1.007,110,1.007,111,0.677,112,1.007,113,1.605,114,1.605,115,1.007,116,1.007,118,0.818,134,1.295,135,2.281,136,2.062,137,1.605,138,2.931,139,1.295,140,1.295,141,2.062,142,1.295,143,1.605,144,1.295,145,1.007,146,1.295,147,1.295,148,2.062,149,1.295,150,1.295,151,1.295,152,2.062,153,2.062,154,1.295,155,1.295,156,1.295,157,1.295,158,1.295,159,1.295,160,1.295,161,1.295,162,1.295,163,1.295,164,1.295,165,1.295]],["title/interfaces/Route.html",[20,1.284,21,0.487]],["body/interfaces/Route.html",[0,0.033,1,0.582,2,0.711,3,0.582,4,0.468,5,1.837,6,0.582,8,1.684,12,0.072,14,0.904,15,0.971,16,1.837,17,0.711,18,1.234,19,0.794,20,1.684,21,0.844,22,1.497,23,1.497,24,2.059,25,1.917,26,2.489,27,2.224,28,1.234,29,0.857,30,1.837,31,1.103,32,1.837,33,1.837,34,1.492,35,1.492,36,1.684,37,0.047,38,0.047,50,0.711,68,2.506]],["title/changelog.html",[166,1.309,167,1.083,168,2.071]],["body/changelog.html",[4,0.632,12,0.058,21,0.632,37,0.058,38,0.058,51,1.157,120,2.013,169,3.911,170,3.185,171,3.185,172,3.185,173,2.013,174,3.185,175,3.185,176,2.479,177,3.911,178,3.185,179,3.185,180,3.294,181,4.233,182,3.185,183,3.185,184,3.911,185,3.185,186,3.185]],["title/dependencies.html",[187,2.071,188,1.858]],["body/dependencies.html",[12,0.066,37,0.062,38,0.062,188,2.301,189,3.641,190,2.833,191,3.641]],["title/miscellaneous/functions.html",[111,1.538,192,1.612]],["body/miscellaneous/functions.html",[1,0.938,11,1.248,12,0.066,13,1.248,14,0.938,15,1.023,37,0.056,38,0.056,50,0.916,57,2.958,82,2.403,111,1.591,192,2.368,193,3.802,194,2.958,195,3.042,196,3.042,197,3.042,198,3.802,199,3.042,200,3.042,201,3.042,202,3.042,203,3.042,204,3.042]],["title/index.html",[50,0.624,166,1.309,167,1.083]],["body/index.html",[0,0.03,3,0.536,6,0.536,8,1.136,12,0.07,17,1.105,18,0.723,19,0.536,21,0.532,22,0.502,23,0.502,27,0.723,31,0.654,34,0.874,35,0.874,36,1.136,37,0.032,38,0.032,41,0.789,48,1.169,51,0.789,54,1.076,61,1.076,64,0.874,66,0.947,73,1.373,104,0.723,120,2.089,135,1.69,137,2.73,143,1.076,145,1.076,167,1.136,173,1.696,176,1.69,188,0.874,190,1.69,194,2.366,205,2.172,206,2.683,207,2.172,208,1.383,209,1.383,210,3.669,211,3.508,212,1.373,213,1.383,214,2.172,215,2.172,216,1.383,217,1.383,218,1.383,219,2.683,220,1.383,221,1.383,222,1.383,223,1.383,224,1.383,225,1.383,226,1.383,227,1.383,228,1.383,229,1.383,230,1.383,231,2.172,232,1.383,233,1.383,234,1.383,235,1.383,236,1.383,237,1.383,238,2.172,239,1.383,240,1.383,241,1.383,242,1.383,243,1.383,244,1.383,245,1.383,246,1.383,247,1.383,248,1.383,249,3.669,250,1.383,251,1.383,252,1.383,253,2.172,254,1.383,255,2.172,256,2.172,257,1.383,258,1.383,259,3.041,260,2.172,261,1.383,262,1.383,263,1.383,264,1.69,265,1.383,266,2.172,267,2.683,268,1.383,269,1.383,270,1.383,271,1.383,272,1.383,273,1.383,274,1.383,275,1.383,276,1.383,277,1.383,278,1.383,279,1.383,280,1.383,281,1.383,282,2.172,283,2.172,284,1.383,285,1.383,286,1.383,287,1.383,288,1.383,289,1.383,290,1.383,291,1.383,292,1.383,293,1.383,294,1.383,295,1.383,296,2.172,297,3.508,298,1.383,299,1.383,300,1.383,301,3.305,302,2.172,303,1.383,304,1.383,305,2.172,306,1.383,307,1.383,308,0.874,309,1.383,310,1.383,311,1.383,312,1.383,313,1.076]],["title/license.html",[166,1.309,167,1.083,212,1.309]],["body/license.html",[4,0.474,12,0.048,37,0.048,38,0.048,173,1.509,180,1.858,212,1.509,264,2.526,313,2.526,314,3.688,315,2.388,316,2.388,317,3.246,318,2.388,319,2.388,320,2.388,321,2.388,322,3.246,323,2.388,324,3.957,325,4.505,326,2.388,327,3.246,328,3.688,329,2.388,330,3.688,331,3.246,332,2.388,333,2.388,334,2.388,335,2.388,336,2.388,337,2.388,338,2.388,339,2.388,340,2.388,341,2.388,342,2.388,343,2.388,344,2.388,345,2.388,346,3.246,347,3.246,348,2.388,349,2.388,350,2.388,351,3.246,352,2.388,353,2.388,354,2.388,355,2.388,356,2.388,357,2.388,358,2.388,359,2.388,360,2.388,361,2.388,362,2.388,363,2.388,364,2.388,365,2.388,366,2.388,367,2.388,368,2.388,369,2.388,370,2.388,371,2.388,372,2.388,373,2.388,374,2.388]],["title/modules.html",[308,2.09]],["body/modules.html",[12,0.063,37,0.063,38,0.063,308,2.357]],["title/overview.html",[375,2.573]],["body/overview.html",[0,0.05,12,0.062,20,1.904,37,0.062,38,0.062,375,2.833,376,3.641,377,3.641]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0.0.1",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":183,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":179,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":181,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":377,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":310,"title":{},"body":{"index.html":{}}}],["2",{"_index":223,"title":{},"body":{"index.html":{}}}],["2018",{"_index":180,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["30",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":182,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":191,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":376,"title":{},"body":{"overview.html":{}}}],["8000",{"_index":299,"title":{},"body":{"index.html":{}}}],["_",{"_index":96,"title":{},"body":{"classes/RestModel.html":{}}}],["_base",{"_index":60,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModelCollection.html":{}}}],["_http",{"_index":16,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{}}}],["_rout",{"_index":28,"title":{},"body":{"classes/Base.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"interfaces/Route.html":{}}}],["_thi",{"_index":92,"title":{},"body":{"classes/RestModel.html":{}}}],["_this[key",{"_index":98,"title":{},"body":{"classes/RestModel.html":{}}}],["abov",{"_index":345,"title":{},"body":{"license.html":{}}}],["action",{"_index":368,"title":{},"body":{"license.html":{}}}],["addparent(currentroute.par",{"_index":109,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["addparent(par",{"_index":112,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["again",{"_index":277,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":338,"title":{},"body":{"license.html":{}}}],["angular",{"_index":222,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":18,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"interfaces/Route.html":{},"index.html":{}}}],["angular/cor",{"_index":190,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angularj",{"_index":224,"title":{},"body":{"index.html":{}}}],["api",{"_index":216,"title":{},"body":{"index.html":{}}}],["app",{"_index":266,"title":{},"body":{"index.html":{}}}],["appli",{"_index":199,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applymixin",{"_index":82,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["applymixin(appli",{"_index":197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applymixin(thi",{"_index":84,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["arg",{"_index":204,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aris",{"_index":372,"title":{},"body":{"license.html":{}}}],["array",{"_index":42,"title":{},"body":{"classes/Collection.html":{},"classes/RestModelCollection.html":{}}}],["array(...item",{"_index":133,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["array.prototyp",{"_index":127,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["associ",{"_index":326,"title":{},"body":{"license.html":{}}}],["author",{"_index":361,"title":{},"body":{"license.html":{}}}],["auto",{"_index":283,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":312,"title":{},"body":{"index.html":{}}}],["base",{"_index":1,"title":{"classes/Base.html":{}},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"miscellaneous/functions.html":{}}}],["baseurl",{"_index":257,"title":{},"body":{"index.html":{}}}],["becom",{"_index":311,"title":{},"body":{"index.html":{}}}],["bind",{"_index":226,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":229,"title":{},"body":{"index.html":{}}}],["bump",{"_index":306,"title":{},"body":{"index.html":{}}}],["c",{"_index":315,"title":{},"body":{"license.html":{}}}],["chang",{"_index":169,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":168,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":321,"title":{},"body":{"license.html":{}}}],["claim",{"_index":364,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{},"overview.html":{}}}],["collect",{"_index":39,"title":{"classes/Collection.html":{}},"body":{"classes/Collection.html":{}}}],["commit",{"_index":177,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":286,"title":{},"body":{"index.html":{}}}],["compon",{"_index":267,"title":{},"body":{"index.html":{}}}],["condit",{"_index":344,"title":{},"body":{"license.html":{}}}],["connect",{"_index":374,"title":{},"body":{"license.html":{}}}],["const",{"_index":86,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":6,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["constructor(_http",{"_index":7,"title":{},"body":{"classes/Base.html":{}}}],["constructor(bas",{"_index":72,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["constructor(http",{"_index":52,"title":{},"body":{"classes/RestBase.html":{}}}],["constructor(item",{"_index":43,"title":{},"body":{"classes/Collection.html":{}}}],["content",{"_index":209,"title":{},"body":{"index.html":{}}}],["continu",{"_index":304,"title":{},"body":{"index.html":{}}}],["contract",{"_index":369,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":241,"title":{},"body":{"index.html":{}}}],["copi",{"_index":324,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":314,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":236,"title":{},"body":{"index.html":{}}}],["creat",{"_index":231,"title":{},"body":{"index.html":{}}}],["current",{"_index":293,"title":{},"body":{"index.html":{}}}],["currentrout",{"_index":107,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["currentroute.par",{"_index":110,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["damag",{"_index":365,"title":{},"body":{"license.html":{}}}],["data",{"_index":36,"title":{},"body":{"classes/Base.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["data).pip",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["data.map(d",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{}}}],["deal",{"_index":327,"title":{},"body":{"license.html":{}}}],["defin",{"_index":9,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":69,"title":{},"body":{"classes/RestModel.html":{}}}],["demo",{"_index":206,"title":{},"body":{"index.html":{}}}],["democompon",{"_index":271,"title":{},"body":{"index.html":{}}}],["depend",{"_index":188,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":221,"title":{},"body":{"index.html":{}}}],["desir",{"_index":253,"title":{},"body":{"index.html":{}}}],["dev",{"_index":292,"title":{},"body":{"index.html":{}}}],["develop",{"_index":211,"title":{},"body":{"index.html":{}}}],["direct",{"_index":262,"title":{},"body":{"index.html":{}}}],["directori",{"_index":294,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":336,"title":{},"body":{"license.html":{}}}],["document",{"_index":173,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":244,"title":{},"body":{"index.html":{}}}],["environ",{"_index":289,"title":{},"body":{"index.html":{}}}],["event",{"_index":360,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":214,"title":{},"body":{"index.html":{}}}],["export",{"_index":19,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["express",{"_index":353,"title":{},"body":{"license.html":{}}}],["extend",{"_index":41,"title":{},"body":{"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":263,"title":{},"body":{"index.html":{}}}],["find",{"_index":281,"title":{},"body":{"index.html":{}}}],["first",{"_index":186,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":356,"title":{},"body":{"license.html":{}}}],["follow",{"_index":343,"title":{},"body":{"license.html":{}}}],["free",{"_index":320,"title":{},"body":{"license.html":{}}}],["fun",{"_index":218,"title":{},"body":{"index.html":{}}}],["function",{"_index":111,"title":{"miscellaneous/functions.html":{}},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":341,"title":{},"body":{"license.html":{}}}],["gener",{"_index":284,"title":{},"body":{"index.html":{}}}],["get",{"_index":166,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getbaseurl",{"_index":30,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{}}}],["getdefaulthead",{"_index":32,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{}}}],["getfullpath",{"_index":105,"title":{},"body":{"classes/RestModel.html":{}}}],["getfullpath(id",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":135,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["geton",{"_index":136,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":141,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":70,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{}}}],["getpost",{"_index":272,"title":{},"body":{"index.html":{}}}],["grant",{"_index":319,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":178,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":87,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["help",{"_index":247,"title":{},"body":{"index.html":{}}}],["here",{"_index":260,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":318,"title":{},"body":{"license.html":{}}}],["highli",{"_index":213,"title":{},"body":{"index.html":{}}}],["hit",{"_index":309,"title":{},"body":{"index.html":{}}}],["holder",{"_index":362,"title":{},"body":{"license.html":{}}}],["http",{"_index":54,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["httpclient",{"_index":8,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"interfaces/Route.html":{},"index.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":258,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":207,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":237,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":220,"title":{},"body":{"index.html":{}}}],["id",{"_index":24,"title":{},"body":{"classes/Base.html":{},"classes/RestModel.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{}}}],["idea",{"_index":238,"title":{},"body":{"index.html":{}}}],["ignor",{"_index":124,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["implement",{"_index":120,"title":{},"body":{"classes/RestModelCollection.html":{},"changelog.html":{},"index.html":{}}}],["impli",{"_index":354,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["includ",{"_index":330,"title":{},"body":{"license.html":{}}}],["index",{"_index":50,"title":{"index.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{}}}],["inherit",{"_index":79,"title":{},"body":{"classes/RestModel.html":{}}}],["inject",{"_index":255,"title":{},"body":{"index.html":{}}}],["insid",{"_index":228,"title":{},"body":{"index.html":{}}}],["instal",{"_index":210,"title":{},"body":{"index.html":{}}}],["interfac",{"_index":20,"title":{"interfaces/Route.html":{}},"body":{"classes/Base.html":{},"interfaces/Route.html":{},"overview.html":{}}}],["it'",{"_index":233,"title":{},"body":{"index.html":{}}}],["item",{"_index":46,"title":{},"body":{"classes/Collection.html":{},"classes/RestModelCollection.html":{}}}],["key",{"_index":94,"title":{},"body":{"classes/RestModel.html":{}}}],["key.charat(0",{"_index":95,"title":{},"body":{"classes/RestModel.html":{}}}],["kind",{"_index":352,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":366,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":363,"title":{},"body":{"license.html":{}}}],["lib",{"_index":232,"title":{},"body":{"index.html":{}}}],["licens",{"_index":212,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":239,"title":{},"body":{"index.html":{}}}],["limit",{"_index":331,"title":{},"body":{"license.html":{}}}],["link",{"_index":217,"title":{},"body":{"index.html":{}}}],["local",{"_index":291,"title":{},"body":{"index.html":{}}}],["log",{"_index":170,"title":{},"body":{"changelog.html":{}}}],["m.getplain",{"_index":132,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["mail",{"_index":245,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["makerestcollection(data",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":145,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["map((respons",{"_index":149,"title":{},"body":{"classes/RestRoute.html":{}}}],["map(respons",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":35,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{},"index.html":{}}}],["match",{"_index":38,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["mayb",{"_index":235,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":355,"title":{},"body":{"license.html":{}}}],["merg",{"_index":334,"title":{},"body":{"license.html":{}}}],["method",{"_index":51,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["miscellan",{"_index":192,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":313,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":73,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["model.id",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["models/post",{"_index":256,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":333,"title":{},"body":{"license.html":{}}}],["modul",{"_index":308,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["name",{"_index":13,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":246,"title":{},"body":{"index.html":{}}}],["new",{"_index":64,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["ngx",{"_index":205,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":290,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":359,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":346,"title":{},"body":{"license.html":{}}}],["npm",{"_index":249,"title":{},"body":{"index.html":{}}}],["number",{"_index":25,"title":{},"body":{"classes/Base.html":{},"classes/RestModel.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{}}}],["object",{"_index":201,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object.assign(_thi",{"_index":93,"title":{},"body":{"classes/RestModel.html":{}}}],["object.assign(proto",{"_index":128,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["object.assign(thi",{"_index":85,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{}}}],["object.getprototypeof(bas",{"_index":125,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["object.getprototypeof(thi",{"_index":100,"title":{},"body":{"classes/RestModel.html":{}}}],["object.setprototypeof(plain",{"_index":103,"title":{},"body":{"classes/RestModel.html":{}}}],["object.setprototypeof(proto",{"_index":126,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["object.setprototypeof(thi",{"_index":130,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["observ",{"_index":76,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":323,"title":{},"body":{"license.html":{}}}],["on",{"_index":265,"title":{},"body":{"index.html":{}}}],["onc",{"_index":302,"title":{},"body":{"index.html":{}}}],["option",{"_index":15,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"miscellaneous/functions.html":{}}}],["otherwis",{"_index":371,"title":{},"body":{"license.html":{}}}],["out",{"_index":373,"title":{},"body":{"license.html":{}}}],["overview",{"_index":375,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":187,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":307,"title":{},"body":{"index.html":{}}}],["paramet",{"_index":11,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":26,"title":{},"body":{"classes/Base.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{}}}],["parent.id",{"_index":114,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["parent.path",{"_index":113,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["parentrout",{"_index":138,"title":{},"body":{"classes/RestRoute.html":{}}}],["parenturl",{"_index":106,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":357,"title":{},"body":{"license.html":{}}}],["path",{"_index":22,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["peer",{"_index":189,"title":{},"body":{"dependencies.html":{}}}],["permiss",{"_index":317,"title":{},"body":{"license.html":{}}}],["permit",{"_index":340,"title":{},"body":{"license.html":{}}}],["person",{"_index":322,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":148,"title":{},"body":{"classes/RestRoute.html":{}}}],["plain",{"_index":91,"title":{},"body":{"classes/RestModel.html":{}}}],["plain[key",{"_index":97,"title":{},"body":{"classes/RestModel.html":{}}}],["pleas",{"_index":242,"title":{},"body":{"index.html":{}}}],["port",{"_index":298,"title":{},"body":{"index.html":{}}}],["portion",{"_index":349,"title":{},"body":{"license.html":{}}}],["post",{"_index":137,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["post(data",{"_index":143,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":278,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":288,"title":{},"body":{"index.html":{}}}],["privat",{"_index":104,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":172,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":68,"title":{},"body":{"classes/RestModel.html":{},"interfaces/Route.html":{}}}],["protect",{"_index":27,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"interfaces/Route.html":{},"index.html":{}}}],["proto",{"_index":99,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{}}}],["proto[key",{"_index":102,"title":{},"body":{"classes/RestModel.html":{}}}],["prototyp",{"_index":227,"title":{},"body":{"index.html":{}}}],["provid",{"_index":350,"title":{},"body":{"license.html":{}}}],["publish",{"_index":335,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":358,"title":{},"body":{"license.html":{}}}],["put",{"_index":71,"title":{},"body":{"classes/RestModel.html":{}}}],["releas",{"_index":305,"title":{},"body":{"index.html":{}}}],["reload",{"_index":300,"title":{},"body":{"index.html":{}}}],["repo",{"_index":295,"title":{},"body":{"index.html":{}}}],["request",{"_index":34,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{},"index.html":{}}}],["requestinterceptor(req",{"_index":33,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{}}}],["respons",{"_index":261,"title":{},"body":{"index.html":{}}}],["response.getplain",{"_index":276,"title":{},"body":{"index.html":{}}}],["response[0].route('com",{"_index":279,"title":{},"body":{"index.html":{}}}],["rest",{"_index":194,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":219,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":259,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":268,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":48,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"index.html":{}}}],["restbase:15",{"_index":80,"title":{},"body":{"classes/RestModel.html":{}}}],["restful(arg",{"_index":203,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restmodel",{"_index":66,"title":{"classes/RestModel.html":{}},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["restmodel(this.bas",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodel.prototyp",{"_index":101,"title":{},"body":{"classes/RestModel.html":{}}}],["restmodel/doc",{"_index":287,"title":{},"body":{"index.html":{}}}],["restmodelcollect",{"_index":118,"title":{"classes/RestModelCollection.html":{}},"body":{"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["restmodelcollection(this.bas",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelcollection.prototyp",{"_index":129,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["restmodelthen",{"_index":251,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":329,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":59,"title":{"classes/RestRoute.html":{}},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["restroute(this._bas",{"_index":65,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":37,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["right",{"_index":332,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":316,"title":{},"body":{"license.html":{}}}],["rout",{"_index":21,"title":{"interfaces/Route.html":{}},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":55,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{}}}],["route.id",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["run",{"_index":297,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":81,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["rxjs/oper",{"_index":146,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":250,"title":{},"body":{"index.html":{}}}],["see",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":269,"title":{},"body":{"index.html":{}}}],["sell",{"_index":339,"title":{},"body":{"license.html":{}}}],["send",{"_index":243,"title":{},"body":{"index.html":{}}}],["server",{"_index":296,"title":{},"body":{"index.html":{}}}],["servic",{"_index":252,"title":{},"body":{"index.html":{}}}],["shall",{"_index":347,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":325,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["src/.../restful.t",{"_index":195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.t",{"_index":193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/base.t",{"_index":5,"title":{},"body":{"classes/Base.html":{},"interfaces/Route.html":{}}}],["src/base.ts:10",{"_index":10,"title":{},"body":{"classes/Base.html":{}}}],["src/classes/collection.t",{"_index":40,"title":{},"body":{"classes/Collection.html":{}}}],["src/classes/collection.ts:1",{"_index":45,"title":{},"body":{"classes/Collection.html":{}}}],["src/classes/restbase.t",{"_index":49,"title":{},"body":{"classes/RestBase.html":{}}}],["src/classes/restbase.ts:15",{"_index":56,"title":{},"body":{"classes/RestBase.html":{}}}],["src/classes/restbase.ts:7",{"_index":53,"title":{},"body":{"classes/RestBase.html":{}}}],["src/classes/restmodel.t",{"_index":67,"title":{},"body":{"classes/RestModel.html":{}}}],["src/classes/restmodel.ts:19",{"_index":78,"title":{},"body":{"classes/RestModel.html":{}}}],["src/classes/restmodel.ts:24",{"_index":75,"title":{},"body":{"classes/RestModel.html":{}}}],["src/classes/restmodel.ts:29",{"_index":77,"title":{},"body":{"classes/RestModel.html":{}}}],["src/classes/restmodel.ts:7",{"_index":74,"title":{},"body":{"classes/RestModel.html":{}}}],["src/classes/restmodelcollection.t",{"_index":119,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["src/classes/restmodelcollection.ts:23",{"_index":122,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["src/classes/restmodelcollection.ts:8",{"_index":121,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["src/classes/restroute.t",{"_index":134,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/classes/restroute.ts:15",{"_index":140,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/classes/restroute.ts:22",{"_index":142,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/classes/restroute.ts:29",{"_index":144,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/classes/restroute.ts:7",{"_index":139,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/decorators/restful.t",{"_index":202,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/index",{"_index":254,"title":{},"body":{"index.html":{}}}],["src/utils.t",{"_index":196,"title":{},"body":{"miscellaneous/functions.html":{}}}],["standard",{"_index":175,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":167,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":215,"title":{},"body":{"index.html":{}}}],["string",{"_index":23,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"index.html":{}}}],["subject",{"_index":342,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":337,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":280,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":274,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":348,"title":{},"body":{"license.html":{}}}],["super(...item",{"_index":47,"title":{},"body":{"classes/Collection.html":{}}}],["super(base._http",{"_index":83,"title":{},"body":{"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["super(http",{"_index":61,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["t",{"_index":44,"title":{},"body":{"classes/Collection.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":208,"title":{},"body":{"index.html":{}}}],["templat",{"_index":270,"title":{},"body":{"index.html":{}}}],["test",{"_index":301,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":303,"title":{},"body":{"index.html":{}}}],["this._bas",{"_index":62,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{}}}],["this._http.get(this.getfullpath",{"_index":147,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._http.get(this.getfullpath(id",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._http.post(this.getfullpath",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._http.put(this.getfullpath",{"_index":89,"title":{},"body":{"classes/RestModel.html":{}}}],["this._rout",{"_index":29,"title":{},"body":{"classes/Base.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{}}}],["this._route.path",{"_index":116,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["this.getbaseurl",{"_index":115,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["this.getdefaulthead",{"_index":88,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["this.getplain",{"_index":90,"title":{},"body":{"classes/RestModel.html":{}}}],["this.id",{"_index":117,"title":{},"body":{"classes/RestModel.html":{}}}],["this.makerest(d",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerestcollection(respons",{"_index":150,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.map(m",{"_index":131,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["this.mapmodel(this.path",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":275,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":273,"title":{},"body":{"index.html":{}}}],["through",{"_index":248,"title":{},"body":{"index.html":{}}}],["tort",{"_index":370,"title":{},"body":{"license.html":{}}}],["tri",{"_index":230,"title":{},"body":{"index.html":{}}}],["ts",{"_index":123,"title":{},"body":{"classes/RestModelCollection.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/Base.html":{},"classes/Collection.html":{},"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestModelCollection.html":{},"classes/RestRoute.html":{},"interfaces/Route.html":{},"miscellaneous/functions.html":{}}}],["undefin",{"_index":198,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uniqueprototyp",{"_index":57,"title":{},"body":{"classes/RestBase.html":{},"miscellaneous/functions.html":{}}}],["uniqueprototype(object",{"_index":200,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uniqueprototype(thi",{"_index":63,"title":{},"body":{"classes/RestBase.html":{}}}],["us",{"_index":264,"title":{},"body":{"index.html":{},"license.html":{}}}],["util",{"_index":58,"title":{},"body":{"classes/RestBase.html":{},"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["veri",{"_index":234,"title":{},"body":{"index.html":{}}}],["version",{"_index":176,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":285,"title":{},"body":{"index.html":{}}}],["view",{"_index":282,"title":{},"body":{"index.html":{}}}],["want",{"_index":240,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":351,"title":{},"body":{"license.html":{}}}],["whether",{"_index":367,"title":{},"body":{"license.html":{}}}],["while(currentroute.par",{"_index":108,"title":{},"body":{"classes/RestModel.html":{},"classes/RestRoute.html":{}}}],["wish",{"_index":225,"title":{},"body":{"index.html":{}}}],["without",{"_index":328,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Base.html":{"url":"classes/Base.html","title":"class - Base","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Base\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/base.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\n\nexport interface Route {\n  path: string,\n  id?: number,\n  parent?: Route\n}\n\nexport class Base {\n  protected _route: Route;\n\n  constructor (protected _http: HttpClient) {\n    this._route = {\n      path: ''\n    };\n  }\n\n  protected getBaseUrl(): string {\n    return '';\n  }\n\n  protected getDefaultHeaders() {\n    return {};\n  }\n\n  protected requestInterceptor(req: Request) {\n  }\n\n  protected mapModel(route: string, data: any) {\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Collection.html":{"url":"classes/Collection.html","title":"class - Collection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Collection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/classes/Collection.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(items: T[])\n                    \n                \n                        \n                            \n                                Defined in src/classes/Collection.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        items\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Collection extends Array {\n  constructor (items: T[]) {\n    super(...items);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/classes/restBase.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Base\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/classes/restBase.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restBase.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { uniquePrototype } from '../utils';\nimport { RestRoute } from '../index';\nimport { Base } from '../base';\n\nexport class RestBase extends Base {\n  protected _base: RestBase;\n\n  constructor (http: HttpClient) {\n    super(http);\n    this._base = this;\n    uniquePrototype(this);\n  }\n\n  route(path: string) {\n    return new RestRoute(this._base, this._route, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModel.html":{"url":"classes/RestModel.html","title":"class - RestModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/classes/restModel.ts\n        \n\n\n            \n                Extends\n            \n            \n                    RestBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: any, _route: Route, model: T)\n                    \n                \n                        \n                            \n                                Defined in src/classes/restModel.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        _route\n                                                  \n                                                        \n                                                                    Route\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/classes/restModel.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restModel.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restModel.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restModel.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestBase\n\n                                \n                            \n                        \n                            \n                                    Defined in RestBase:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { applyMixin } from '../utils';\nimport { RestBase } from '../index';\nimport { Route } from '../base';\n\nexport class RestModel extends RestBase {\n  id?: number;\n\n  constructor (base: any, _route: Route, model: T) {\n    super(base._http);\n\n    applyMixin(this, [base, model]);\n    Object.assign(this, base, model);\n\n    this._route = { ..._route };\n    this._base = base;\n  }\n\n  put(): Observable {\n    const headers = this.getDefaultHeaders();\n    return this._http.put(this.getFullPath(), { headers }, this.getPlain());\n  }\n\n  delete(): Observable {\n    const headers = this.getDefaultHeaders();\n    return this._http.put(this.getFullPath(), { headers }, this.getPlain());\n  }\n\n  getPlain() {\n    const plain: any = {};\n    const _this: any = {};\n    Object.assign(_this, this);\n\n    for (const key in _this) {\n      if (key.charAt(0) !== '_') {\n        plain[key] = _this[key];\n      }\n    }\n\n    const proto: any = {...Object.getPrototypeOf(this)};\n    for (const key in RestModel.prototype) {\n      if (key) {\n        delete proto[key];\n      }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain as T;\n  }\n\n  private getFullPath() {\n    let parentUrl = '';\n    let currentRoute = this._route;\n\n    while(currentRoute.parent) {\n      addParent(currentRoute.parent);\n      currentRoute = currentRoute.parent;\n    }\n\n    function addParent(parent: Route) {\n      if (parent.path !== '') {\n        if (parent.id) {\n          parentUrl = '/' + parent.id + parentUrl;\n        }\n        parentUrl = '/' + parent.path + parentUrl;\n      }\n    }\n\n    return this.getBaseUrl() + '/'\n      + (parentUrl !== '' ? parentUrl + '/': '')\n      + this._route.path + '/'\n      + this.id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelCollection.html":{"url":"classes/RestModelCollection.html","title":"class - RestModelCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/classes/restModelCollection.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n            \n                Implements\n            \n            \n                        RestBase\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPlain\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: any, _route: Route, items: any[])\n                    \n                \n                        \n                            \n                                Defined in src/classes/restModelCollection.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        _route\n                                                  \n                                                        \n                                                                    Route\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        items\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restModelCollection.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { RestBase } from './restBase';\nimport { RestModel } from './restModel';\nimport { Route } from '../base';\n\n// @ts-ignore\nexport class RestModelCollection extends Array & T> implements RestBase {\n  private _route: Route;\n  private _base: any;\n\n  constructor (base: any, _route: Route, items: any[]) {\n    super(base._http);\n\n    const proto = Object.getPrototypeOf(base);\n    Object.setPrototypeOf(proto, Array.prototype);\n    Object.assign(proto, RestModelCollection.prototype);\n    Object.setPrototypeOf(this, proto);\n    Object.assign(this, { ...items });\n\n    this._route = { ..._route };\n    this._base = base;\n  }\n\n  getPlain() {\n    const items = this.map(m => m.getPlain());\n    return Array(...items);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/classes/restRoute.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Base\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: any, parentRoute: Route, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/classes/restRoute.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentRoute\n                                                  \n                                                        \n                                                                    Route\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restRoute.ts:15\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restRoute.ts:22\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable<>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/classes/restRoute.ts:29\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable<>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { RestModel, RestModelCollection } from '../index';\nimport { applyMixin } from '../utils';\nimport { Base, Route } from '../base';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RestRoute extends Base {\n  constructor (private base: any, parentRoute: Route, private path: string) {\n    super(base._http);\n    applyMixin(this, [base]);\n    const parent = parentRoute;\n    this._route = { path, parent };\n  }\n\n  getList(): Observable> {\n    const headers = this.getDefaultHeaders();\n    return this._http.get(this.getFullPath(), { headers }).pipe>(\n      map((response: any[]) => this.makeRestCollection(response))\n    );\n  }\n\n  getOne(id: number): Observable & T> {\n    const headers = this.getDefaultHeaders();\n    return this._http.get(this.getFullPath(id), { headers }).pipe & T>(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  post(data: any): Observable & T> {\n    const headers = this.getDefaultHeaders();\n    return this._http.post(this.getFullPath(), { headers }, data).pipe & T>(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  private makeRest(data: any) {\n    const model = this.mapModel(this.path, data);\n    const route = { ...this._route };\n    route.id = model.id;\n    return new RestModel(this.base, route, model);\n  }\n\n  private makeRestCollection(data: any[]) {\n    const models = data.map(d => this.makeRest(d));\n    const route = { ...this._route };\n    return new RestModelCollection(this.base, route, models);\n  }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '';\n    let currentRoute = this._route;\n\n    while(currentRoute.parent) {\n      addParent(currentRoute.parent);\n      currentRoute = currentRoute.parent;\n    }\n\n    function addParent(parent: Route) {\n      if (parent.path !== '') {\n        if (parent.id) {\n          parentUrl = '/' + parent.id + parentUrl;\n        }\n        parentUrl = '/' + parent.path + parentUrl;\n      }\n    }\n\n    return this.getBaseUrl() + '/'\n      + (parentUrl !== '' ? parentUrl + '/': '')\n      + this._route.path + '/'\n      + (id ? id : '');\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Route.html":{"url":"interfaces/Route.html","title":"interface - Route","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Route\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Route\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\n\nexport interface Route {\n  path: string,\n  id?: number,\n  parent?: Route\n}\n\nexport class Base {\n  protected _route: Route;\n\n  constructor (protected _http: HttpClient) {\n    this._route = {\n      path: ''\n    };\n  }\n\n  protected getBaseUrl(): string {\n    return '';\n  }\n\n  protected getDefaultHeaders() {\n    return {};\n  }\n\n  protected requestInterceptor(req: Request) {\n  }\n\n  protected mapModel(route: string, data: any) {\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.0.3 (2018-07-31)\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=5.0.0 \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyMixin   (src/.../utils.ts)\n                        \n                        \n                            Restful   (src/.../restful.ts)\n                        \n                        \n                            uniquePrototype   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            applyMixin\n                            \n                            \n                        \n                    \n                \n                \n                    \napplyMixin(apply: any, base: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apply\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        base\n                                                        \n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uniquePrototype\n                            \n                            \n                        \n                    \n                \n                \n                    \nuniquePrototype(object: any)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/decorators/restful.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/ not implemented yet\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still on developing]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since on AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So I tried to create this lib.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the Idea.\nIf you liked the idea and want to contribute, please send me an e-mail (I need help).\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source. not implemented yet\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/ not implemented yet\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        6 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 interface\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
