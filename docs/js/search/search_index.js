var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/AbstractBase.html",[0,0.492,1,1.298]],["body/interfaces/AbstractBase.html",[0,0.461,1,1.483,2,0.548,3,0.454,4,0.372,5,0.953,6,0.299,7,1.215,8,1.157,9,1.749,10,1.157,11,1.901,12,1.901,13,1.157,14,1.483,15,1.508,16,1.489,17,0.073,18,1.234,19,1.508,20,1.792,21,1.508,22,0.657,23,0.657,24,1.036,25,0.454,26,0.548,27,1.5,28,1.388,29,1.388,30,0.657,31,1.792,32,0.788,33,0.7,34,0.657,35,1.215,36,1.792,37,0.234,38,0.788,39,0.788,40,0.657,41,1.666,42,1.173,43,1.013,44,2.636,45,1.808,46,1.808,47,1.808,48,1.173,49,1.173,50,1.173,51,1.173,52,1.808,53,1.5,54,1.469,55,1.792,56,1.469,57,1.173,58,1.173,59,2.479,60,1.173,61,1.808,62,1.808,63,1.173,64,1.173,65,1.469,66,1.808,67,1.808,68,1.173,69,1.173,70,2.298,71,1.173,72,0.548,73,0.953,74,1.469,75,0.953,76,0.953,77,0.953,78,1.236,79,0.953,80,0.953,81,1.792,82,0.953,83,1.173,84,1.173,85,0.953,86,1.173,87,1.173,88,1.173,89,0.034,90,0.034]],["title/interfaces/Resource.html",[0,0.492,9,1.081]],["body/interfaces/Resource.html",[0,0.757,2,1.111,3,0.921,4,0.755,6,0.607,7,1.995,9,1.951,17,0.068,18,1.251,24,1.251,25,1.31,26,1.581,33,0.921,38,2.276,39,2.173,89,0.056,90,0.056,91,3.059,92,3.386]],["title/classes/RestBase.html",[37,0.384,93,1.569]],["body/classes/RestBase.html",[2,0.866,3,0.718,4,0.588,6,0.473,8,1.178,10,1.178,11,2.068,12,2.068,13,1.178,14,2.068,16,1.585,17,0.072,18,1.337,20,2.05,22,1.413,23,1.413,24,1.109,25,0.976,26,1.178,27,1.413,28,1.723,29,1.413,30,1.039,33,0.718,37,0.502,40,1.413,43,1.413,53,1.039,89,0.048,90,0.048,93,2.05,94,2.385,95,2.385,96,2.385,97,2.385,98,2.385,99,2.385,100,2.385,101,2.868,102,2.385,103,1.856,104,1.856,105,1.508,106,2.385]],["title/classes/RestModelBase.html",[35,1.298,37,0.384]],["body/classes/RestModelBase.html",[0,0.287,1,1.63,2,0.526,3,0.436,4,0.357,5,0.915,6,0.287,7,1.178,8,0.526,9,1.359,10,1.132,11,1.445,12,1.445,13,1.132,14,1.87,16,1.499,17,0.073,18,1.194,20,1.747,22,0.981,23,0.981,24,1.017,25,0.678,26,0.526,27,1.472,28,0.981,29,1.359,30,0.631,31,2.135,32,0.757,33,0.678,34,0.631,35,1.445,36,2.26,37,0.349,38,1.63,39,1.445,40,0.981,41,1.63,42,1.752,43,1.359,44,2.609,45,1.752,46,1.752,47,1.752,48,1.127,49,1.127,50,1.127,51,1.127,52,2.628,53,1.472,54,1.423,55,1.747,56,1.423,57,1.127,58,1.127,59,2.905,60,1.127,61,2.628,62,1.752,63,1.127,64,1.127,65,1.423,66,1.752,67,1.752,68,1.127,69,1.127,70,2.26,71,1.127,72,0.526,73,0.915,74,1.423,75,0.915,76,0.915,77,0.915,78,1.204,79,0.915,80,0.915,81,1.747,82,0.915,83,1.127,84,1.127,85,0.915,86,1.127,87,1.127,88,1.127,89,0.033,90,0.033,107,1.448,108,2.252,109,1.448,110,1.448,111,1.448,112,1.448]],["title/classes/RestRoute.html",[27,1.081,37,0.384]],["body/classes/RestRoute.html",[0,0.232,1,1.447,2,0.426,3,0.353,4,0.289,6,0.232,8,0.691,9,1.497,10,0.691,11,0.995,12,0.995,13,0.873,14,1.447,16,1.465,17,0.073,18,1.145,22,1.421,23,1.047,24,1.034,25,0.724,26,1.005,27,0.829,28,1.047,29,1.497,30,0.511,31,2.171,32,0.613,33,0.353,34,1.047,35,0.613,36,1.519,37,0.295,38,1.447,39,1.447,40,0.829,41,1.935,43,1.421,44,2.651,53,1.206,54,1.519,55,1.519,56,1.203,65,1.749,70,2.061,72,0.691,73,0.741,74,1.203,75,0.741,76,0.741,77,0.741,78,1.047,79,0.741,80,0.741,81,1.203,82,0.741,85,1.519,89,0.028,90,0.028,92,0.912,104,1.481,105,1.203,113,1.172,114,2.153,115,1.903,116,1.203,117,1.172,118,1.172,119,1.172,120,1.903,121,1.172,122,1.481,123,1.172,124,1.903,125,1.481,126,0.912,127,1.172,128,1.172,129,1.172,130,1.903,131,2.404,132,1.172,133,1.172,134,1.172,135,1.172,136,1.172,137,1.903,138,1.172,139,1.172,140,1.172,141,1.903,142,1.172,143,1.172,144,2.153,145,1.172,146,1.172,147,1.172,148,1.172,149,1.172,150,1.903,151,1.903,152,1.172,153,1.903,154,2.404,155,1.172,156,1.172,157,1.172,158,1.172,159,1.903,160,1.903,161,1.172,162,1.172,163,1.172,164,1.172,165,1.172,166,1.172,167,1.172,168,1.172,169,1.172,170,1.172,171,1.172]],["title/interfaces/RestfulOptions.html",[0,0.492,172,1.931]],["body/interfaces/RestfulOptions.html",[0,0.71,2,1.005,3,0.833,4,0.683,6,0.549,7,1.872,16,1.523,17,0.072,18,1.194,24,1.077,25,1.263,33,1.077,53,1.828,72,1.005,78,1.828,89,0.053,90,0.053,172,3.087,173,2.153,174,1.749,175,2.153,176,3.579,177,3.579,178,2.767,179,3.579,180,2.767]],["title/changelog.html",[181,1.328,182,1.098,183,2.1]],["body/changelog.html",[4,0.707,8,1.329,10,1.041,13,1.041,17,0.054,37,0.444,89,0.054,90,0.054,116,2.314,184,3.661,185,2.866,186,2.866,187,2.866,188,1.811,189,2.866,190,2.866,191,2.23,192,3.661,193,2.866,194,2.866,195,3.417,196,2.866,197,2.866,198,3.661,199,4.034,200,2.866,201,2.866,202,3.307,203,2.866,204,2.866,205,2.866,206,4.25,207,3.661,208,2.866,209,2.866,210,2.23,211,2.866,212,2.866,213,2.866,214,2.866,215,2.866,216,3.661,217,2.23,218,2.866,219,2.866]],["title/dependencies.html",[220,2.1,221,1.877]],["body/dependencies.html",[17,0.068,32,1.905,89,0.062,90,0.062,125,2.834,221,2.302,222,3.642,223,3.642]],["title/miscellaneous/functions.html",[72,1.078,224,1.098]],["body/miscellaneous/functions.html",[6,0.698,17,0.065,22,1.533,23,1.533,25,1.059,72,1.278,89,0.061,90,0.061,173,2.738,174,2.625,175,2.738,224,1.84,225,3.519,226,3.519,227,3.519]],["title/index.html",[6,0.417,181,1.328,182,1.098]],["body/index.html",[3,0.711,8,0.559,10,0.858,13,1.043,16,0.858,17,0.071,18,0.464,26,0.559,28,1.029,29,1.663,30,0.671,33,0.711,34,1.029,37,0.366,40,1.029,41,0.805,43,1.029,78,0.671,89,0.035,90,0.035,93,1.816,101,1.198,103,1.198,105,0.973,114,1.838,116,2.317,122,1.198,126,1.198,144,1.838,174,2.036,182,1.235,188,1.816,191,1.838,202,2.704,210,1.838,217,2.704,221,0.973,228,2.362,229,2.873,230,2.362,231,1.54,232,1.54,233,3.817,234,3.667,235,1.493,236,1.54,237,2.362,238,2.362,239,1.54,240,1.54,241,1.54,242,2.873,243,1.54,244,1.54,245,1.54,246,1.54,247,1.54,248,1.54,249,1.54,250,1.54,251,1.54,252,1.54,253,1.54,254,2.362,255,1.54,256,1.54,257,1.54,258,1.54,259,1.54,260,1.54,261,2.362,262,1.54,263,1.54,264,1.54,265,1.54,266,1.54,267,1.54,268,1.54,269,1.54,270,1.54,271,1.54,272,3.817,273,1.54,274,1.54,275,1.54,276,2.362,277,1.54,278,2.362,279,2.362,280,2.362,281,1.54,282,3.222,283,1.54,284,2.362,285,1.54,286,1.54,287,1.54,288,1.54,289,1.838,290,1.54,291,2.362,292,2.873,293,1.54,294,1.54,295,1.54,296,1.54,297,1.54,298,1.54,299,1.54,300,1.54,301,1.54,302,1.54,303,1.54,304,1.54,305,1.54,306,1.54,307,2.362,308,2.362,309,1.54,310,1.54,311,1.54,312,1.54,313,1.54,314,1.54,315,1.54,316,1.54,317,1.54,318,1.54,319,1.54,320,1.54,321,2.362,322,3.667,323,1.54,324,1.54,325,1.54,326,2.362,327,1.54,328,1.54,329,2.362,330,1.54,331,1.54,332,0.973,333,1.54,334,1.54,335,1.54,336,1.54,337,1.198]],["title/license.html",[181,1.328,182,1.098,235,1.328]],["body/license.html",[4,0.628,17,0.05,89,0.05,90,0.05,188,1.608,195,1.98,235,1.608,289,2.636,337,2.636,338,3.808,339,2.544,340,2.544,341,3.387,342,2.544,343,2.544,344,2.544,345,2.544,346,3.387,347,2.544,348,4.06,349,4.563,350,2.544,351,3.387,352,3.808,353,2.544,354,3.808,355,3.387,356,2.544,357,2.544,358,2.544,359,2.544,360,2.544,361,2.544,362,2.544,363,2.544,364,2.544,365,2.544,366,2.544,367,2.544,368,2.544,369,2.544,370,3.387,371,3.387,372,2.544,373,2.544,374,2.544,375,3.387,376,2.544,377,2.544,378,2.544,379,2.544,380,2.544,381,2.544,382,2.544,383,2.544,384,2.544,385,2.544,386,2.544,387,2.544,388,2.544,389,2.544,390,2.544,391,2.544,392,2.544,393,2.544,394,2.544,395,2.544,396,2.544,397,2.544,398,2.544]],["title/modules.html",[332,2.106]],["body/modules.html",[17,0.064,89,0.064,90,0.064,332,2.374]],["title/overview.html",[399,2.592]],["body/overview.html",[0,0.73,17,0.063,37,0.57,89,0.063,90,0.063,399,2.863,400,3.679,401,3.679]],["title/miscellaneous/typealiases.html",[224,1.098,402,2.97]],["body/miscellaneous/typealiases.html",[5,2.279,6,0.715,17,0.062,24,1.086,34,1.945,89,0.062,90,0.062,224,1.886,403,3.606,404,3.606]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":205,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":194,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":206,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":196,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":81,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["1.0",{"_index":334,"title":{},"body":{"index.html":{}}}],["10",{"_index":197,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":246,"title":{},"body":{"index.html":{}}}],["2018",{"_index":195,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":400,"title":{},"body":{"overview.html":{}}}],["30",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":207,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":401,"title":{},"body":{"overview.html":{}}}],["4.17.0",{"_index":223,"title":{},"body":{"dependencies.html":{}}}],["53ed63d",{"_index":201,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":222,"title":{},"body":{"dependencies.html":{}}}],["8000",{"_index":324,"title":{},"body":{"index.html":{}}}],["86ff926",{"_index":204,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":42,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["abov",{"_index":369,"title":{},"body":{"license.html":{}}}],["abstractbas",{"_index":1,"title":{"interfaces/AbstractBase.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["action",{"_index":392,"title":{},"body":{"license.html":{}}}],["addroute(rout",{"_index":73,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":77,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":71,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["addroute(this.base.resourc",{"_index":168,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":302,"title":{},"body":{"index.html":{}}}],["alias",{"_index":403,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":362,"title":{},"body":{"license.html":{}}}],["angular",{"_index":245,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":30,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":279,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":247,"title":{},"body":{"index.html":{}}}],["api",{"_index":239,"title":{},"body":{"index.html":{}}}],["app",{"_index":291,"title":{},"body":{"index.html":{}}}],["arg",{"_index":175,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":177,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":179,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":396,"title":{},"body":{"license.html":{}}}],["array",{"_index":128,"title":{},"body":{"classes/RestRoute.html":{}}}],["associ",{"_index":350,"title":{},"body":{"license.html":{}}}],["author",{"_index":385,"title":{},"body":{"license.html":{}}}],["auto",{"_index":308,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":336,"title":{},"body":{"index.html":{}}}],["base",{"_index":85,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["base.http",{"_index":142,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclon",{"_index":146,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.http",{"_index":148,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseclone.resourc",{"_index":151,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":78,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":80,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":82,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["becom",{"_index":335,"title":{},"body":{"index.html":{}}}],["better",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":249,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":252,"title":{},"body":{"index.html":{}}}],["bug",{"_index":198,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":330,"title":{},"body":{"index.html":{}}}],["c",{"_index":339,"title":{},"body":{"license.html":{}}}],["chang",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":183,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":345,"title":{},"body":{"license.html":{}}}],["claim",{"_index":388,"title":{},"body":{"license.html":{}}}],["class",{"_index":37,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clone",{"_index":130,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeep",{"_index":124,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeep(this.bas",{"_index":147,"title":{},"body":{"classes/RestRoute.html":{}}}],["clonedeepandunique(valu",{"_index":129,"title":{},"body":{"classes/RestRoute.html":{}}}],["commit",{"_index":192,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":311,"title":{},"body":{"index.html":{}}}],["compon",{"_index":292,"title":{},"body":{"index.html":{}}}],["condit",{"_index":368,"title":{},"body":{"license.html":{}}}],["connect",{"_index":398,"title":{},"body":{"license.html":{}}}],["const",{"_index":44,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":107,"title":{},"body":{"classes/RestModelBase.html":{}}}],["constructor(bas",{"_index":117,"title":{},"body":{"classes/RestRoute.html":{}}}],["constructor(http",{"_index":95,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":232,"title":{},"body":{"index.html":{}}}],["continu",{"_index":328,"title":{},"body":{"index.html":{}}}],["contract",{"_index":393,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":264,"title":{},"body":{"index.html":{}}}],["copi",{"_index":348,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":338,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":259,"title":{},"body":{"index.html":{}}}],["creat",{"_index":254,"title":{},"body":{"index.html":{}}}],["current",{"_index":318,"title":{},"body":{"index.html":{}}}],["damag",{"_index":389,"title":{},"body":{"license.html":{}}}],["data",{"_index":43,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":149,"title":{},"body":{"classes/RestRoute.html":{}}}],["data.map(d",{"_index":163,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":47,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["deal",{"_index":351,"title":{},"body":{"license.html":{}}}],["defin",{"_index":14,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":59,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["demo",{"_index":229,"title":{},"body":{"index.html":{}}}],["democompon",{"_index":296,"title":{},"body":{"index.html":{}}}],["depend",{"_index":221,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":244,"title":{},"body":{"index.html":{}}}],["desir",{"_index":276,"title":{},"body":{"index.html":{}}}],["dev",{"_index":317,"title":{},"body":{"index.html":{}}}],["develop",{"_index":234,"title":{},"body":{"index.html":{}}}],["direct",{"_index":286,"title":{},"body":{"index.html":{}}}],["directori",{"_index":319,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":360,"title":{},"body":{"license.html":{}}}],["document",{"_index":188,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":267,"title":{},"body":{"index.html":{}}}],["eeca740",{"_index":203,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":314,"title":{},"body":{"index.html":{}}}],["event",{"_index":384,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":237,"title":{},"body":{"index.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":377,"title":{},"body":{"license.html":{}}}],["extend",{"_index":210,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["final",{"_index":288,"title":{},"body":{"index.html":{}}}],["find",{"_index":306,"title":{},"body":{"index.html":{}}}],["first",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":380,"title":{},"body":{"license.html":{}}}],["fix",{"_index":199,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":367,"title":{},"body":{"license.html":{}}}],["free",{"_index":344,"title":{},"body":{"license.html":{}}}],["fun",{"_index":241,"title":{},"body":{"index.html":{}}}],["function",{"_index":72,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":365,"title":{},"body":{"license.html":{}}}],["gener",{"_index":309,"title":{},"body":{"index.html":{}}}],["get",{"_index":181,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getbaseurl",{"_index":11,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getdefaulthead",{"_index":12,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getfullpath",{"_index":66,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["getfullpath(id",{"_index":167,"title":{},"body":{"classes/RestRoute.html":{}}}],["getlist",{"_index":114,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["geton",{"_index":115,"title":{},"body":{"classes/RestRoute.html":{}}}],["getone(id",{"_index":120,"title":{},"body":{"classes/RestRoute.html":{}}}],["getplain",{"_index":61,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["getpost",{"_index":297,"title":{},"body":{"index.html":{}}}],["grant",{"_index":343,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":193,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":53,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["headers}).pip",{"_index":154,"title":{},"body":{"classes/RestRoute.html":{}}}],["help",{"_index":270,"title":{},"body":{"index.html":{}}}],["here",{"_index":284,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":342,"title":{},"body":{"license.html":{}}}],["highli",{"_index":236,"title":{},"body":{"index.html":{}}}],["hit",{"_index":333,"title":{},"body":{"index.html":{}}}],["holder",{"_index":386,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":28,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":281,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":230,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":260,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":243,"title":{},"body":{"index.html":{}}}],["id",{"_index":38,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["idea",{"_index":261,"title":{},"body":{"index.html":{}}}],["implement",{"_index":217,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["impli",{"_index":378,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["includ",{"_index":354,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inject",{"_index":278,"title":{},"body":{"index.html":{}}}],["insid",{"_index":251,"title":{},"body":{"index.html":{}}}],["instal",{"_index":233,"title":{},"body":{"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["it'",{"_index":256,"title":{},"body":{"index.html":{}}}],["key",{"_index":67,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["kind",{"_index":376,"title":{},"body":{"license.html":{}}}],["last",{"_index":135,"title":{},"body":{"classes/RestRoute.html":{}}}],["liabil",{"_index":390,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":387,"title":{},"body":{"license.html":{}}}],["lib",{"_index":255,"title":{},"body":{"index.html":{}}}],["licens",{"_index":235,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":262,"title":{},"body":{"index.html":{}}}],["limit",{"_index":355,"title":{},"body":{"license.html":{}}}],["link",{"_index":240,"title":{},"body":{"index.html":{}}}],["liter",{"_index":99,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":316,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":125,"title":{},"body":{"classes/RestRoute.html":{},"dependencies.html":{}}}],["log",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":268,"title":{},"body":{"index.html":{}}}],["makerest(data",{"_index":143,"title":{},"body":{"classes/RestRoute.html":{}}}],["makerestcollection(data",{"_index":162,"title":{},"body":{"classes/RestRoute.html":{}}}],["map",{"_index":126,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["map((respons",{"_index":155,"title":{},"body":{"classes/RestRoute.html":{}}}],["map(respons",{"_index":159,"title":{},"body":{"classes/RestRoute.html":{}}}],["mapmodel(path",{"_index":104,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{}}}],["mapmodel(rout",{"_index":287,"title":{},"body":{"index.html":{}}}],["match",{"_index":90,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":258,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":379,"title":{},"body":{"license.html":{}}}],["merg",{"_index":358,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["miscellan",{"_index":224,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":337,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":144,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["models/post",{"_index":280,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":357,"title":{},"body":{"license.html":{}}}],["modul",{"_index":332,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":23,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":269,"title":{},"body":{"index.html":{}}}],["new",{"_index":105,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["ngx",{"_index":228,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":315,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":383,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":186,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":370,"title":{},"body":{"license.html":{}}}],["now",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":272,"title":{},"body":{"index.html":{}}}],["number",{"_index":39,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object.assign(clon",{"_index":140,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.assign(plain",{"_index":63,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.assign(proto",{"_index":138,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.assign(thi",{"_index":51,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.assign(thisproto",{"_index":49,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":48,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":46,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(clon",{"_index":139,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(plain",{"_index":69,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":50,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["observ",{"_index":31,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["obtain",{"_index":347,"title":{},"body":{"license.html":{}}}],["on",{"_index":290,"title":{},"body":{"index.html":{}}}],["onc",{"_index":326,"title":{},"body":{"index.html":{}}}],["option",{"_index":25,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["otherwis",{"_index":395,"title":{},"body":{"license.html":{}}}],["out",{"_index":397,"title":{},"body":{"license.html":{}}}],["overview",{"_index":399,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":137,"title":{},"body":{"classes/RestRoute.html":{}}}],["packag",{"_index":220,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":331,"title":{},"body":{"index.html":{}}}],["paramet",{"_index":22,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":92,"title":{},"body":{"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":70,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["particular",{"_index":381,"title":{},"body":{"license.html":{}}}],["path",{"_index":26,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":341,"title":{},"body":{"license.html":{}}}],["permit",{"_index":364,"title":{},"body":{"license.html":{}}}],["person",{"_index":346,"title":{},"body":{"license.html":{}}}],["plain",{"_index":62,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":64,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["pleas",{"_index":265,"title":{},"body":{"index.html":{}}}],["port",{"_index":323,"title":{},"body":{"index.html":{}}}],["portion",{"_index":373,"title":{},"body":{"license.html":{}}}],["post",{"_index":116,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["post(data",{"_index":122,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":303,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":313,"title":{},"body":{"index.html":{}}}],["privat",{"_index":41,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":187,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{}}}],["protect",{"_index":101,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["proto",{"_index":65,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["proto[key",{"_index":68,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["protos.pop",{"_index":136,"title":{},"body":{"classes/RestRoute.html":{}}}],["protos.push(value.__proto__",{"_index":133,"title":{},"body":{"classes/RestRoute.html":{}}}],["prototyp",{"_index":250,"title":{},"body":{"index.html":{}}}],["provid",{"_index":374,"title":{},"body":{"license.html":{}}}],["publish",{"_index":359,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":382,"title":{},"body":{"license.html":{}}}],["put",{"_index":52,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["reimplement",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":329,"title":{},"body":{"index.html":{}}}],["reload",{"_index":325,"title":{},"body":{"index.html":{}}}],["repo",{"_index":320,"title":{},"body":{"index.html":{}}}],["request",{"_index":103,"title":{},"body":{"classes/RestBase.html":{},"index.html":{}}}],["requestinterceptor(req",{"_index":102,"title":{},"body":{"classes/RestBase.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":285,"title":{},"body":{"index.html":{}}}],["response.getplain",{"_index":301,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":156,"title":{},"body":{"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":304,"title":{},"body":{"index.html":{}}}],["rest",{"_index":174,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":242,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":282,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":293,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":93,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"index.html":{}}}],["restful(arg",{"_index":226,"title":{},"body":{"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":172,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":34,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":312,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":35,"title":{"classes/RestModelBase.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restmodelbase(baseclon",{"_index":152,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelcollection(this.bas",{"_index":166,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":274,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":353,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":27,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["restroute(thi",{"_index":106,"title":{},"body":{"classes/RestBase.html":{}}}],["result",{"_index":89,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":16,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["right",{"_index":356,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":340,"title":{},"body":{"license.html":{}}}],["rout",{"_index":13,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":20,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":74,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.par",{"_index":76,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["route.path",{"_index":75,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["run",{"_index":322,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":32,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":127,"title":{},"body":{"classes/RestRoute.html":{}}}],["save",{"_index":273,"title":{},"body":{"index.html":{}}}],["see",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":294,"title":{},"body":{"index.html":{}}}],["sell",{"_index":363,"title":{},"body":{"license.html":{}}}],["send",{"_index":266,"title":{},"body":{"index.html":{}}}],["server",{"_index":321,"title":{},"body":{"index.html":{}}}],["servic",{"_index":275,"title":{},"body":{"index.html":{}}}],["shall",{"_index":371,"title":{},"body":{"license.html":{}}}],["softwar",{"_index":349,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":225,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":404,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/decorators.t",{"_index":173,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":277,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":94,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:15",{"_index":97,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:19",{"_index":98,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:23",{"_index":100,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:4",{"_index":96,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":5,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:10",{"_index":15,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:103",{"_index":112,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:11",{"_index":19,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:12",{"_index":21,"title":{},"body":{"interfaces/AbstractBase.html":{}}}],["src/restmodel.ts:18",{"_index":108,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:28",{"_index":111,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:35",{"_index":109,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:42",{"_index":110,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restroute.t",{"_index":113,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:40",{"_index":118,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:62",{"_index":119,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:71",{"_index":121,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:80",{"_index":123,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":91,"title":{},"body":{"interfaces/Resource.html":{}}}],["standard",{"_index":190,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":182,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":238,"title":{},"body":{"index.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["subject",{"_index":366,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":361,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":305,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":299,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":372,"title":{},"body":{"license.html":{}}}],["super(http",{"_index":283,"title":{},"body":{"index.html":{}}}],["t",{"_index":36,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":231,"title":{},"body":{"index.html":{}}}],["target",{"_index":176,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":178,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":180,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":295,"title":{},"body":{"index.html":{}}}],["test",{"_index":202,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":327,"title":{},"body":{"index.html":{}}}],["this._base.getbaseurl",{"_index":86,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.getdefaulthead",{"_index":87,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.http.delete(url",{"_index":60,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.http.put(url",{"_index":57,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._base.route(path",{"_index":88,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this._rout",{"_index":165,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getbaseurl",{"_index":169,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.getdefaulthead",{"_index":170,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.base.mapmodel(path",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getbaseurl",{"_index":79,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getdefaulthead",{"_index":54,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath",{"_index":56,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this.getfullpath(id",{"_index":158,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.getplain",{"_index":58,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["this.http",{"_index":141,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.http.get(url",{"_index":153,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.http.post(url",{"_index":161,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(d",{"_index":164,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(r",{"_index":157,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.makerest(respons",{"_index":160,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.mapmodel(this.path",{"_index":145,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.path",{"_index":150,"title":{},"body":{"classes/RestRoute.html":{}}}],["this.post",{"_index":300,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":298,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":45,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["through",{"_index":271,"title":{},"body":{"index.html":{}}}],["tort",{"_index":394,"title":{},"body":{"license.html":{}}}],["tri",{"_index":253,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/AbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":402,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":227,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":55,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["url.length",{"_index":84,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["url.slice(0",{"_index":83,"title":{},"body":{"interfaces/AbstractBase.html":{},"classes/RestModelBase.html":{}}}],["us",{"_index":289,"title":{},"body":{"index.html":{},"license.html":{}}}],["valu",{"_index":131,"title":{},"body":{"classes/RestRoute.html":{}}}],["value.__proto__",{"_index":134,"title":{},"body":{"classes/RestRoute.html":{}}}],["verbo",{"_index":200,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":257,"title":{},"body":{"index.html":{}}}],["version",{"_index":191,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":310,"title":{},"body":{"index.html":{}}}],["view",{"_index":307,"title":{},"body":{"index.html":{}}}],["want",{"_index":263,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":375,"title":{},"body":{"license.html":{}}}],["whether",{"_index":391,"title":{},"body":{"license.html":{}}}],["while(value.__proto__",{"_index":132,"title":{},"body":{"classes/RestRoute.html":{}}}],["wish",{"_index":248,"title":{},"body":{"index.html":{}}}],["withou",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":352,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AbstractBase.html":{"url":"interfaces/AbstractBase.html","title":"interface - AbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:11\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  route(path: string): RestRoute;\n}\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id: number;\n\n  constructor (private _base: AbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  put(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, this.getPlain(), {headers});\n  }\n\n  delete(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.delete(url, {headers});\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: Request) {\n  }\n\n  protected mapModel(path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: AbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    AbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Resource } from './types';\nimport { RestRoute } from './restRoute';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  route(path: string): RestRoute;\n}\n\nexport type RestModel = RestModelBase & T;\n\nexport class RestModelBase {\n  id: number;\n\n  constructor (private _base: AbstractBase, data: T) {\n    const thisProto = Object.getPrototypeOf(this);\n    const dataProto = Object.getPrototypeOf(data);\n    Object.assign(thisProto, dataProto);\n    Object.setPrototypeOf(this, thisProto);\n    Object.assign(this, data);\n  }\n\n  put(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.put(url, this.getPlain(), {headers});\n  }\n\n  delete(): Observable {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this._base.http.delete(url, {headers});\n  }\n\n  getPlain(): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'delete',\n      'getBaseUrl',\n      'getDefaultHeaders',\n      'getFullPath',\n      'getPlain',\n      'put',\n      'route'\n    ];\n\n    for (const key of methods) {\n      if (key) { delete proto[key]; }\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  private getFullPath() {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    const url = baseurl + parentUrl\n    return url.slice(0, url.length-1);\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(base: AbstractBase, path: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        base\n                                                  \n                                                        \n                                                                    AbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:62\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     Observable>>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:71\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:80\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\n// import { cloneDeep } from 'lodash';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Resource } from './types';\nimport { RestModel, RestModelBase } from './restModel';\n\ninterface AbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n  mapModel(path: string, data: any): any;\n}\n\n// not for array\n// function cloneDeepAndUnique(value: any) {\n//   const clone: any = { ...value };\n//   const proto: any = {};\n//   const protos = [];\n\n//   while(value.__proto__) {\n//     protos.push(value.__proto__);\n//     value = value.__proto__;\n//   }\n\n//   const last = protos.pop();\n//   for (const p of protos) {\n//     Object.assign(proto, p);\n//   }\n\n//   Object.setPrototypeOf(clone, proto);\n//   Object.assign(clone, { ...value });\n//   return clone;\n// }\n\nexport class RestRoute {\n  private http: HttpClient\n\n  constructor (private base: AbstractBase, private path: string) {\n    this.http = base.http;\n  }\n\n  private makeRest(data: any): RestModel {\n    const model = this.mapModel(this.path, data);\n    const baseClone = cloneDeep(this.base);\n\n    baseClone.http = this.http;\n\n    const resource: Resource = {\n      id: data.id,\n      path: this.path,\n      parent: baseClone.resource\n    };\n\n    baseClone.resource = resource;\n    return new RestModelBase(baseClone as any, model) as any;\n  }\n\n  getList(): Observable>> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this.http.get(url, {headers}).pipe(\n      map((response: any[]) => response.map(r => this.makeRest(r)))\n    );\n  }\n\n  getOne(id: number): Observable> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath(id);\n\n    return this.http.get(url, {headers}).pipe(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  post(data: any): Observable> {\n    const headers = this.getDefaultHeaders();\n    const url = this.getFullPath();\n\n    return this.http.post(url, data, {headers}).pipe(\n      map(response => this.makeRest(response))\n    );\n  }\n\n  // private makeRestCollection(data: any[]) {\n  //   const models = data.map(d => this.makeRest(d));\n  //   const route = { ...this._route };\n  //   return new RestModelCollection(this.base, route, models);\n  // }\n\n  private getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this.base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this.getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    return baseurl + parentUrl + this.path + (id ?  '/' + id : '');\n  }\n\n  // Base\n\n  private getBaseUrl(): string {\n    return this.base.getBaseUrl();\n  }\n\n  private getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this.base.getDefaultHeaders();\n  }\n\n  private mapModel(path: string, data: any): any {\n    return this.base.mapModel(path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful( args: RestfulOptions ) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n        \n            lodash : >=4.17.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/ not implemented yet\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still on developing]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since on AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So I tried to create this lib.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the Idea.\nIf you liked the idea and want to contribute, please send me an e-mail (I need help).\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source. not implemented yet\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/ not implemented yet\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
