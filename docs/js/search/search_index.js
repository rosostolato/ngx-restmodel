var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/IAbstractBase.html",[0,0.52,1,1.038]],["body/interfaces/IAbstractBase.html",[0,0.734,1,1.27,2,0.772,3,0.654,4,0.549,5,1.491,6,0.369,7,1.49,8,1.862,9,2.547,10,1.247,11,1.862,12,1.862,13,2.531,14,2.531,15,2.531,16,1.081,17,2.032,18,2.29,19,1.248,20,0.063,21,1.115,22,2.29,23,2.087,24,1.144,25,1.422,26,1.247,27,2.29,28,1.587,29,1.587,30,0.867,31,1.144,32,2.087,33,1.473,34,2.29,35,1.065,36,2.087,37,1.473,38,2.29,39,1.808,40,1.49,41,2.29,42,1.144,43,2.194,44,1.247,45,1.491,46,0.772,47,0.654,48,1.056,49,1.065,50,1.065,51,1.491,52,1.491,53,1.081,54,1.49,55,1.27,56,0.039,57,0.039]],["title/interfaces/IRestModel.html",[0,0.52,58,1.706]],["body/interfaces/IRestModel.html",[0,0.493,1,0.983,2,0.545,3,0.462,4,0.388,6,0.4,10,1.301,11,0.752,12,0.752,16,1.019,17,1.576,19,1.295,20,0.064,21,0.877,24,0.462,25,0.545,26,0.837,28,1.197,29,1.448,30,0.726,31,0.863,33,0.837,35,0.752,37,1.355,40,1.405,42,1.044,44,1.233,46,0.545,47,0.462,48,0.709,49,0.752,50,0.752,54,1.405,55,1.529,56,0.031,57,0.031,58,2.207,59,1.053,60,2.887,61,2.386,62,2.826,63,1.617,64,2.113,65,1.616,66,1.617,67,2.381,68,2.386,69,1.617,70,1.617,71,1.053,72,0.885,73,1.053,74,0.321,75,0.752,76,0.885,77,0.885,78,1.654,79,1.96,80,0.752,81,1.053,82,1.277,83,2.875,84,2.386,85,1.616,86,2.676,87,1.277,88,1.277,89,1.277,90,1.277,91,1.053,92,1.277,93,1.197,94,2.386,95,1.96,96,1.96,97,1.96,98,1.96,99,1.277,100,1.277,101,2.207,102,2.381,103,1.277,104,1.277,105,1.277,106,1.277,107,1.277,108,1.277,109,1.277,110,0.983,111,0.983,112,1.053,113,1.616,114,1.277,115,1.277,116,1.277,117,1.053,118,1.053,119,1.277,120,1.616,121,1.277,122,1.154,123,1.277,124,1.277,125,1.277,126,1.277,127,1.96,128,1.277,129,1.277,130,1.277,131,0.885,132,1.96,133,1.359,134,1.277,135,1.277,136,1.277,137,1.277,138,1.277,139,1.277,140,0.885,141,1.277,142,0.64]],["title/interfaces/Resource.html",[0,0.52,9,1.434]],["body/interfaces/Resource.html",[0,0.813,1,1.107,2,0.942,3,0.798,4,0.67,5,1.819,6,0.45,7,1.705,8,1.299,9,2.587,11,1.299,12,1.299,20,0.063,21,1.111,23,1.819,24,1.048,25,1.523,26,0.942,30,0.813,31,1.242,32,1.819,33,1.381,36,1.819,37,1.381,40,1.299,42,1.17,43,2.009,44,1.381,45,1.819,46,0.942,47,0.798,48,1.17,49,2.022,50,1.904,51,2.832,52,1.819,53,1.237,54,1.705,55,1.453,56,0.045,57,0.045]],["title/classes/RestBase.html",[74,0.52,143,1.434]],["body/classes/RestBase.html",[2,0.856,3,0.725,4,0.609,6,0.409,8,1.601,10,1.161,11,1.946,12,1.946,16,1.161,17,1.946,19,1.359,20,0.064,21,1.125,23,1.654,24,0.983,25,1.317,26,1.161,28,1.364,29,1.364,30,0.831,31,0.983,32,1.654,33,1.317,35,1.181,36,1.654,37,1.317,39,2.006,40,1.601,42,0.983,43,2.292,44,1.411,45,1.654,46,0.856,47,0.725,48,0.725,56,0.042,57,0.042,74,0.683,80,1.601,110,1.006,111,1.006,143,1.885,144,2.541,145,2.541,146,2.541,147,2.541,148,2.541,149,2.541,150,2.541,151,2.726,152,2.541]],["title/classes/RestModelBase.html",[74,0.52,75,1.218]],["body/classes/RestModelBase.html",[0,0.269,1,1.218,2,0.456,3,0.386,4,0.324,6,0.348,7,1.004,10,1.207,11,0.629,12,0.629,16,0.908,17,1.87,19,1.288,20,0.064,21,0.805,24,0.386,25,0.456,26,1.133,28,1.668,29,1.634,30,0.864,31,1.114,33,0.728,35,0.629,37,1.39,40,1.252,42,1.149,44,1.133,46,0.456,47,0.386,48,0.616,49,1.562,50,1.562,53,0.728,54,1.252,55,1.418,56,0.027,57,0.027,58,2.002,59,0.881,60,2.428,61,2.127,62,2.936,64,2.306,65,2.187,67,2.685,68,2.127,71,0.881,72,0.741,73,0.881,74,0.428,75,1.004,76,1.182,77,1.182,78,1.475,79,1.705,80,1.004,81,1.405,82,1.068,83,2.742,84,2.127,85,1.405,86,2.428,87,1.068,88,1.068,89,1.068,90,1.068,91,0.881,92,1.068,93,1.067,94,2.127,95,1.705,96,1.705,97,1.705,98,1.705,99,1.068,100,1.068,101,2.002,102,2.187,103,1.068,104,1.068,105,1.068,106,1.068,107,1.068,108,1.068,109,1.068,110,0.855,111,0.855,112,0.881,113,1.405,114,1.068,115,1.068,116,1.068,117,0.881,118,0.881,119,1.068,120,1.405,121,1.068,122,1.004,123,1.068,124,1.068,125,1.705,126,1.705,127,1.705,128,1.068,129,1.068,130,1.705,131,0.741,132,1.705,133,1.182,134,1.068,135,1.068,136,1.068,137,1.068,138,1.068,139,1.068,140,0.741,141,1.068,142,0.536,153,1.405,154,1.705,155,1.068,156,1.353,157,1.353,158,1.353,159,1.353,160,1.068,161,1.068,162,1.353,163,1.353,164,1.068,165,2.127,166,1.353,167,1.068,168,1.353,169,0.881,170,1.353]],["title/classes/RestRoute.html",[42,0.748,74,0.52]],["body/classes/RestRoute.html",[1,1.218,2,0.456,3,0.386,4,0.324,6,0.348,9,1.84,10,1.036,16,0.456,17,1.429,19,1.26,20,0.064,21,0.964,24,0.769,25,0.908,26,1.207,28,1.488,29,1.218,30,0.775,31,0.878,33,0.728,35,1.004,37,1.39,42,0.616,44,1.133,46,0.456,47,0.386,48,0.386,49,1.562,50,1.429,51,0.881,53,0.728,55,0.536,56,0.027,57,0.027,62,2.742,64,2.347,65,2.002,67,1.754,71,0.881,72,0.741,73,0.881,74,0.535,75,0.629,78,1.182,80,1.004,81,2.002,83,2.619,85,0.881,91,0.881,93,0.536,101,1.405,110,1.067,111,1.067,112,0.881,113,2.002,117,1.405,118,0.881,120,1.405,122,1.252,140,1.182,142,0.855,151,2.447,153,1.405,154,1.705,155,1.068,164,1.705,167,1.705,169,1.405,171,1.353,172,3.581,173,1.353,174,1.353,175,1.353,176,1.353,177,1.353,178,2.159,179,1.353,180,3.581,181,1.353,182,1.353,183,1.068,184,2.159,185,1.353,186,1.353,187,1.353,188,2.694,189,1.353,190,1.353,191,1.353,192,1.353,193,1.353,194,1.705,195,1.705,196,0.881,197,2.159,198,1.353,199,1.353,200,1.353,201,1.353,202,1.353,203,1.353,204,1.353,205,1.353,206,1.353,207,1.353,208,1.405,209,1.353,210,1.353,211,0.881,212,0.881,213,1.353,214,2.159,215,1.353,216,1.353,217,1.353,218,2.159,219,1.353,220,2.159,221,1.353,222,1.353,223,2.159,224,1.353,225,1.353,226,1.353,227,1.353,228,3.758,229,1.353,230,1.353,231,2.159,232,1.353,233,1.353,234,1.353,235,1.754,236,1.353,237,1.353,238,2.694,239,1.353,240,1.353,241,1.353,242,1.353,243,1.353,244,1.353,245,1.353,246,1.353,247,1.353]],["title/interfaces/RestfulOptions.html",[0,0.52,248,2.069]],["body/interfaces/RestfulOptions.html",[0,0.76,2,1.007,3,0.853,4,0.716,6,0.481,7,1.781,19,1.274,20,0.064,21,1.07,30,0.76,31,1.274,48,1.208,56,0.047,57,0.047,93,1.517,110,1.767,133,1.635,235,2.905,248,3.34,249,2.359,250,2.359,251,3.025,252,3.831,253,2.987,254,3.831,255,2.987,256,2.359,257,3.831,258,2.987]],["title/changelog.html",[259,1.444,260,1.214,261,2.218]],["body/changelog.html",[4,0.461,7,0.895,8,1.916,10,1.389,13,1.52,14,2.234,15,1.52,16,1.247,19,0.549,20,0.035,21,0.461,24,0.549,30,0.382,33,0.649,37,0.649,42,0.549,47,0.549,52,1.253,53,1.247,56,0.035,57,0.035,64,1.549,74,0.382,75,0.895,76,1.837,77,1.054,110,0.762,111,0.762,122,1.56,131,1.054,140,1.837,142,1.731,143,1.549,160,1.52,165,1.52,183,1.52,194,1.52,196,1.253,208,1.253,211,1.253,212,1.253,262,3.355,263,1.924,264,1.924,265,1.924,266,1.253,267,1.924,268,1.924,269,1.52,270,2.829,271,1.924,272,1.924,273,3.743,274,2.829,275,2.829,276,4.599,277,4.74,278,2.234,279,1.924,280,1.924,281,1.924,282,1.52,283,1.924,284,1.52,285,1.924,286,1.924,287,1.924,288,1.924,289,1.924,290,3.355,291,1.924,292,1.924,293,1.924,294,1.52,295,1.924,296,1.924,297,4.371,298,1.924,299,1.924,300,1.924,301,1.924,302,1.924,303,1.924,304,1.924,305,2.649,306,1.924,307,1.52,308,1.924,309,1.924,310,3.355,311,1.924,312,1.924,313,1.52,314,1.924,315,1.924,316,1.924,317,1.924,318,1.924,319,1.924,320,3.581,321,1.924,322,1.924,323,1.924,324,1.924,325,1.924,326,1.924,327,1.924,328,3.699,329,1.924,330,1.924,331,1.924,332,1.924,333,1.924,334,1.924,335,1.52,336,1.924,337,1.924,338,1.924,339,1.924,340,1.924,341,1.924,342,1.924,343,1.924,344,3.355,345,1.924,346,2.829,347,1.52,348,1.924,349,1.924,350,2.829,351,2.829,352,2.829,353,2.829,354,1.924,355,1.924,356,1.924,357,1.924,358,1.924,359,3.699,360,2.829,361,1.924,362,1.924,363,1.924,364,1.924,365,1.924,366,1.924,367,2.829,368,1.924,369,1.924]],["title/dependencies.html",[370,2.218,371,2.041]],["body/dependencies.html",[20,0.059,47,1.124,56,0.056,57,0.056,371,2.564,372,3.939]],["title/miscellaneous/enumerations.html",[373,0.878,374,2.475]],["body/miscellaneous/enumerations.html",[5,2.433,6,0.602,20,0.054,24,1.256,53,1.482,54,2.044,55,1.742,56,0.054,57,0.054,161,3.809,373,1.48,374,2.951,375,3.738]],["title/miscellaneous/functions.html",[93,1.241,373,0.878]],["body/miscellaneous/functions.html",[6,0.579,20,0.059,28,1.702,29,1.702,30,0.714,31,1.227,56,0.053,57,0.053,93,1.424,131,2.353,133,2.353,249,2.84,250,2.84,251,2.84,256,2.84,373,1.424,376,4.298,377,3.394,378,4.298,379,3.596]],["title/index.html",[6,0.357,259,1.444,260,1.214]],["body/index.html",[3,0.786,8,0.861,10,0.928,16,1.106,19,0.786,20,0.063,21,0.444,25,0.625,26,0.928,43,1.507,44,1.419,46,0.625,48,0.786,53,1.37,56,0.034,57,0.034,72,1.015,74,0.546,76,1.507,77,1.507,78,1.015,80,1.279,111,0.734,122,0.861,142,1.09,143,1.797,151,1.206,153,1.791,169,1.206,195,1.463,196,1.206,208,1.791,211,1.206,235,1.206,260,1.507,266,2.137,269,2.173,278,1.463,282,1.463,294,1.463,305,2.592,307,2.173,313,1.463,320,3.064,335,1.463,347,1.463,371,1.206,377,2.868,380,2.752,381,2.752,382,1.853,383,1.853,384,4.209,385,4.066,386,1.791,387,1.853,388,2.752,389,2.752,390,1.853,391,1.853,392,3.282,393,1.853,394,1.853,395,1.853,396,1.853,397,1.853,398,1.853,399,1.853,400,1.853,401,2.752,402,1.853,403,1.853,404,1.853,405,1.853,406,1.853,407,1.853,408,1.853,409,1.853,410,1.853,411,1.853,412,1.853,413,1.853,414,1.853,415,1.853,416,1.853,417,1.853,418,4.209,419,1.853,420,1.853,421,1.853,422,2.752,423,1.853,424,2.752,425,2.752,426,2.752,427,1.853,428,3.632,429,1.853,430,2.752,431,1.853,432,1.853,433,1.853,434,2.173,435,1.853,436,3.282,437,1.853,438,1.853,439,1.853,440,1.853,441,1.853,442,1.853,443,1.853,444,1.853,445,1.853,446,1.853,447,1.853,448,1.853,449,1.853,450,2.752,451,2.752,452,1.853,453,1.853,454,1.853,455,1.853,456,1.853,457,1.853,458,1.853,459,1.853,460,1.853,461,1.853,462,1.853,463,2.752,464,4.066,465,1.853,466,1.853,467,1.853,468,2.752,469,1.853,470,1.853,471,2.752,472,1.853,473,1.853,474,1.206,475,1.853,476,1.853,477,1.853,478,1.853,479,1.463]],["title/license.html",[259,1.444,260,1.214,386,1.444]],["body/license.html",[4,0.69,20,0.046,56,0.046,57,0.046,102,1.874,212,2.864,266,1.874,273,2.273,386,1.874,434,2.954,479,2.954,480,4.156,481,2.879,482,2.879,483,3.741,484,2.879,485,2.879,486,2.879,487,2.879,488,3.741,489,2.879,490,4.877,491,2.879,492,3.741,493,4.156,494,2.879,495,4.156,496,3.741,497,2.879,498,2.879,499,2.879,500,2.879,501,2.879,502,2.879,503,2.879,504,2.879,505,2.879,506,2.879,507,2.879,508,2.879,509,2.879,510,2.879,511,3.741,512,3.741,513,2.879,514,2.879,515,2.879,516,3.741,517,2.879,518,2.879,519,2.879,520,2.879,521,2.879,522,2.879,523,2.879,524,2.879,525,2.879,526,2.879,527,2.879,528,2.879,529,2.879,530,2.879,531,2.879,532,2.879,533,2.879,534,2.879,535,2.879,536,2.879,537,2.879,538,2.879]],["title/modules.html",[474,2.289]],["body/modules.html",[20,0.056,56,0.056,57,0.056,474,2.596]],["title/overview.html",[539,2.776]],["body/overview.html",[0,0.778,20,0.056,56,0.056,57,0.056,74,0.778,284,3.097,539,3.097,540,3.922]],["title/miscellaneous/typealiases.html",[373,0.878,541,3.135]],["body/miscellaneous/typealiases.html",[6,0.621,20,0.055,30,0.766,56,0.055,57,0.055,59,2.512,142,1.875,373,1.528,542,3.859,543,3.859]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["0.0.7",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["0.0.8",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["0.0.9",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["0.1.2",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["0.1.3",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["0.1.4",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["085f547",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":238,"title":{},"body":{"classes/RestRoute.html":{}}}],["1.0",{"_index":476,"title":{},"body":{"index.html":{}}}],["10",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":282,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["2018",{"_index":273,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2038bb8",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":284,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["30",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["3d1c218",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":540,"title":{},"body":{"overview.html":{}}}],["44a4bdb",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["46eb968",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["4c85e59",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["53ed63d",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["56cc762",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["59b28fa",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["5ccb4eb",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["6188851",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["7379bef",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["799d470",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["7aa1d51",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["7d6061f",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":466,"title":{},"body":{"index.html":{}}}],["83b8901",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["86ff926",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["993011c",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["_base",{"_index":81,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["_createhttprequest(req",{"_index":193,"title":{},"body":{"classes/RestRoute.html":{}}}],["_createmodelhttprequest",{"_index":136,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["_createmodelhttprequest(method",{"_index":108,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["_createroutehttprequest(method",{"_index":186,"title":{},"body":{"classes/RestRoute.html":{}}}],["_getbaseurl",{"_index":242,"title":{},"body":{"classes/RestRoute.html":{}}}],["_getdefaulthead",{"_index":244,"title":{},"body":{"classes/RestRoute.html":{}}}],["_getfullpath(id",{"_index":227,"title":{},"body":{"classes/RestRoute.html":{}}}],["_jsonignor",{"_index":79,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["_makerest(method",{"_index":207,"title":{},"body":{"classes/RestRoute.html":{}}}],["_mapmodel(method",{"_index":246,"title":{},"body":{"classes/RestRoute.html":{}}}],["_path",{"_index":172,"title":{},"body":{"classes/RestRoute.html":{}}}],["_unifyprototyp",{"_index":137,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["_unifyprototype(proto",{"_index":99,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["a5ba9b0",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["a98b240",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":510,"title":{},"body":{"license.html":{}}}],["action",{"_index":533,"title":{},"body":{"license.html":{}}}],["add",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["addroute(rout",{"_index":230,"title":{},"body":{"classes/RestRoute.html":{}}}],["addroute(route.par",{"_index":234,"title":{},"body":{"classes/RestRoute.html":{}}}],["addroute(this._base.resourc",{"_index":229,"title":{},"body":{"classes/RestRoute.html":{}}}],["again",{"_index":445,"title":{},"body":{"index.html":{}}}],["alias",{"_index":542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":503,"title":{},"body":{"license.html":{}}}],["angular",{"_index":395,"title":{},"body":{"index.html":{}}}],["angular/common/http",{"_index":46,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["angular/cor",{"_index":425,"title":{},"body":{"index.html":{}}}],["angularj",{"_index":396,"title":{},"body":{"index.html":{}}}],["api",{"_index":390,"title":{},"body":{"index.html":{}}}],["app",{"_index":307,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["arg",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["args.baseurl",{"_index":252,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["args.head",{"_index":254,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["aris",{"_index":537,"title":{},"body":{"license.html":{}}}],["associ",{"_index":491,"title":{},"body":{"license.html":{}}}],["author",{"_index":526,"title":{},"body":{"license.html":{}}}],["auto",{"_index":451,"title":{},"body":{"index.html":{}}}],["automatic)npm",{"_index":478,"title":{},"body":{"index.html":{}}}],["base",{"_index":140,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["basecopi",{"_index":213,"title":{},"body":{"classes/RestRoute.html":{}}}],["basecopy.resourc",{"_index":218,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseproto",{"_index":214,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl",{"_index":235,"title":{},"body":{"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["baseurl.charat(baseurl.length",{"_index":237,"title":{},"body":{"classes/RestRoute.html":{}}}],["baseurl.slice(0",{"_index":239,"title":{},"body":{"classes/RestRoute.html":{}}}],["becom",{"_index":477,"title":{},"body":{"index.html":{}}}],["better",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":398,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":400,"title":{},"body":{"index.html":{}}}],["born",{"_index":403,"title":{},"body":{"index.html":{}}}],["bug",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":472,"title":{},"body":{"index.html":{}}}],["c",{"_index":481,"title":{},"body":{"license.html":{}}}],["call",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["cdd0f86",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":261,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":487,"title":{},"body":{"license.html":{}}}],["claim",{"_index":529,"title":{},"body":{"license.html":{}}}],["class",{"_index":74,"title":{"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}},"body":{"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":454,"title":{},"body":{"index.html":{}}}],["compon",{"_index":436,"title":{},"body":{"index.html":{}}}],["condit",{"_index":509,"title":{},"body":{"license.html":{}}}],["connect",{"_index":538,"title":{},"body":{"license.html":{}}}],["const",{"_index":83,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor",{"_index":80,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["constructor(_bas",{"_index":155,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["constructor(http",{"_index":145,"title":{},"body":{"classes/RestBase.html":{}}}],["content",{"_index":383,"title":{},"body":{"index.html":{}}}],["continu",{"_index":470,"title":{},"body":{"index.html":{}}}],["contract",{"_index":534,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":411,"title":{},"body":{"index.html":{}}}],["copi",{"_index":212,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"license.html":{}}}],["copyright",{"_index":480,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":406,"title":{},"body":{"index.html":{}}}],["cover",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["coverag",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["creat",{"_index":211,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["current",{"_index":313,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["damag",{"_index":530,"title":{},"body":{"license.html":{}}}],["data",{"_index":26,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["data.id",{"_index":217,"title":{},"body":{"classes/RestRoute.html":{}}}],["dataproto",{"_index":86,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["deal",{"_index":492,"title":{},"body":{"license.html":{}}}],["decor",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["default",{"_index":160,"title":{},"body":{"classes/RestModelBase.html":{},"changelog.html":{}}}],["defin",{"_index":17,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["delet",{"_index":55,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/enumerations.html":{}}}],["delete(param",{"_index":61,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["demo",{"_index":305,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["democompon",{"_index":439,"title":{},"body":{"index.html":{}}}],["depend",{"_index":371,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desapoint",{"_index":394,"title":{},"body":{"index.html":{}}}],["desir",{"_index":422,"title":{},"body":{"index.html":{}}}],["dev",{"_index":460,"title":{},"body":{"index.html":{}}}],["develop",{"_index":385,"title":{},"body":{"index.html":{}}}],["df2b6fc",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":431,"title":{},"body":{"index.html":{}}}],["directori",{"_index":461,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":501,"title":{},"body":{"license.html":{}}}],["document",{"_index":266,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["e",{"_index":414,"title":{},"body":{"index.html":{}}}],["e1eab3a",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["e5e306d",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["e6f672a",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["eeca740",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["enum",{"_index":52,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"changelog.html":{}}}],["enumer",{"_index":374,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":457,"title":{},"body":{"index.html":{}}}],["error",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":525,"title":{},"body":{"license.html":{}}}],["experiment",{"_index":388,"title":{},"body":{"index.html":{}}}],["export",{"_index":48,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["express",{"_index":518,"title":{},"body":{"license.html":{}}}],["extend",{"_index":76,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"changelog.html":{},"index.html":{}}}],["fals",{"_index":126,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["featur",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":179,"title":{},"body":{"classes/RestRoute.html":{}}}],["filter(respons",{"_index":202,"title":{},"body":{"classes/RestRoute.html":{}}}],["final",{"_index":433,"title":{},"body":{"index.html":{}}}],["find",{"_index":449,"title":{},"body":{"index.html":{}}}],["first",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":521,"title":{},"body":{"license.html":{}}}],["fix",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["fixm",{"_index":182,"title":{},"body":{"classes/RestRoute.html":{}}}],["follow",{"_index":508,"title":{},"body":{"license.html":{}}}],["forgot",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["forgotten",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["framework",{"_index":408,"title":{},"body":{"index.html":{}}}],["free",{"_index":486,"title":{},"body":{"license.html":{}}}],["fullrespons",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["fullresponseinterc",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["fun",{"_index":391,"title":{},"body":{"index.html":{}}}],["function",{"_index":93,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":506,"title":{},"body":{"license.html":{}}}],["gener",{"_index":452,"title":{},"body":{"index.html":{}}}],["get",{"_index":259,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getbaseurl",{"_index":11,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["getdefaulthead",{"_index":12,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["getfullpath",{"_index":135,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["getlist",{"_index":153,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["getlist(param",{"_index":164,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["geton",{"_index":154,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getone(id",{"_index":167,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["getplain",{"_index":60,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["getplain(removeingoredfield",{"_index":125,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["getpost",{"_index":440,"title":{},"body":{"index.html":{}}}],["grant",{"_index":485,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["header",{"_index":110,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["help",{"_index":416,"title":{},"body":{"index.html":{}}}],["here",{"_index":430,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":484,"title":{},"body":{"license.html":{}}}],["hide",{"_index":181,"title":{},"body":{"classes/RestRoute.html":{}}}],["highli",{"_index":387,"title":{},"body":{"index.html":{}}}],["hit",{"_index":475,"title":{},"body":{"index.html":{}}}],["holder",{"_index":527,"title":{},"body":{"license.html":{}}}],["http",{"_index":8,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["httpclient",{"_index":43,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"index.html":{}}}],["httpevent",{"_index":45,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["httpeventtyp",{"_index":177,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpeventtype.respons",{"_index":204,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpheader",{"_index":71,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpheaders(this._getdefaulthead",{"_index":112,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httpmethod",{"_index":24,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["httpmethod.get",{"_index":190,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpmethod.get|httpmethod.post",{"_index":187,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpmethod.post",{"_index":192,"title":{},"body":{"classes/RestRoute.html":{}}}],["httpmethod.put",{"_index":115,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["httpmethod.put|httpmethod.delet",{"_index":109,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["httpparam",{"_index":62,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["httprequest",{"_index":33,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["httprequest(method",{"_index":191,"title":{},"body":{"classes/RestRoute.html":{}}}],["httprespons",{"_index":178,"title":{},"body":{"classes/RestRoute.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":427,"title":{},"body":{"index.html":{}}}],["https://rosostolato.github.io/ngx",{"_index":381,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":407,"title":{},"body":{"index.html":{}}}],["i'v",{"_index":393,"title":{},"body":{"index.html":{}}}],["iabstractbas",{"_index":1,"title":{"interfaces/IAbstractBase.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id",{"_index":49,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["id_data",{"_index":188,"title":{},"body":{"classes/RestRoute.html":{}}}],["idea",{"_index":401,"title":{},"body":{"index.html":{}}}],["immut",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":77,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"changelog.html":{},"index.html":{}}}],["impli",{"_index":519,"title":{},"body":{"license.html":{}}}],["import",{"_index":44,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["improov",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["improv",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":495,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{}}}],["inherit",{"_index":165,"title":{},"body":{"classes/RestModelBase.html":{},"changelog.html":{}}}],["inject",{"_index":424,"title":{},"body":{"index.html":{}}}],["insid",{"_index":399,"title":{},"body":{"index.html":{}}}],["instal",{"_index":384,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":197,"title":{},"body":{"classes/RestRoute.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"interfaces/RestfulOptions.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{},"overview.html":{}}}],["irestmodel",{"_index":58,"title":{"interfaces/IRestModel.html":{}},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["isobject(dataproto",{"_index":89,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["isobject(p",{"_index":94,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["isobject(proto",{"_index":100,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["isprototypeof",{"_index":98,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["issu",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["it'",{"_index":335,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["jsonignor",{"_index":131,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["jsonignore(target",{"_index":256,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["keep",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":133,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":517,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":531,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":528,"title":{},"body":{"license.html":{}}}],["lib",{"_index":402,"title":{},"body":{"index.html":{}}}],["licens",{"_index":386,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["like",{"_index":409,"title":{},"body":{"index.html":{}}}],["limit",{"_index":496,"title":{},"body":{"license.html":{}}}],["link",{"_index":347,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["liter",{"_index":149,"title":{},"body":{"classes/RestBase.html":{}}}],["local",{"_index":459,"title":{},"body":{"index.html":{}}}],["log",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":415,"title":{},"body":{"index.html":{}}}],["map",{"_index":72,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["map((respons",{"_index":205,"title":{},"body":{"classes/RestRoute.html":{}}}],["mapmodel",{"_index":13,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["mapmodel(method",{"_index":23,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["mapmodel(rout",{"_index":432,"title":{},"body":{"index.html":{}}}],["match",{"_index":57,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mayb",{"_index":405,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":520,"title":{},"body":{"license.html":{}}}],["merg",{"_index":499,"title":{},"body":{"license.html":{}}}],["method",{"_index":10,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["miscellan",{"_index":373,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":479,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":208,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["models/post",{"_index":426,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":498,"title":{},"body":{"license.html":{}}}],["modul",{"_index":474,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["much",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":29,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["names.some(v",{"_index":96,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["need",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":111,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["ngx",{"_index":380,"title":{},"body":{"index.html":{}}}],["node.j",{"_index":458,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":524,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":511,"title":{},"body":{"license.html":{}}}],["now",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":418,"title":{},"body":{"index.html":{}}}],["null",{"_index":117,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["number",{"_index":50,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["object.assign(plain",{"_index":128,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.assign(proto",{"_index":185,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.assign(thi",{"_index":92,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.getownpropertynames(p",{"_index":95,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(data",{"_index":87,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.getprototypeof(thi",{"_index":85,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["object.getprototypeof(this._bas",{"_index":215,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(basecopi",{"_index":216,"title":{},"body":{"classes/RestRoute.html":{}}}],["object.setprototypeof(dataproto",{"_index":90,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(plain",{"_index":139,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["object.setprototypeof(thi",{"_index":91,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["observ",{"_index":37,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["observable.pip",{"_index":201,"title":{},"body":{"classes/RestRoute.html":{}}}],["obtain",{"_index":489,"title":{},"body":{"license.html":{}}}],["obvers",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":435,"title":{},"body":{"index.html":{}}}],["onc",{"_index":468,"title":{},"body":{"index.html":{}}}],["option",{"_index":31,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":536,"title":{},"body":{"license.html":{}}}],["out",{"_index":102,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"license.html":{}}}],["overview",{"_index":539,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":105,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["packag",{"_index":370,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":473,"title":{},"body":{"index.html":{}}}],["param",{"_index":64,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["paramet",{"_index":28,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":51,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["parenturl",{"_index":228,"title":{},"body":{"classes/RestRoute.html":{}}}],["parenturl.length",{"_index":241,"title":{},"body":{"classes/RestRoute.html":{}}}],["parenturl.slice(0",{"_index":240,"title":{},"body":{"classes/RestRoute.html":{}}}],["particular",{"_index":522,"title":{},"body":{"license.html":{}}}],["pass",{"_index":194,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{}}}],["path",{"_index":25,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["permiss",{"_index":483,"title":{},"body":{"license.html":{}}}],["permit",{"_index":505,"title":{},"body":{"license.html":{}}}],["person",{"_index":488,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["pipe(map((respons",{"_index":221,"title":{},"body":{"classes/RestRoute.html":{}}}],["pipe(map(respons",{"_index":120,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["plain",{"_index":127,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["plain._bas",{"_index":129,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["plain[key",{"_index":134,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["pleas",{"_index":412,"title":{},"body":{"index.html":{}}}],["port",{"_index":465,"title":{},"body":{"index.html":{}}}],["portion",{"_index":514,"title":{},"body":{"license.html":{}}}],["post",{"_index":53,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(data",{"_index":169,"title":{},"body":{"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["posts/1/com",{"_index":446,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":106,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["prepar",{"_index":456,"title":{},"body":{"index.html":{}}}],["privat",{"_index":78,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["project",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{}}}],["protect",{"_index":151,"title":{},"body":{"classes/RestBase.html":{},"classes/RestRoute.html":{},"index.html":{}}}],["proto",{"_index":101,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["proto[key",{"_index":138,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["prototyp",{"_index":278,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["provid",{"_index":515,"title":{},"body":{"license.html":{}}}],["publish",{"_index":500,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":523,"title":{},"body":{"license.html":{}}}],["put",{"_index":54,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestModelBase.html":{},"miscellaneous/enumerations.html":{}}}],["put(param",{"_index":68,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["r",{"_index":224,"title":{},"body":{"classes/RestRoute.html":{}}}],["re",{"_index":39,"title":{},"body":{"interfaces/IAbstractBase.html":{},"classes/RestBase.html":{}}}],["readm",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["recursive(object.getprototypeof(p",{"_index":107,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["recursive(object.getprototypeof(proto",{"_index":103,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["recursive(p",{"_index":104,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["reduc",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["reimplement",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":471,"title":{},"body":{"index.html":{}}}],["reload",{"_index":467,"title":{},"body":{"index.html":{}}}],["remov",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["removeingoredfield",{"_index":130,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["renam",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":462,"title":{},"body":{"index.html":{}}}],["req",{"_index":35,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["request",{"_index":196,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["requestinterceptor",{"_index":14,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["requestinterceptor(req",{"_index":32,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["resourc",{"_index":9,"title":{"interfaces/Resource.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestRoute.html":{}}}],["respons",{"_index":122,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["response.bodi",{"_index":206,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.getplain",{"_index":444,"title":{},"body":{"index.html":{}}}],["response.map(r",{"_index":222,"title":{},"body":{"classes/RestRoute.html":{}}}],["response.typ",{"_index":203,"title":{},"body":{"classes/RestRoute.html":{}}}],["response[0].route('com",{"_index":447,"title":{},"body":{"index.html":{}}}],["responseinterceptor",{"_index":15,"title":{},"body":{"interfaces/IAbstractBase.html":{},"changelog.html":{}}}],["responseinterceptor(r",{"_index":36,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{}}}],["rest",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["restangular",{"_index":392,"title":{},"body":{"index.html":{}}}],["restapi",{"_index":428,"title":{},"body":{"index.html":{}}}],["restapi.servic",{"_index":437,"title":{},"body":{"index.html":{}}}],["restbas",{"_index":143,"title":{"classes/RestBase.html":{}},"body":{"classes/RestBase.html":{},"changelog.html":{},"index.html":{}}}],["restful(arg",{"_index":250,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["restfulopt",{"_index":248,"title":{"interfaces/RestfulOptions.html":{}},"body":{"interfaces/RestfulOptions.html":{}}}],["restmodel",{"_index":142,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restmodel/doc",{"_index":455,"title":{},"body":{"index.html":{}}}],["restmodelbas",{"_index":75,"title":{"classes/RestModelBase.html":{}},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["restmodelbase(basecopi",{"_index":219,"title":{},"body":{"classes/RestRoute.html":{}}}],["restmodelthen",{"_index":420,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":494,"title":{},"body":{"license.html":{}}}],["restrout",{"_index":42,"title":{"classes/RestRoute.html":{}},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{}}}],["restroute(thi",{"_index":152,"title":{},"body":{"classes/RestBase.html":{}}}],["restroute:74",{"_index":166,"title":{},"body":{"classes/RestModelBase.html":{}}}],["restroute:79",{"_index":168,"title":{},"body":{"classes/RestModelBase.html":{}}}],["restroute:84",{"_index":170,"title":{},"body":{"classes/RestModelBase.html":{}}}],["result",{"_index":56,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":19,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"index.html":{}}}],["right",{"_index":497,"title":{},"body":{"license.html":{}}}],["rosostolato",{"_index":482,"title":{},"body":{"license.html":{}}}],["rout",{"_index":16,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"index.html":{}}}],["route(path",{"_index":40,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{}}}],["route.id",{"_index":231,"title":{},"body":{"classes/RestRoute.html":{}}}],["route.par",{"_index":233,"title":{},"body":{"classes/RestRoute.html":{}}}],["route.path",{"_index":232,"title":{},"body":{"classes/RestRoute.html":{}}}],["run",{"_index":464,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":47,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"changelog.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":73,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["save",{"_index":419,"title":{},"body":{"index.html":{}}}],["see",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":438,"title":{},"body":{"index.html":{}}}],["sell",{"_index":504,"title":{},"body":{"license.html":{}}}],["send",{"_index":413,"title":{},"body":{"index.html":{}}}],["server",{"_index":463,"title":{},"body":{"index.html":{}}}],["servic",{"_index":421,"title":{},"body":{"index.html":{}}}],["shall",{"_index":512,"title":{},"body":{"license.html":{}}}],["share",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["softwar",{"_index":490,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"index.html":{}}}],["src/.../decorators.t",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../restmodel.t",{"_index":543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.t",{"_index":375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/decorators.t",{"_index":249,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["src/index",{"_index":423,"title":{},"body":{"index.html":{}}}],["src/restbase.t",{"_index":144,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:22",{"_index":147,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:26",{"_index":148,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:30",{"_index":150,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restbase.ts:6",{"_index":146,"title":{},"body":{"classes/RestBase.html":{}}}],["src/restmodel.t",{"_index":59,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"miscellaneous/typealiases.html":{}}}],["src/restmodel.ts:11",{"_index":66,"title":{},"body":{"interfaces/IRestModel.html":{}}}],["src/restmodel.ts:124",{"_index":163,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:13",{"_index":70,"title":{},"body":{"interfaces/IRestModel.html":{}}}],["src/restmodel.ts:17",{"_index":157,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:19",{"_index":156,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:77",{"_index":162,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:8",{"_index":69,"title":{},"body":{"interfaces/IRestModel.html":{}}}],["src/restmodel.ts:82",{"_index":158,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:87",{"_index":159,"title":{},"body":{"classes/RestModelBase.html":{}}}],["src/restmodel.ts:9",{"_index":63,"title":{},"body":{"interfaces/IRestModel.html":{}}}],["src/restroute.t",{"_index":171,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:74",{"_index":174,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:79",{"_index":175,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:8",{"_index":173,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/restroute.ts:84",{"_index":176,"title":{},"body":{"classes/RestRoute.html":{}}}],["src/types.t",{"_index":5,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/Resource.html":{},"miscellaneous/enumerations.html":{}}}],["src/types.ts:15",{"_index":18,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:16",{"_index":22,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:18",{"_index":41,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:19",{"_index":27,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:21",{"_index":34,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["src/types.ts:22",{"_index":38,"title":{},"body":{"interfaces/IAbstractBase.html":{}}}],["standard",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":260,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["still",{"_index":389,"title":{},"body":{"index.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"index.html":{}}}],["subject",{"_index":507,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":502,"title":{},"body":{"license.html":{}}}],["subscribe(com",{"_index":448,"title":{},"body":{"index.html":{}}}],["subscribe(respons",{"_index":442,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":513,"title":{},"body":{"license.html":{}}}],["super(_bas",{"_index":82,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["super(http",{"_index":429,"title":{},"body":{"index.html":{}}}],["t",{"_index":67,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["tabl",{"_index":382,"title":{},"body":{"index.html":{}}}],["target",{"_index":251,"title":{},"body":{"interfaces/RestfulOptions.html":{},"miscellaneous/functions.html":{}}}],["target._jsonignor",{"_index":257,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target._jsonignore.push(key",{"_index":258,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getbaseurl",{"_index":253,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["target.prototype.getdefaulthead",{"_index":255,"title":{},"body":{"interfaces/RestfulOptions.html":{}}}],["templat",{"_index":294,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test",{"_index":320,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:watch",{"_index":469,"title":{},"body":{"index.html":{}}}],["this._bas",{"_index":184,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.getbaseurl",{"_index":243,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.getdefaulthead",{"_index":245,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.http.request(req",{"_index":199,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.mapmodel(method",{"_index":247,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.requestinterceptor(req",{"_index":198,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.resource.path",{"_index":210,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.responseinterceptor(observ",{"_index":200,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._base.route(path",{"_index":141,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._createhttprequest(req",{"_index":118,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["this._createmodelhttprequest(httpmethod.delet",{"_index":123,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._createmodelhttprequest(httpmethod.put",{"_index":119,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._createroutehttprequest(httpmethod.get",{"_index":220,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._createroutehttprequest(httpmethod.post",{"_index":225,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._getbaseurl",{"_index":236,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._getfullpath",{"_index":114,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._getfullpath(method",{"_index":189,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._jsonignor",{"_index":132,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._makerest(httpmethod.delet",{"_index":124,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._makerest(httpmethod.get",{"_index":223,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._makerest(httpmethod.post",{"_index":226,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._makerest(httpmethod.put",{"_index":121,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this._mapmodel(method",{"_index":209,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._path",{"_index":180,"title":{},"body":{"classes/RestRoute.html":{}}}],["this._unifyprototype(dataproto",{"_index":88,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this.getplain(tru",{"_index":116,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["this.post",{"_index":443,"title":{},"body":{"index.html":{}}}],["this.restapi.route('post",{"_index":441,"title":{},"body":{"index.html":{}}}],["thisproto",{"_index":84,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["through",{"_index":195,"title":{},"body":{"classes/RestRoute.html":{},"index.html":{}}}],["tort",{"_index":535,"title":{},"body":{"license.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/IAbstractBase.html":{},"interfaces/IRestModel.html":{},"interfaces/Resource.html":{},"classes/RestBase.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{},"interfaces/RestfulOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":541,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefin",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":113,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}],["us",{"_index":434,"title":{},"body":{"index.html":{},"license.html":{}}}],["v",{"_index":97,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{}}}],["valu",{"_index":161,"title":{},"body":{"classes/RestModelBase.html":{},"miscellaneous/enumerations.html":{}}}],["verbo",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["veri",{"_index":404,"title":{},"body":{"index.html":{}}}],["version",{"_index":269,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":453,"title":{},"body":{"index.html":{}}}],["view",{"_index":450,"title":{},"body":{"index.html":{}}}],["want",{"_index":410,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":516,"title":{},"body":{"license.html":{}}}],["welcom",{"_index":417,"title":{},"body":{"index.html":{}}}],["whether",{"_index":532,"title":{},"body":{"license.html":{}}}],["wish",{"_index":397,"title":{},"body":{"index.html":{}}}],["withou",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":493,"title":{},"body":{"license.html":{}}}],["work",{"_index":183,"title":{},"body":{"classes/RestRoute.html":{},"changelog.html":{}}}],["ye",{"_index":65,"title":{},"body":{"interfaces/IRestModel.html":{},"classes/RestModelBase.html":{},"classes/RestRoute.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IAbstractBase.html":{"url":"interfaces/IAbstractBase.html","title":"interface - IAbstractBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAbstractBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        http\n                                \n                                \n                                        resource\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBaseUrl\n                                \n                                \n                                    getDefaultHeaders\n                                \n                                \n                                    mapModel\n                                \n                                \n                                    requestInterceptor\n                                \n                                \n                                    responseInterceptor\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapModel\n                            \n                            \n                        \n                    \n                \n                \n                    \nmapModel(method: HttpMethod, path: string, data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        method\n                                                        \n                                                                    HttpMethod\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nrequestInterceptor(req: HttpRequest)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     HttpRequest\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseInterceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \nresponseInterceptor(res: Observable>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        res\n                                                        \n                                                                    Observable>\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/types.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                    \n                                \n                                \n                                    \n                                        resource:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(method: HttpMethod, path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable>): Observable>;\n}\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE'\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRestModel.html":{"url":"interfaces/IRestModel.html","title":"interface - IRestModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRestModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    delete\n                                \n                                \n                                    getPlain\n                                \n                                \n                                    put\n                                \n                                \n                                    route\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:9\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:11\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:8\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { IAbstractBase, HttpMethod } from './types';\nimport { RestRoute } from './index';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface IRestModel {\n  put(params?: HttpParams): Observable;\n  delete(params?: HttpParams): Observable;\n\n  getPlain(): T;\n\n  route(path: string): RestRoute;\n}\n\nexport class RestModelBase extends RestRoute implements IRestModel {\n  id: number;\n\n  private _jsonIgnore?: string[];\n\n  constructor (_base: IAbstractBase, data: T) {\n    super(_base);\n\n    const thisProto = Object.getPrototypeOf(this);\n    let dataProto = Object.getPrototypeOf(data);\n    dataProto = this._unifyPrototype(dataProto);\n\n    if (isObject(dataProto)) {\n      dataProto = thisProto;\n    } else {\n      Object.setPrototypeOf(dataProto, thisProto);\n    }\n\n    Object.setPrototypeOf(this, dataProto);\n    Object.assign(this, data);\n\n    function isObject(p: any) {\n      const names = Object.getOwnPropertyNames(p);\n      return names.some(v => v === 'isPrototypeOf');\n    }\n  }\n\n  private _unifyPrototype(proto: any) {\n    if (isObject(proto)) {\n      return proto;\n    }\n\n    let out = {...proto}\n    recursive(Object.getPrototypeOf(proto));\n    return out;\n\n    function recursive(p: any) {\n      if (!isObject(p)) {\n        out = {...p, ...out}; // out is prefered\n        recursive(Object.getPrototypeOf(p))\n      }\n    }\n\n    function isObject(p: any) {\n      const names = Object.getOwnPropertyNames(p);\n      return names.some(v => v === 'isPrototypeOf');\n    }\n  }\n\n  private _createModelHttpRequest(method: HttpMethod.PUT|HttpMethod.DELETE, params?: HttpParams) {\n    const headers = new HttpHeaders(this._getDefaultHeaders());\n    const url = this._getFullPath();\n\n    const req = new HttpRequest(\n      method, url, method === HttpMethod.PUT ? this.getPlain(true) : null,\n      { headers, params }\n    );\n\n    return this._createHttpRequest(req);\n  }\n\n  put(params?: HttpParams): Observable {\n    return this._createModelHttpRequest(HttpMethod.PUT, params)\n      .pipe(map(response => this._makeRest(HttpMethod.PUT, response)));\n  }\n\n  delete(params?: HttpParams): Observable {\n    return this._createModelHttpRequest(HttpMethod.DELETE, params)\n      .pipe(map(response => this._makeRest(HttpMethod.DELETE, response)));\n  }\n\n  getPlain(removeIngoredFields = false): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    if (removeIngoredFields) {\n      // JsonIgnore\n      if (this._jsonIgnore) {\n        for (const key of this._jsonIgnore) {\n          delete plain[key];\n        }\n      }\n    }\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'route',\n      'put',\n      'delete',\n      'getPlain',\n      'getBaseUrl',\n      'getFullPath',\n      'getDefaultHeaders',\n      '_createModelHttpRequest',\n      '_unifyPrototype',\n      '_jsonIgnore'\n    ];\n\n    for (const key of methods) {\n      delete proto[key];\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  // Base\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\nexport type RestModel = IRestModel & T;\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Resource.html":{"url":"interfaces/Resource.html","title":"interface - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        parent\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     Resource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Resource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { RestRoute } from './restRoute';\nimport { Observable } from 'rxjs';\n\nexport interface Resource {\n  path: string,\n  id?: number,\n  parent?: Resource\n}\n\nexport interface IAbstractBase {\n  http: HttpClient;\n  resource: Resource;\n\n  getBaseUrl(): string;\n  getDefaultHeaders(): any;\n\n  route(path: string): RestRoute;\n  mapModel(method: HttpMethod, path: string, data: any): any;\n\n  requestInterceptor(req: HttpRequest): HttpRequest;\n  responseInterceptor(res: Observable>): Observable>;\n}\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE'\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestBase.html":{"url":"classes/RestBase.html","title":"class - RestBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restBase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBaseUrl\n                            \n                            \n                                getDefaultHeaders\n                            \n                            \n                                route\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/restBase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBaseUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBaseUrl()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDefaultHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDefaultHeaders()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     literal type\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restBase.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RestRoute } from './restRoute';\nimport { HttpMethod } from './types';\n\nexport class RestBase {\n  constructor (protected http: HttpClient) {\n  }\n\n  protected requestInterceptor(req: HttpRequest): HttpRequest {\n    return req;\n  }\n\n  protected responseInterceptor(res: Observable>): Observable> {\n    return res;\n  }\n\n  protected mapModel(method: HttpMethod, path: string, data: any) {\n    return data;\n  }\n\n  getBaseUrl() {\n    return '';\n  }\n\n  getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return {};\n  }\n\n  route(path: string) {\n    return new RestRoute(this as any, path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestModelBase.html":{"url":"classes/RestModelBase.html","title":"class - RestModelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestModelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restModel.ts\n        \n\n\n            \n                Extends\n            \n            \n                    RestRoute\n            \n\n            \n                Implements\n            \n            \n                        IRestModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getPlain\n                            \n                            \n                                put\n                            \n                            \n                                route\n                            \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, data: T)\n                    \n                \n                        \n                            \n                                Defined in src/restModel.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/restModel.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:82\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPlain\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPlain(removeIngoredFields: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:87\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        removeIngoredFields\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                false\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                            \n                        \n                    \n                \n                \n                    \nput(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:77\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            route\n                            \n                            \n                        \n                    \n                \n                \n                    \nroute(path: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restModel.ts:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     RestRoute\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:74\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:79\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     RestRoute\n\n                                \n                            \n                        \n                            \n                                    Defined in RestRoute:84\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpParams, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { IAbstractBase, HttpMethod } from './types';\nimport { RestRoute } from './index';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface IRestModel {\n  put(params?: HttpParams): Observable;\n  delete(params?: HttpParams): Observable;\n\n  getPlain(): T;\n\n  route(path: string): RestRoute;\n}\n\nexport class RestModelBase extends RestRoute implements IRestModel {\n  id: number;\n\n  private _jsonIgnore?: string[];\n\n  constructor (_base: IAbstractBase, data: T) {\n    super(_base);\n\n    const thisProto = Object.getPrototypeOf(this);\n    let dataProto = Object.getPrototypeOf(data);\n    dataProto = this._unifyPrototype(dataProto);\n\n    if (isObject(dataProto)) {\n      dataProto = thisProto;\n    } else {\n      Object.setPrototypeOf(dataProto, thisProto);\n    }\n\n    Object.setPrototypeOf(this, dataProto);\n    Object.assign(this, data);\n\n    function isObject(p: any) {\n      const names = Object.getOwnPropertyNames(p);\n      return names.some(v => v === 'isPrototypeOf');\n    }\n  }\n\n  private _unifyPrototype(proto: any) {\n    if (isObject(proto)) {\n      return proto;\n    }\n\n    let out = {...proto}\n    recursive(Object.getPrototypeOf(proto));\n    return out;\n\n    function recursive(p: any) {\n      if (!isObject(p)) {\n        out = {...p, ...out}; // out is prefered\n        recursive(Object.getPrototypeOf(p))\n      }\n    }\n\n    function isObject(p: any) {\n      const names = Object.getOwnPropertyNames(p);\n      return names.some(v => v === 'isPrototypeOf');\n    }\n  }\n\n  private _createModelHttpRequest(method: HttpMethod.PUT|HttpMethod.DELETE, params?: HttpParams) {\n    const headers = new HttpHeaders(this._getDefaultHeaders());\n    const url = this._getFullPath();\n\n    const req = new HttpRequest(\n      method, url, method === HttpMethod.PUT ? this.getPlain(true) : null,\n      { headers, params }\n    );\n\n    return this._createHttpRequest(req);\n  }\n\n  put(params?: HttpParams): Observable {\n    return this._createModelHttpRequest(HttpMethod.PUT, params)\n      .pipe(map(response => this._makeRest(HttpMethod.PUT, response)));\n  }\n\n  delete(params?: HttpParams): Observable {\n    return this._createModelHttpRequest(HttpMethod.DELETE, params)\n      .pipe(map(response => this._makeRest(HttpMethod.DELETE, response)));\n  }\n\n  getPlain(removeIngoredFields = false): T {\n    const plain: any = {};\n    Object.assign(plain, this);\n    delete plain._base;\n\n    if (removeIngoredFields) {\n      // JsonIgnore\n      if (this._jsonIgnore) {\n        for (const key of this._jsonIgnore) {\n          delete plain[key];\n        }\n      }\n    }\n\n    const proto = { ...Object.getPrototypeOf(this) };\n    const methods = [\n      'route',\n      'put',\n      'delete',\n      'getPlain',\n      'getBaseUrl',\n      'getFullPath',\n      'getDefaultHeaders',\n      '_createModelHttpRequest',\n      '_unifyPrototype',\n      '_jsonIgnore'\n    ];\n\n    for (const key of methods) {\n      delete proto[key];\n    }\n\n    Object.setPrototypeOf(plain, proto);\n    return plain;\n  }\n\n  // Base\n  route(path: string): RestRoute {\n    return this._base.route(path);\n  }\n}\n\nexport type RestModel = IRestModel & T;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestRoute.html":{"url":"classes/RestRoute.html","title":"class - RestRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restRoute.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                getOne\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_base: IAbstractBase, _path?: string)\n                    \n                \n                        \n                            \n                                Defined in src/restRoute.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _base\n                                                  \n                                                        \n                                                                    IAbstractBase\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        _path\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:74\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getOne\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetOne(id: number, params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:79\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(data: any, params?: HttpParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/restRoute.ts:84\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        params\n                                                        \n                                                                    HttpParams\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParams, HttpHeaders, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Resource, IAbstractBase, HttpMethod } from './types';\nimport { RestModel, RestModelBase } from './index';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nexport class RestRoute {\n  private _path?: string;\n\n  constructor (protected _base: IAbstractBase, _path?: string) {\n    if (_path) {\n      this._path = _path;\n    }\n\n    // hide _base\n    // FIXME: did not work\n    // delete this._base;\n    // const proto =\n    // Object.getPrototypeOf(this);\n    // Object.assign(proto, {_base});\n    // Object.setPrototypeOf(this, proto);\n  }\n\n  private _createRouteHttpRequest(method: HttpMethod.GET|HttpMethod.POST, params?: HttpParams, id_data?: any) {\n    const url = this._getFullPath(method === HttpMethod.GET ? id_data : null);\n    const headers = new HttpHeaders(this._getDefaultHeaders());\n\n    const req = new HttpRequest(method, url,\n      method === HttpMethod.POST ? id_data : null,\n      { headers, params }\n    );\n\n    return this._createHttpRequest(req);\n  }\n\n  protected _createHttpRequest(req: HttpRequest) {\n    // pass through request interceptor\n    req = this._base.requestInterceptor(req);\n\n    // the observable to return\n    let observable = this._base.http.request(req);\n\n    // pass through response interceptor\n    observable = this._base.responseInterceptor(observable);\n\n    return observable.pipe(\n      filter(response => response.type === HttpEventType.Response),\n      map((response: HttpResponse) => response.body)\n    );\n  }\n\n  protected _makeRest(method: HttpMethod, data: any): RestModel {\n    const model = this._mapModel(method, this._path || this._base.resource.path, data);\n\n    // create a copy of base class\n    const baseCopy = { ...this._base };\n    const baseProto = Object.getPrototypeOf(this._base);\n    Object.setPrototypeOf(baseCopy, baseProto);\n\n    if (this._path) {\n      const resource: Resource = {\n        id: data.id,\n        path: this._path,\n        parent: baseCopy.resource\n      };\n\n      baseCopy.resource = resource;\n    }\n\n    return new RestModelBase(baseCopy as any, model) as any;\n  }\n\n  // methods\n  getList(params?: HttpParams): Observable>> {\n    return this._createRouteHttpRequest(HttpMethod.GET, params)\n      .pipe(map((response: any[]) => response.map(r => this._makeRest(HttpMethod.GET, r))));\n  }\n\n  getOne(id: number, params?: HttpParams): Observable> {\n    return this._createRouteHttpRequest(HttpMethod.GET, params, id)\n      .pipe(map(response => this._makeRest(HttpMethod.GET, response)));\n  }\n\n  post(data: any, params?: HttpParams): Observable> {\n    return this._createRouteHttpRequest(HttpMethod.POST, params, data)\n      .pipe(map(response => this._makeRest(HttpMethod.POST, response)));\n  }\n\n  /////////\n  protected _getFullPath(id?: number) {\n    let parentUrl = '/';\n    addRoute(this._base.resource);\n\n    function addRoute(route?: Resource) {\n      if (route) {\n        if (route.id) {\n          parentUrl = '/' + route.id + parentUrl;\n        }\n        parentUrl = '/' + route.path + parentUrl;\n\n        if (route.parent) {\n          addRoute(route.parent);\n        }\n      }\n    }\n\n    let baseurl = this._getBaseUrl();\n    if (baseurl.charAt(baseurl.length - 1) === '/') {\n      baseurl = baseurl.slice(0, -1);\n    }\n\n    if (!this._path) {\n      parentUrl = parentUrl.slice(0, parentUrl.length-1);\n    }\n\n    const url = baseurl + parentUrl + (this._path || '') + (id ?  '/' + id : '');\n    return url;\n  }\n\n  // Base\n  protected _getBaseUrl(): string {\n    return this._base.getBaseUrl();\n  }\n\n  protected _getDefaultHeaders(): { [header: string]: string | string[]; } {\n    return this._base.getDefaultHeaders();\n  }\n\n  protected _mapModel(method: HttpMethod, path: string, data: any): any {\n    return this._base.mapModel(method, path, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestfulOptions.html":{"url":"interfaces/RestfulOptions.html","title":"interface - RestfulOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestfulOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RestfulOptions {\n  baseUrl?: string,\n  headers?: any\n}\n\nexport function Restful(args: RestfulOptions) {\n  return (Target: any): any => {\n    if (args.baseUrl) {\n      Target.prototype.getBaseUrl = () => {\n        return args.baseUrl;\n      };\n    }\n\n    if (args.headers) {\n      Target.prototype.getDefaultHeaders = () => {\n        return args.headers;\n      };\n    }\n\n    return Target;\n  };\n}\n\nexport function JsonIgnore(target: any, key: string) {\n  target._jsonIgnore = target._jsonIgnore || [];\n  target._jsonIgnore.push(key);\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.1.4 (2018-09-28)\nBug Fixes\n\nbase: base cannot be in prototype (e1eab3a)\n\n\n0.1.3 (2018-09-28)\nBug Fixes\n\nrestmodel: fix bug with extended models - issue #2 (e5e306d)\nrestmodel: fixed inheriting prototype #3 (44a4bdb)\nrestModel: remove route methods from restModel type (7d6061f)\nforgotten method (4c85e59)\n\nFeatures\n\nhttpMethods: enum as string (a5ba9b0)\nrestModel: JsonIgnore decorator (2038bb8)\nroute: default template is any (7aa1d51)\n\n\n0.1.2 (2018-08-17)\nBug Fixes\n\nobservable: http methods obversables returning errors (83b8901)\nresponseInterceptor: missing call (df2b6fc)\n\nFeatures\n\ndemo: improved demo app (799d470)\nHttp: reduce some codes with rxjs pipes (56cc762)\nmapModel: pass the current method on params (59b28fa)\nresponse: renamed FullResponse to response only (5ccb4eb)\nRestModel: RestModelBase extends RestRoute for methods sharing (3d1c218)\ntest: cover almost 100% of code (993011c)\ntests: improove code coverage (46eb968)\n\n\n0.1.1 (2018-08-14)\nBug Fixes\n\nrestModel: I forgot to change on restModel (7379bef)\n\n\n0.1.0 (2018-08-14)\n\n0.0.9 (2018-08-14)\nBug Fixes\n\nrequestInterceptor: it needs to create a new HttpRequest object, because it's immutable (a98b240)\n\n\n0.0.8 (2018-08-14)\nBug Fixes\n\nRestBase: Base should keep the originals properties, no copying (e6f672a)\nRoute: params and headers were not in request (085f547)\n\n\n0.0.7 (2018-08-10)\nBug Fixes\n\nreadme: Now all demo links are working (6188851)\n\n\n0.0.6 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\nFeatures\n\nRestBase: Add requestInterceptor, response and fullResponseInterc. (cdd0f86)\n\n\n0.0.5 (2018-08-10)\nBug Fixes\n\nhttp: fix http verbos (53ed63d)\ntest: post test (eeca740)\ntest: post test (86ff926)\n\n\n0.0.4 (2018-07-31)\n\nReimplemented all classes withou extending\nMuch better now\n\n\n0.0.3 (2018-07-31)\n\nFixed some bugs\n\n\n0.0.2 (2018-07-30)\n\nImplemented Route and methods\n\n\n0.0.1 (2018-07-30)\n\nFirst commit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            rxjs : >=6.0.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value: GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value: POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value: PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value: DELETE\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JsonIgnore   (src/.../decorators.ts)\n                        \n                        \n                            Restful   (src/.../decorators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JsonIgnore\n                            \n                            \n                        \n                    \n                \n                \n                    \nJsonIgnore(target: any, key: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        key\n                                                        \n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Restful\n                            \n                            \n                        \n                    \n                \n                \n                    \nRestful(args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx Restmodel\n\n\n\n\n\n\n\nDemo\nhttps://rosostolato.github.io/ngx-restmodel/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\n[!Highly Experimental - still in development]\nRequest from a restful api and link it to a model.\nI am a fun of Restangular but I've got desapointed with the version of Angular 2+. But since AngularJs, I wish Restangular could bind them methods on prototype and not inside its body. So the idea of this lib was born.\nIt's very experimental and maybe not correctly implemented, but I'm still developing the framework.\nIf you liked the idea and want to contribute, please send me an e-mail. Your help is welcome!\nInstallation\nInstall through npm:\nnpm install --save ngx-restmodelThen create a service that extends RestBase and implement the desireds methods.\nimport { RestBase, Restful } from '../src/index';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './models/Post';\n\n@Injectable()\n@Restful({\n  baseUrl: 'https://jsonplaceholder.typicode.com'\n})\nexport class RestApi extends RestBase {\n  constructor (http: HttpClient) {\n    super(http);\n  }\n\n  // Here you can map the responses direct to your models\n  protected mapModel(route: string, data: any) {\n    if (route === 'posts') {\n      return new Post(data);\n    }\n\n    return data;\n  }\n}Finally use in one of your apps components:\nimport { Component } from '@angular/core';\nimport { RestApi } from './restApi.service';\nimport { Post } from './models/Post';\n\n@Component({\n  selector: 'rest-demo-app',\n  template: ``\n})\nexport class DemoComponent {\n  posts: Post[]\n\n  constructor (private restApi: RestApi) {\n  }\n\n  GetPosts() {\n    // Route to the desired path\n    // Get /posts\n    this.restApi.route('posts')\n      .getList()\n      .subscribe(response => {\n        this.posts = response.getPlain();\n\n        // You can route again just like restangular\n        // Get /posts/1/comments\n        response[0].route('comments')\n          .getList()\n          .subscribe(comments => {\n          });\n      });\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source via compodoc and can be viewed here:\nhttps://rosostolato.github.io/ngx-restmodel/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\n\nBump the version in package.json (once the module hits 1.0 this will become automatic)npm run release\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 rosostolato\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RestModel   (src/.../restModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/restModel.ts\n    \n        \n            \n                \n                    \n                        \n                        RestModel\n                    \n                \n                \n                    \n                        RestModel:     \n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
